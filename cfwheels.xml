<?xml version="1.0"?>
<!--
Author      :	Russ Johnson (russ@angry-fly.com) 
Date        :	1/12/2009
Description :
	This is the CFEclipse Dictionary for CFWheels
 -->
<dictionary xmlns="http://www.cfeclipse.org/version1/dictionary" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.cfeclipse.org/version1/dictionary http://cfeclipse.tigris.org/version1/dictionary/dictionary.xsd">
    <tags>
		
	</tags>
    <functions>
        <function creator="8" name="addError" returns="void">
            <help><![CDATA[
			Adds an error on a specific property.
		]]></help>
            <parameter name="property" type="string" required="true">
                <help><![CDATA[
			The name of the property you want to add an error for.
		]]></help>
            </parameter>
            <parameter name="message" type="string" required="true">
                <help><![CDATA[
			The error message (such as "Please enter a correct name in the form field" for example).
		]]></help>
            </parameter>
            <parameter name="name" type="string" required="false">
                <help><![CDATA[
			A name to identify the error by (useful when you need to distinguish one error from another one set on the same object and you don't want to use the error message itself for that).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="addErrorToBase" returns="void">
            <help><![CDATA[
			Adds an error on the object as a whole (not related to any specific property).
		]]></help>
            <parameter name="message" type="string" required="true">
                <help><![CDATA[
			The error message (such as "Please enter a correct name in the form field" for example).
		]]></help>
            </parameter>
            <parameter name="name" type="string" required="false">
                <help><![CDATA[
			A name to identify the error by (useful when you need to distinguish one error from another one set on the same object and you don't want to use the error message itself for that).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="addRoute" returns="void">
            <help><![CDATA[
			Adds a new route to your application.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Name for the route.
		]]></help>
            </parameter>
            <parameter name="action" type="string" required="false">
                <help><![CDATA[
			Action to call when route matches (unless the action name exists in the pattern).
		]]></help>
            </parameter>
            <parameter name="controller" type="string" required="false">
                <help><![CDATA[
			Controller to call when route matches (unless the controller name exists in the pattern).
		]]></help>
            </parameter>
            <parameter name="pattern" type="string" required="true">
                <help><![CDATA[
			The URL pattern for the route.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="afterCreate" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called after a new object is created.
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="afterDelete" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called after an object is deleted.
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="afterFind" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called after an existing object has been initialized (usually done with the @findByKey or @findOne method).
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="afterInitialization" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called after an object has been initialized.
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="afterNew" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called after a new object has been initialized (usually done with the @new method).
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="afterSave" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called after an object is saved.
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="afterUpdate" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called after an existing object is updated.
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="afterValidation" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called after an object is validated.
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="afterValidationOnCreate" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called after a new object is validated.
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="afterValidationOnUpdate" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called after an existing object is validated.
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="allChanges" returns="struct">
            <help><![CDATA[
			Returns a struct detailing all changes that have been made on the object but not yet saved to the database.
		]]></help>
        </function>
        <function creator="8" name="allErrors" returns="array">
            <help><![CDATA[
			Returns an array of all the errors on the object.
		]]></help>
        </function>
        <function creator="8" name="autoLink" returns="string">
            <help><![CDATA[
			Turns all URLs and e-mail addresses into clickable links.
		]]></help>
            <parameter name="text" type="string" required="true">
                <help><![CDATA[
			The text to create links in.
		]]></help>
            </parameter>
            <parameter name="link" type="string" required="false">
                <help><![CDATA[
			Whether to link URLs, email addresses or both. Possible values are: `all` (default), `URLs` and `emailAddresses`.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="average" returns="numeric">
            <help><![CDATA[
			Calculates the average value for a given property. Uses the SQL function `AVG`.
		]]></help>
            <parameter name="property" type="string" required="true">
                <help><![CDATA[
			Name of the property to calculate the average for.
		]]></help>
            </parameter>
            <parameter name="where" type="string" required="false">
                <help><![CDATA[
			An SQL fragment such as `lastName LIKE 'A%'` for example.
		]]></help>
            </parameter>
            <parameter name="include" type="string" required="false">
                <help><![CDATA[
			Any associations that need to be included in the query.
		]]></help>
            </parameter>
            <parameter name="distinct" type="boolean" required="false">
                <help><![CDATA[
			When `true`, `AVG` will be performed only on each unique instance of a value, regardless of how many times the value occurs.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="beforeCreate" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called before a new object is created.
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="beforeDelete" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called before an object is deleted.
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="beforeSave" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called before an object is saved.
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="beforeUpdate" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called before an existing object is updated.
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="beforeValidation" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called before an object is validated.
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="beforeValidationOnCreate" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called before a new object is validated.
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="beforeValidationOnUpdate" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called before an existing object is validated.
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="belongsTo" returns="void">
            <help><![CDATA[
			Sets up a `belongsTo` association between this model and the specified one.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Gives the association a name that you refer to when working with the association (in the `include` argument to @findAll to name one example).
		]]></help>
            </parameter>
            <parameter name="class" type="string" required="false">
                <help><![CDATA[
			Name of associated class (usually not needed if you follow the Wheels conventions since the model name will be deduced from the `name` argument).
		]]></help>
            </parameter>
            <parameter name="foreignKey" type="string" required="false">
                <help><![CDATA[
			Foreign key property name (usually not needed if you follow the Wheels conventions since the foreign key name will be deduced from the `name` argument).
		]]></help>
            </parameter>
            <parameter name="joinType" type="string" required="false">
                <help><![CDATA[
			Use to set the join type when joining associated tables, possible values are `inner` (for `INNER JOIN`) and `outer` (for `LEFT OUTER JOIN`).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="buttonTo" returns="string">
            <help><![CDATA[
			Creates a form containing a single button that submits to the URL. The URL is built the same way as the @linkTo function.
		]]></help>
            <parameter name="text" type="string" required="false">
                <help><![CDATA[
			The text content of the button.
		]]></help>
            </parameter>
            <parameter name="confirm" type="string" required="false">
                <help><![CDATA[
			Pass a message here to cause a JavaScript confirmation dialog box to pop up containing the message.
		]]></help>
            </parameter>
            <parameter name="image" type="string" required="false">
                <help><![CDATA[
			If you want to use an image for the button pass in the link to it here (relative from the `images` folder).
		]]></help>
            </parameter>
            <parameter name="disable" type="any" required="false">
                <help><![CDATA[
			Pass in `true` if you want the button to be disabled when clicked (can help prevent multiple clicks), or pass in a string if you want the button disabled and the text on the button updated (to "please wait...", for example).
		]]></help>
            </parameter>
            <parameter name="route" type="string" required="false">
                <help><![CDATA[
			Name of a route that you have configured in `config/routes.cfm`.
		]]></help>
            </parameter>
            <parameter name="controller" type="string" required="false">
                <help><![CDATA[
			Name of the controller to include in the URL.
		]]></help>
            </parameter>
            <parameter name="action" type="string" required="false">
                <help><![CDATA[
			Name of the action to include in the URL.
		]]></help>
            </parameter>
            <parameter name="key" type="any" required="false">
                <help><![CDATA[
			Key(s) to include in the URL.
		]]></help>
            </parameter>
            <parameter name="params" type="string" required="false">
                <help><![CDATA[
			Any additional params to be set in the query string.
		]]></help>
            </parameter>
            <parameter name="anchor" type="string" required="false">
                <help><![CDATA[
			Sets an anchor name to be appended to the path.
		]]></help>
            </parameter>
            <parameter name="onlyPath" type="boolean" required="false">
                <help><![CDATA[
			If `true`, returns only the relative URL (no protocol, host name or port).
		]]></help>
            </parameter>
            <parameter name="host" type="string" required="false">
                <help><![CDATA[
			Set this to override the current host.
		]]></help>
            </parameter>
            <parameter name="protocol" type="string" required="false">
                <help><![CDATA[
			Set this to override the current protocol.
		]]></help>
            </parameter>
            <parameter name="port" type="numeric" required="false">
                <help><![CDATA[
			Set this to override the current port number.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="caches" returns="void">
            <help><![CDATA[
			Tells Wheels to cache one or more actions.
		]]></help>
            <parameter name="actions" type="string" required="false">
                <help><![CDATA[
			Action(s) to cache (can also be called with the `action` argument).
		]]></help>
            </parameter>
            <parameter name="time" type="numeric" required="false">
                <help><![CDATA[
			Minutes to cache the action(s) for.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="capitalize" returns="string">
            <help><![CDATA[
			Returns the text with the first character converted to uppercase.
		]]></help>
            <parameter name="text" type="string" required="true">
                <help><![CDATA[
			Text to capitalize.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="changedFrom" returns="string">
            <help><![CDATA[
			Returns the previous value of a property that has changed. Returns an empty string if no previous value exists. Wheels will keep a note of the previous property value until the object is saved to the database.
		]]></help>
            <parameter name="property" type="string" required="true">
                <help><![CDATA[
			Name of property to get the previous value for.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="changedProperties" returns="string">
            <help><![CDATA[
			Returns a list of the object properties that have been changed but not yet saved to the database.
		]]></help>
        </function>
        <function creator="8" name="checkBox" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a check box form control based on the supplied `objectName` and `property`.
		]]></help>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="checkedValue" type="string" required="false">
                <help><![CDATA[
			The value of the check box when it's on the `checked` state.
		]]></help>
            </parameter>
            <parameter name="errorElement" type="string" required="false">
                <help><![CDATA[
			HTML tag to wrap the form control with when the object contains errors.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="uncheckedValue" type="string" required="false">
                <help><![CDATA[
			The value of the check box when it's on the `unchecked` state.
		]]></help>
            </parameter>
            <parameter name="property" type="string" required="true">
                <help><![CDATA[
			The name of the property to use in the form control.
		]]></help>
            </parameter>
            <parameter name="objectName" type="any" required="true">
                <help><![CDATA[
			The variable name of the object to build the form control for.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="checkBoxTag" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a check box form control based on the supplied `name`.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Name to populate in tag's `name` attribute.
		]]></help>
            </parameter>
            <parameter name="checked" type="boolean" required="false">
                <help><![CDATA[
			Whether or not the check box should be checked by default.
		]]></help>
            </parameter>
            <parameter name="value" type="string" required="false">
                <help><![CDATA[
			Value of check box in its `checked` state.
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="clearErrors" returns="void">
            <help><![CDATA[
			Clears out all errors set on the object or only the ones set for a specific property or name.
		]]></help>
            <parameter name="property" type="string" required="false">
                <help><![CDATA[
			Specify a property name here if you want to clear all errors set on that property.
		]]></help>
            </parameter>
            <parameter name="name" type="string" required="false">
                <help><![CDATA[
			Specify an error name here if you want to clear all errors set with that error name.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="columnNames" returns="string">
            <help><![CDATA[
			Returns a list of column names in the table mapped to this model. The list is ordered according to the columns ordinal position in the database table.
		]]></help>
        </function>
        <function creator="8" name="contentForLayout" returns="string">
            <help><![CDATA[
			Used inside a layout file to output the HTML created in the view.
		]]></help>
        </function>
        <function creator="8" name="count" returns="numeric">
            <help><![CDATA[
			Returns the number of rows that match the arguments (or all rows if no arguments are passed in). Uses the SQL function `COUNT`.
		]]></help>
            <parameter name="where" type="string" required="false">
                <help><![CDATA[
			An SQL fragment such as `lastName LIKE 'A%'` for example.
		]]></help>
            </parameter>
            <parameter name="include" type="string" required="false">
                <help><![CDATA[
			Any associations that need to be included in the query.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="create" returns="any">
            <help><![CDATA[
			Creates a new object, saves it to the database (if the validation permits it) and returns it. If the validation fails, the unsaved object (with errors added to it) is still returned. Property names and values can be passed in either using named arguments or as a struct to the `properties` argument.
		]]></help>
            <parameter name="properties" type="struct" required="false">
                <help><![CDATA[
			The properties you want to set on the object (can also be passed in as named arguments).
		]]></help>
            </parameter>
            <parameter name="defaults" type="boolean" required="false">
                <help><![CDATA[
			Whether or not to set default values for properties.
		]]></help>
            </parameter>
            <parameter name="parameterize" type="any" required="false">
                <help><![CDATA[
			See documentation for @findAll.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="cycle" returns="string">
            <help><![CDATA[
			Cycles through list values every time it is called.
		]]></help>
            <parameter name="values" type="string" required="true">
                <help><![CDATA[
			List of values to cycle through.
		]]></help>
            </parameter>
            <parameter name="name" type="string" required="false">
                <help><![CDATA[
			Name to give the cycle. Useful when you use multiple cycles on a page.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="dataSource" returns="void">
            <help><![CDATA[
			Use this method to override the data source connection information for this model.
		]]></help>
            <parameter name="datasource" type="string" required="true">
                <help><![CDATA[
			The data source name to connect to.
		]]></help>
            </parameter>
            <parameter name="username" type="string" required="false">
                <help><![CDATA[
			The username for the data source.
		]]></help>
            </parameter>
            <parameter name="password" type="string" required="false">
                <help><![CDATA[
			The password for the data source.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="dateSelect" returns="string">
            <help><![CDATA[
			Builds and returns a string containing three select form controls for a date based on the supplied `objectName` and `property`.
		]]></help>
            <parameter name="objectName" type="any" required="false">
                <help><![CDATA[
			The variable name of the object to build the form control for.
		]]></help>
            </parameter>
            <parameter name="property" type="string" required="false">
                <help><![CDATA[
			The name of the property to use in the form control.
		]]></help>
            </parameter>
            <parameter name="order" type="string" required="false">
                <help><![CDATA[
			Use to change the order of or exclude date select tags.
		]]></help>
            </parameter>
            <parameter name="separator" type="string" required="false">
                <help><![CDATA[
			Use to change the character that is displayed between the date select tags.
		]]></help>
            </parameter>
            <parameter name="startYear" type="numeric" required="false">
                <help><![CDATA[
			First year in select list.
		]]></help>
            </parameter>
            <parameter name="endYear" type="numeric" required="false">
                <help><![CDATA[
			Last year in select list.
		]]></help>
            </parameter>
            <parameter name="monthDisplay" type="string" required="false">
                <help><![CDATA[
			Pass in `names`, `numbers` or `abbreviations` to control display.
		]]></help>
            </parameter>
            <parameter name="includeBlank" type="any" required="false">
                <help><![CDATA[
			Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="errorElement" type="string" required="false">
                <help><![CDATA[
			HTML tag to wrap the form control with when the object contains errors.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="dateSelectTags" returns="string">
            <help><![CDATA[
			Builds and returns a string containing three select form controls (month, day and year).
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Name to populate in tag's `name` attribute.
		]]></help>
            </parameter>
            <parameter name="selected" type="date" required="false">
                <help><![CDATA[
			Value of option that should be selected by default.
		]]></help>
            </parameter>
            <parameter name="order" type="string" required="false">
                <help><![CDATA[
			Use to change the order of or exclude date select tags.
		]]></help>
            </parameter>
            <parameter name="separator" type="string" required="false">
                <help><![CDATA[
			Use to change the character that is displayed between the date select tags.
		]]></help>
            </parameter>
            <parameter name="startYear" type="numeric" required="false">
                <help><![CDATA[
			First year in select list.
		]]></help>
            </parameter>
            <parameter name="endYear" type="numeric" required="false">
                <help><![CDATA[
			Last year in select list.
		]]></help>
            </parameter>
            <parameter name="monthDisplay" type="string" required="false">
                <help><![CDATA[
			Pass in `names`, `numbers` or `abbreviations` to control display.
		]]></help>
            </parameter>
            <parameter name="includeBlank" type="any" required="false">
                <help><![CDATA[
			See documentation for @select.
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="dateTimeSelect" returns="string">
            <help><![CDATA[
			Builds and returns a string containing six select form controls (three for date selection and the remaining three for time selection) based on the supplied `objectName` and `property`.
		]]></help>
            <parameter name="objectName" type="string" required="true">
                <help><![CDATA[
			The variable name of the object to build the form control for.
		]]></help>
            </parameter>
            <parameter name="property" type="string" required="true">
                <help><![CDATA[
			The name of the property to use in the form control.
		]]></help>
            </parameter>
            <parameter name="dateOrder" type="string" required="false">
                <help><![CDATA[
			See documentation for @dateSelect.
		]]></help>
            </parameter>
            <parameter name="dateSeparator" type="string" required="false">
                <help><![CDATA[
			See documentation for @dateSelect.
		]]></help>
            </parameter>
            <parameter name="startYear" type="numeric" required="false">
                <help><![CDATA[
			First year in select list.
		]]></help>
            </parameter>
            <parameter name="endYear" type="numeric" required="false">
                <help><![CDATA[
			Last year in select list.
		]]></help>
            </parameter>
            <parameter name="monthDisplay" type="string" required="false">
                <help><![CDATA[
			Pass in `names`, `numbers` or `abbreviations` to control display.
		]]></help>
            </parameter>
            <parameter name="timeOrder" type="string" required="false">
                <help><![CDATA[
			See documentation for @timeSelect.
		]]></help>
            </parameter>
            <parameter name="timeSeparator" type="string" required="false">
                <help><![CDATA[
			See documentation for @timeSelect.
		]]></help>
            </parameter>
            <parameter name="minuteStep" type="numeric" required="false">
                <help><![CDATA[
			Pass in `10` to only show minute 10, 20,30 etc.
		]]></help>
            </parameter>
            <parameter name="separator" type="string" required="false">
                <help><![CDATA[
			Use to change the character that is displayed between the first and second set of select tags.
		]]></help>
            </parameter>
            <parameter name="includeBlank" type="any" required="false">
                <help><![CDATA[
			Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="errorElement" type="string" required="false">
                <help><![CDATA[
			HTML tag to wrap the form control with when the object contains errors.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="dateTimeSelectTags" returns="string">
            <help><![CDATA[
			Builds and returns a string containing six select form controls (three for date selection and the remaining three for time selection).
		]]></help>
            <parameter name="dateOrder" type="string" required="false">
                <help><![CDATA[
			See documentation for @dateSelect.
		]]></help>
            </parameter>
            <parameter name="dateSeparator" type="string" required="false">
                <help><![CDATA[
			See documentation for @dateSelect.
		]]></help>
            </parameter>
            <parameter name="startYear" type="numeric" required="false">
                <help><![CDATA[
			See documentation for @dateSelect.
		]]></help>
            </parameter>
            <parameter name="endYear" type="numeric" required="false">
                <help><![CDATA[
			See documentation for @dateSelect.
		]]></help>
            </parameter>
            <parameter name="monthDisplay" type="string" required="false">
                <help><![CDATA[
			See documentation for @dateSelect.
		]]></help>
            </parameter>
            <parameter name="timeOrder" type="string" required="false">
                <help><![CDATA[
			See documentation for @timeSelect.
		]]></help>
            </parameter>
            <parameter name="timeSeparator" type="string" required="false">
                <help><![CDATA[
			See documentation for @timeSelect.
		]]></help>
            </parameter>
            <parameter name="minuteStep" type="numeric" required="false">
                <help><![CDATA[
			See documentation for @timeSelect.
		]]></help>
            </parameter>
            <parameter name="separator" type="string" required="false">
                <help><![CDATA[
			Use to change the character that is displayed between the first and second set of select tags.
		]]></help>
            </parameter>
            <parameter name="includeBlank" type="any" required="false">
                <help><![CDATA[
			Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="daySelectTag" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a select form control for the days of the week based on the supplied `name`.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Name to populate in tag's `name` attribute.
		]]></help>
            </parameter>
            <parameter name="selected" type="date" required="false">
                <help><![CDATA[
			The day that should be selected initially.
		]]></help>
            </parameter>
            <parameter name="includeBlank" type="any" required="false">
                <help><![CDATA[
			Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="delete" returns="boolean">
            <help><![CDATA[
			Deletes the object, which means the row is deleted from the database (unless prevented by a `beforeDelete` callback). Returns `true` on successful deletion of the row, `false` otherwise.
		]]></help>
            <parameter name="parameterize" type="any" required="false">
                <help><![CDATA[
			Accepts a boolean value or a string. Set to `true` to use `cfqueryparam` on all columns or pass in a list of property names to use `cfqueryparam` on those only.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="deleteAll" returns="numeric">
            <help><![CDATA[
			Deletes all records that match the where argument. By default objects will not be instantiated and therefore callbacks and validations are not invoked. You can change this behavior by passing in `instantiate=true`. Returns the number of records that were deleted.
		]]></help>
            <parameter name="where" type="string" required="false">
                <help><![CDATA[
			This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `AND`, and `OR` (note that the key words have to be written in upper case). You can also use parentheses to group statements. You do not have to specify the table name(s), Wheels will do that for you.
		]]></help>
            </parameter>
            <parameter name="include" type="string" required="false">
                <help><![CDATA[
			Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model you can specify them in a list, e.g. `department,addresses,emails`. You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))` for example.
		]]></help>
            </parameter>
            <parameter name="parameterize" type="any" required="false">
                <help><![CDATA[
			Accepts a boolean value or a string. Set to `true` to use `cfqueryparam` on all columns or pass in a list of property names to use `cfqueryparam` on those only.
		]]></help>
            </parameter>
            <parameter name="instantiate" type="boolean" required="false">
                <help><![CDATA[
			Whether or not to instantiate the object(s) first. When objects are not instantiated any callbacks and validations set on them will be skipped.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="deleteByKey" returns="boolean">
            <help><![CDATA[
			Finds the record with the supplied key and deletes it. Returns `true` on successful deletion of the row, `false` otherwise.
		]]></help>
            <parameter name="key" type="any" required="true">
                <help><![CDATA[
			Primary key value(s) of the record to fetch. Separate with comma if passing in multiple primary key values. Accepts a string, list or a numeric value.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="deleteOne" returns="boolean">
            <help><![CDATA[
			Gets an object based on conditions and deletes it.
		]]></help>
            <parameter name="where" type="string" required="false">
                <help><![CDATA[
			This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `AND`, and `OR` (note that the key words have to be written in upper case). You can also use parentheses to group statements. You do not have to specify the table name(s), Wheels will do that for you.
		]]></help>
            </parameter>
            <parameter name="order" type="string" required="false">
                <help><![CDATA[
			This argument maps to the `ORDER BY` clause of the query. You do not have to specify the table name(s), Wheels will do that for you.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="deobfuscateParam" returns="string">
            <help><![CDATA[
			Deobfuscates a value.
		]]></help>
            <parameter name="param" type="string" required="true">
                <help><![CDATA[
			Value to deobfuscate.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="distanceOfTimeInWords" returns="string">
            <help><![CDATA[
			Pass in two dates to this method, and it will return a string describing the difference between them.
		]]></help>
            <parameter name="fromTime" type="date" required="true">
                <help><![CDATA[
			Date to compare from.
		]]></help>
            </parameter>
            <parameter name="toTime" type="date" required="true">
                <help><![CDATA[
			Date to compare to.
		]]></help>
            </parameter>
            <parameter name="includeSeconds" type="boolean" required="false">
                <help><![CDATA[
			Whether or not to include the number of seconds in the returned string.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="endFormTag" returns="string">
            <help><![CDATA[
			Builds and returns a string containing the closing `form` tag.
		]]></help>
        </function>
        <function creator="8" name="errorCount" returns="numeric">
            <help><![CDATA[
			Returns the number of errors this object has associated with it. Specify `property` or `name` if you wish to count only specific errors.
		]]></help>
            <parameter name="property" type="string" required="false">
                <help><![CDATA[
			Specify a property name here if you want to count only errors set on a specific property.
		]]></help>
            </parameter>
            <parameter name="name" type="string" required="false">
                <help><![CDATA[
			Specify an error name here if you want to count only errors set with a specific error name.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="errorMessageOn" returns="string">
            <help><![CDATA[
			Returns the error message, if one exists, on the object's property. If multiple error messages exists, the first one is returned.
		]]></help>
            <parameter name="objectName" type="string" required="true">
                <help><![CDATA[
			The variable name of the object to display the error message for.
		]]></help>
            </parameter>
            <parameter name="property" type="string" required="true">
                <help><![CDATA[
			The name of the property to display the error message for.
		]]></help>
            </parameter>
            <parameter name="prependText" type="string" required="false">
                <help><![CDATA[
			String to prepend to the error message.
		]]></help>
            </parameter>
            <parameter name="appendText" type="string" required="false">
                <help><![CDATA[
			String to append to the error message.
		]]></help>
            </parameter>
            <parameter name="wrapperElement" type="string" required="false">
                <help><![CDATA[
			HTML element to wrap the error message in.
		]]></help>
            </parameter>
            <parameter name="class" type="string" required="false">
                <help><![CDATA[
			CSS class to set on the wrapper element.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="errorMessagesFor" returns="string">
            <help><![CDATA[
			Builds and returns a list (`ul` tag with a class of `error-messages`) containing all the error messages for all the properties of the object, if any. Returns an empty string otherwise.
		]]></help>
            <parameter name="objectName" type="string" required="true">
                <help><![CDATA[
			The variable name of the object to display error messages for.
		]]></help>
            </parameter>
            <parameter name="class" type="string" required="false">
                <help><![CDATA[
			CSS class to set on the `ul` element.
		]]></help>
            </parameter>
            <parameter name="showDuplicates" type="boolean" required="false">
                <help><![CDATA[
			Whether to show duplicate error messages.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="errorsOn" returns="array">
            <help><![CDATA[
			Returns an array of all errors associated with the supplied property (and error name when passed in).
		]]></help>
            <parameter name="property" type="string" required="true">
                <help><![CDATA[
			Specify the property name to return errors for here.
		]]></help>
            </parameter>
            <parameter name="name" type="string" required="false">
                <help><![CDATA[
			If you want to return only errors on the above property set with a specific error name you can specify it here.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="errorsOnBase" returns="array">
            <help><![CDATA[
			Returns an array of all errors associated with the object as a whole (not related to any specific property).
		]]></help>
            <parameter name="name" type="string" required="false">
                <help><![CDATA[
			Specify an error name here to only return errors for that error name.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="excerpt" returns="string">
            <help><![CDATA[
			Extracts an excerpt from text that matches the first instance of phrase.
		]]></help>
            <parameter name="text" type="string" required="true">
                <help><![CDATA[
			The text to extract an excerpt from.
		]]></help>
            </parameter>
            <parameter name="phrase" type="string" required="true">
                <help><![CDATA[
			The phrase to extract.
		]]></help>
            </parameter>
            <parameter name="radius" type="numeric" required="false">
                <help><![CDATA[
			Number of characters to extract surrounding the phrase.
		]]></help>
            </parameter>
            <parameter name="excerptString" type="string" required="false">
                <help><![CDATA[
			String to replace first and/or last characters with.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="exists" returns="boolean">
            <help><![CDATA[
			Checks if a record exists in the table. You can pass in either a primary key value to the `key` argument or a string to the `where` argument.
		]]></help>
            <parameter name="key" type="any" required="false">
                <help><![CDATA[
			Primary key value(s) of the record to fetch. Separate with comma if passing in multiple primary key values. Accepts a string, list or a numeric value.
		]]></help>
            </parameter>
            <parameter name="where" type="string" required="false">
                <help><![CDATA[
			This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `AND`, and `OR` (note that the key words have to be written in upper case). You can also use parentheses to group statements. You do not have to specify the table name(s), Wheels will do that for you.
		]]></help>
            </parameter>
            <parameter name="reload" type="boolean" required="false">
                <help><![CDATA[
			Set to `true` to force Wheels to query the database even though an identical query has been run in the same request (the default in Wheels is to get the second query from the cache).
		]]></help>
            </parameter>
            <parameter name="parameterize" type="any" required="false">
                <help><![CDATA[
			Accepts a boolean value or a string. Set to `true` to use `cfqueryparam` on all columns or pass in a list of property names to use `cfqueryparam` on those only.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="fileField" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a file field form control based on the supplied `objectName` and `property`.
		]]></help>
            <parameter name="objectName" type="any" required="true">
                <help><![CDATA[
			The variable name of the object to build the form control for.
		]]></help>
            </parameter>
            <parameter name="property" type="string" required="true">
                <help><![CDATA[
			The name of the property to use in the form control.
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="errorElement" type="string" required="false">
                <help><![CDATA[
			HTML tag to wrap the form control with when the object contains errors.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="fileFieldTag" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a file form control based on the supplied `name`.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Name to populate in tag's `name` attribute.
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="filters" returns="void">
            <help><![CDATA[
			Tells Wheels to run a function before an action is run or after an action has been run. You can also specify multiple functions and actions.
		]]></help>
            <parameter name="through" type="string" required="true">
                <help><![CDATA[
			Function(s) to execute before or after the action(s).
		]]></help>
            </parameter>
            <parameter name="type" type="string" required="false">
                <help><![CDATA[
			Whether to run the function(s) before or after the action(s).
		]]></help>
            </parameter>
            <parameter name="only" type="string" required="false">
                <help><![CDATA[
			Pass in a list of action names (or one action name) to tell Wheels that the filter function(s) should only be run on these actions.
		]]></help>
            </parameter>
            <parameter name="except" type="string" required="false">
                <help><![CDATA[
			Pass in a list of action names (or one action name) to tell Wheels that the filter function(s) should be run on all actions except the specified ones.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="findAll" returns="any">
            <help><![CDATA[
			Returns records from the database table mapped to this model according to the arguments passed in (use the `where` argument to decide which records to get, use the `order` argument to set in what order those records should be returned and so on). The records will be returned as either a `cfquery` result set or an array of objects (depending on what the `returnAs` argument is set to). Instead of using the `where` argument you can create cleaner code by making use of a concept called dynamic finders.
		]]></help>
            <parameter name="where" type="string" required="false">
                <help><![CDATA[
			This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `AND`, and `OR` (note that the key words have to be written in upper case). You can also use parentheses to group statements. You do not have to specify the table name(s), Wheels will do that for you.
		]]></help>
            </parameter>
            <parameter name="order" type="string" required="false">
                <help><![CDATA[
			This argument maps to the `ORDER BY` clause of the query. You do not have to specify the table name(s), Wheels will do that for you.
		]]></help>
            </parameter>
            <parameter name="select" type="string" required="false">
                <help><![CDATA[
			This argument determines how the `SELECT` clause for the query used to return data will look.	You can pass in a list of the properties (which maps to columns) that you want returned from your table(s). If you don't set this argument at all, Wheels will select all properties from your table(s). If you specify a table name (e.g. `users.email`) or alias a column (e.g. `fn AS firstName`) in the list then the entire list will be passed through unchanged and used in the `SELECT` clause of the query. If not, Wheels will prepend the table name and resolve any naming collisions (which could happen when using the `include` argument) automatically for you. The naming collisions are resolved by prepending the model name to the property name so `users.firstName` could become `userFirstName` for example.
		]]></help>
            </parameter>
            <parameter name="distinct" type="boolean" required="false">
                <help><![CDATA[
			Boolean value to decide whether to add the `DISTINCT` keyword to your `SELECT` clause. Wheels will, when necessary, add this automatically (when using pagination and a `hasMany` association is used in the `include` argument to name one example).
		]]></help>
            </parameter>
            <parameter name="include" type="string" required="false">
                <help><![CDATA[
			Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model you can specify them in a list, e.g. `department,addresses,emails`. You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))` for example.
		]]></help>
            </parameter>
            <parameter name="maxRows" type="numeric" required="false">
                <help><![CDATA[
			Maximum number of records to retrieve. Passed on to the `maxRows` `cfquery` attribute. The default `-1` means that all records will be retrieved.
		]]></help>
            </parameter>
            <parameter name="page" type="numeric" required="false">
                <help><![CDATA[
			If you want to paginate records (i.e. get records 11-20 for example) you can do so by specifying a page number here. For example, getting records 11-20 would be page number 2 when `perPage` is kept at the default setting (10 records per page). The default, `0`, means that records won't be paginated and that the `perPage`, `count` and `handle` arguments will be ignored.
		]]></help>
            </parameter>
            <parameter name="perPage" type="numeric" required="false">
                <help><![CDATA[
			When using pagination you can specify how many records you want to fetch per page here. This argument is only used when the `page` argument has been passed in.
		]]></help>
            </parameter>
            <parameter name="count" type="numeric" required="false">
                <help><![CDATA[
			When using pagination and you know in advance how many records you want to paginate through you can pass in that value here. Doing so will prevent Wheels from running a `COUNT` query to get this value. This argument is only used when the `page` argument has been passed in.
		]]></help>
            </parameter>
            <parameter name="handle" type="string" required="false">
                <help><![CDATA[
			Handle to use for the query in pagination. This is useful when you're paginating multiple queries and need to reference them in the @paginationLinks function for example. This argument is only used when the `page` argument has been passed in.
		]]></help>
            </parameter>
            <parameter name="cache" type="any" required="false">
                <help><![CDATA[
			Accepts a boolean or numeric value. If you want to cache the query you can do so by specifying the number of minutes you want to cache the query for here. If you set it to `true` the default cache time will be used (60 minutes).
		]]></help>
            </parameter>
            <parameter name="reload" type="boolean" required="false">
                <help><![CDATA[
			Set to `true` to force Wheels to query the database even though an identical query has been run in the same request (the default in Wheels is to get the second query from the cache).
		]]></help>
            </parameter>
            <parameter name="parameterize" type="any" required="false">
                <help><![CDATA[
			Accepts a boolean value or a string. Set to `true` to use `cfqueryparam` on all columns or pass in a list of property names to use `cfqueryparam` on those only.
		]]></help>
            </parameter>
            <parameter name="returnAs" type="string" required="false">
                <help><![CDATA[
			Set this to `objects` to return an array of objects instead of a query result set which is the default return type.
		]]></help>
            </parameter>
            <parameter name="returnIncluded" type="boolean" required="false">
                <help><![CDATA[
			When `returnAs` is set to `objects` you can set this argument to `false` to prevent returning objects fetched from associations specified in the `include` argument. This is useful when you only need to include associations for use in the `WHERE` clause only and want to avoid the performance hit that comes with object creation.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="findByKey" returns="any">
            <help><![CDATA[
			Fetches the requested record and returns it as an object. Returns `false` if no record is found. You can override this behavior to return a `cfquery` result set instead, similar to what's described in the documentation for @findOne.
		]]></help>
            <parameter name="key" type="any" required="true">
                <help><![CDATA[
			Primary key value(s) of the record to fetch. Separate with comma if passing in multiple primary key values. Accepts a string, list or a numeric value.
		]]></help>
            </parameter>
            <parameter name="select" type="string" required="false">
                <help><![CDATA[
			This argument determines how the `SELECT` clause for the query used to return data will look.	You can pass in a list of the properties (which maps to columns) that you want returned from your table(s). If you don't set this argument at all, Wheels will select all properties from your table(s). If you specify a table name (e.g. `users.email`) or alias a column (e.g. `fn AS firstName`) in the list then the entire list will be passed through unchanged and used in the `SELECT` clause of the query. If not, Wheels will prepend the table name and resolve any naming collisions (which could happen when using the `include` argument) automatically for you. The naming collisions are resolved by prepending the model name to the property name so `users.firstName` could become `userFirstName` for example.
		]]></help>
            </parameter>
            <parameter name="include" type="string" required="false">
                <help><![CDATA[
			Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model you can specify them in a list, e.g. `department,addresses,emails`. You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))` for example.
		]]></help>
            </parameter>
            <parameter name="cache" type="any" required="false">
                <help><![CDATA[
			Accepts a boolean or numeric value. If you want to cache the query you can do so by specifying the number of minutes you want to cache the query for here. If you set it to `true` the default cache time will be used (60 minutes).
		]]></help>
            </parameter>
            <parameter name="reload" type="boolean" required="false">
                <help><![CDATA[
			Set to `true` to force Wheels to query the database even though an identical query has been run in the same request (the default in Wheels is to get the second query from the cache).
		]]></help>
            </parameter>
            <parameter name="parameterize" type="any" required="false">
                <help><![CDATA[
			Accepts a boolean value or a string. Set to `true` to use `cfqueryparam` on all columns or pass in a list of property names to use `cfqueryparam` on those only.
		]]></help>
            </parameter>
            <parameter name="returnAs" type="string" required="false">
                <help><![CDATA[
			Can be set to either `object` or `query`. See documentation for @findAll for more info.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="findOne" returns="any">
            <help><![CDATA[
			Fetches the first record found based on the `WHERE` and `ORDER BY` clauses. With the default settings (i.e. the `returnAs` argument set to `object`) a model object will be returned if the record is found and the boolean value `false` if not. Instead of using the `where` argument you can create cleaner code by making use of a concept called dynamic finders.
		]]></help>
            <parameter name="where" type="string" required="false">
                <help><![CDATA[
			This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `AND`, and `OR` (note that the key words have to be written in upper case). You can also use parentheses to group statements. You do not have to specify the table name(s), Wheels will do that for you.
		]]></help>
            </parameter>
            <parameter name="order" type="string" required="false">
                <help><![CDATA[
			This argument maps to the `ORDER BY` clause of the query. You do not have to specify the table name(s), Wheels will do that for you.
		]]></help>
            </parameter>
            <parameter name="select" type="string" required="false">
                <help><![CDATA[
			This argument determines how the `SELECT` clause for the query used to return data will look.	You can pass in a list of the properties (which maps to columns) that you want returned from your table(s). If you don't set this argument at all, Wheels will select all properties from your table(s). If you specify a table name (e.g. `users.email`) or alias a column (e.g. `fn AS firstName`) in the list then the entire list will be passed through unchanged and used in the `SELECT` clause of the query. If not, Wheels will prepend the table name and resolve any naming collisions (which could happen when using the `include` argument) automatically for you. The naming collisions are resolved by prepending the model name to the property name so `users.firstName` could become `userFirstName` for example.
		]]></help>
            </parameter>
            <parameter name="include" type="string" required="false">
                <help><![CDATA[
			Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model you can specify them in a list, e.g. `department,addresses,emails`. You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))` for example.
		]]></help>
            </parameter>
            <parameter name="cache" type="any" required="false">
                <help><![CDATA[
			Accepts a boolean or numeric value. If you want to cache the query you can do so by specifying the number of minutes you want to cache the query for here. If you set it to `true` the default cache time will be used (60 minutes).
		]]></help>
            </parameter>
            <parameter name="reload" type="boolean" required="false">
                <help><![CDATA[
			Set to `true` to force Wheels to query the database even though an identical query has been run in the same request (the default in Wheels is to get the second query from the cache).
		]]></help>
            </parameter>
            <parameter name="parameterize" type="any" required="false">
                <help><![CDATA[
			Accepts a boolean value or a string. Set to `true` to use `cfqueryparam` on all columns or pass in a list of property names to use `cfqueryparam` on those only.
		]]></help>
            </parameter>
            <parameter name="returnAs" type="string" required="false">
                <help><![CDATA[
			Can be set to either `object` or `query`. See documentation for @findAll for more info.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="flash" returns="any">
            <help><![CDATA[
			Gets the value of a specific key in the Flash (or the entire flash as a struct if no key is passed in).
		]]></help>
            <parameter name="key" type="string" required="false">
                <help><![CDATA[
			The key to get the value for.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="flashClear" returns="void">
            <help><![CDATA[
			Deletes everything from the Flash.
		]]></help>
        </function>
        <function creator="8" name="flashCount" returns="numeric">
            <help><![CDATA[
			Checks how many keys exist in the Flash.
		]]></help>
        </function>
        <function creator="8" name="flashDelete" returns="boolean">
            <help><![CDATA[
			Deletes a specific key from the Flash.
		]]></help>
            <parameter name="key" type="string" required="true">
                <help><![CDATA[
			The key to delete.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="flashInsert" returns="void">
            <help><![CDATA[
			Inserts a new key/value to the Flash.
		]]></help>
        </function>
        <function creator="8" name="flashIsEmpty" returns="boolean">
            <help><![CDATA[
			Checks if the Flash is empty.
		]]></help>
        </function>
        <function creator="8" name="flashKeyExists" returns="boolean">
            <help><![CDATA[
			Checks if a specific key exists in the Flash.
		]]></help>
            <parameter name="key" type="string" required="true">
                <help><![CDATA[
			The key to check if it exists.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="get" returns="any">
            <help><![CDATA[
			Returns the current setting for the supplied variable name.
		]]></help>
            <parameter name="functionName" type="string" required="false">
                <help><![CDATA[
			Function name to get setting for.
		]]></help>
            </parameter>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Variable name to get setting for.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="hasChanged" returns="boolean">
            <help><![CDATA[
			Returns `true` if the specified object property (or any if none was passed in) have been changed but not yet saved to the database. Will also return `true` if the object is new and no record for it exists in the database.
		]]></help>
            <parameter name="property" type="string" required="false">
                <help><![CDATA[
			Name of property to check for change.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="hasErrors" returns="boolean">
            <help><![CDATA[
			Returns `true` if the object has any errors. You can also limit to only check a specific property and name for errors.
		]]></help>
            <parameter name="property" type="string" required="false">
                <help><![CDATA[
			Name of the property to check if there are any errors set on.
		]]></help>
            </parameter>
            <parameter name="name" type="string" required="false">
                <help><![CDATA[
			Error name to check if there are any errors set with.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="hasMany" returns="void">
            <help><![CDATA[
			Sets up a `hasMany` association between this model and the specified one.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Gives the association a name that you refer to when working with the association (in the `include` argument to @findAll to name one example).
		]]></help>
            </parameter>
            <parameter name="class" type="string" required="false">
                <help><![CDATA[
			Name of associated class (usually not needed if you follow the Wheels conventions since the model name will be deduced from the `name` argument).
		]]></help>
            </parameter>
            <parameter name="foreignKey" type="string" required="false">
                <help><![CDATA[
			Foreign key property name (usually not needed if you follow the Wheels conventions since the foreign key name will be deduced from the `name` argument).
		]]></help>
            </parameter>
            <parameter name="joinType" type="string" required="false">
                <help><![CDATA[
			Use to set the join type when joining associated tables, possible values are `inner` (for `INNER JOIN`) and `outer` (for `LEFT OUTER JOIN`).
		]]></help>
            </parameter>
            <parameter name="shortcut" type="string" required="false">
                <help><![CDATA[
			Set this argument to create an additional dynamic method that gets the objects for a many-to-many association.
		]]></help>
            </parameter>
            <parameter name="through" type="string" required="false">
                <help><![CDATA[
			Set this argument if you need to override the Wheels convention when using the `shortcut` argument.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="hasOne" returns="void">
            <help><![CDATA[
			Sets up a `hasOne` association between this model and the specified one.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Gives the association a name that you refer to when working with the association (in the `include` argument to @findAll to name one example).
		]]></help>
            </parameter>
            <parameter name="class" type="string" required="false">
                <help><![CDATA[
			Name of associated class (usually not needed if you follow the Wheels conventions since the model name will be deduced from the `name` argument).
		]]></help>
            </parameter>
            <parameter name="foreignKey" type="string" required="false">
                <help><![CDATA[
			Foreign key property name (usually not needed if you follow the Wheels conventions since the foreign key name will be deduced from the `name` argument).
		]]></help>
            </parameter>
            <parameter name="joinType" type="string" required="false">
                <help><![CDATA[
			Use to set the join type when joining associated tables, possible values are `inner` (for `INNER JOIN`) and `outer` (for `LEFT OUTER JOIN`).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="hiddenField" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a hidden field form control based on the supplied `objectName` and `property`.
		]]></help>
            <parameter name="objectName" type="any" required="true">
                <help><![CDATA[
			The variable name of the object to build the form control for.
		]]></help>
            </parameter>
            <parameter name="property" type="string" required="true">
                <help><![CDATA[
			The name of the property to use in the form control.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="hiddenFieldTag" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a hidden field form control based on the supplied `name`.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Name to populate in tag's `name` attribute.
		]]></help>
            </parameter>
            <parameter name="value" type="string" required="false">
                <help><![CDATA[
			Value to populate in tag's `value` attribute.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="highlight" returns="string">
            <help><![CDATA[
			Highlights the phrase(s) everywhere in the text if found by wrapping it in a `span` tag.
		]]></help>
            <parameter name="text" type="string" required="true">
                <help><![CDATA[
			Text to search.
		]]></help>
            </parameter>
            <parameter name="phrases" type="string" required="true">
                <help><![CDATA[
			List of phrases to highlight.
		]]></help>
            </parameter>
            <parameter name="class" type="string" required="false">
                <help><![CDATA[
			Class to use in `span` tags surrounding highlighted phrase(s).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="hourSelectTag" returns="string">
            <help><![CDATA[
			Builds and returns a string containing one select form control for the hours of the day based on the supplied `name`.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Name to populate in tag's `name` attribute.
		]]></help>
            </parameter>
            <parameter name="selected" type="date" required="false">
                <help><![CDATA[
			The hour that should be selected initially.
		]]></help>
            </parameter>
            <parameter name="includeBlank" type="any" required="false">
                <help><![CDATA[
			Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="humanize" returns="string">
            <help><![CDATA[
			Returns readable text by capitalizing, converting camel casing to multiple words.
		]]></help>
            <parameter name="text" type="string" required="true">
                <help><![CDATA[
			Text to humanize.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="imageTag" returns="string">
            <help><![CDATA[
			Returns an `img` tag and will (if the image is stored in the local `images` folder) set the `width`, `height`, and `alt` attributes automatically for you.
		]]></help>
            <parameter name="source" type="string" required="true">
                <help><![CDATA[
			Image file name if local or full URL if remote.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="includePartial" returns="string">
            <help><![CDATA[
			Includes the specified file in the view. Similar to using `cfinclude` but with the ability to cache the result and using Wheels specific file look-up. By default, Wheels will look for the file in the current controller's view folder. To include a file relative from the `views` folder, you can start the path supplied to `name` with a forward slash.
		]]></help>
            <parameter name="partial" type="any" required="true">
                <help><![CDATA[
			The name of the file to be used (starting with an optional path and with the underscore and file extension excluded).
		]]></help>
            </parameter>
            <parameter name="group" type="string" required="false">
                <help><![CDATA[
			Field to group the query by. A new query will be passed into the partial template for you to iterate over.
		]]></help>
            </parameter>
            <parameter name="cache" type="any" required="false">
                <help><![CDATA[
			See documentation for @renderPage.
		]]></help>
            </parameter>
            <parameter name="layout" type="string" required="false">
                <help><![CDATA[
			See documentation for @renderPage.
		]]></help>
            </parameter>
            <parameter name="spacer" type="string" required="false">
                <help><![CDATA[
			HTML or string to place between partials when called using a query.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="isAjax" returns="boolean">
            <help><![CDATA[
			Returns whether the page was called from JavaScript or not.
		]]></help>
        </function>
        <function creator="8" name="isGet" returns="boolean">
            <help><![CDATA[
			Returns whether the request was a normal (GET) request or not.
		]]></help>
        </function>
        <function creator="8" name="isNew" returns="boolean">
            <help><![CDATA[
			Returns `true` if this object hasn't been saved yet (in other words no record exists in the database yet). Returns `false` if a record exists.
		]]></help>
        </function>
        <function creator="8" name="isPost" returns="boolean">
            <help><![CDATA[
			Returns whether the request came from a form submission or not.
		]]></help>
        </function>
        <function creator="8" name="javaScriptIncludeTag" returns="string">
            <help><![CDATA[
			Returns a `script` tag for a Javascript file (or several) tag based on the supplied arguments.
		]]></help>
            <parameter name="sources" type="string" required="false">
                <help><![CDATA[
			The name of one or many JavaScript files in the `javascripts` folder, minus the `.js` extension. (Can also be called with the `source` argument).
		]]></help>
            </parameter>
            <parameter name="type" type="string" required="false">
                <help><![CDATA[
			The `type` attribute for the `script` tag.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="key" returns="string">
            <help><![CDATA[
			Returns the value of the primary key for the object. If you have a single primary key named `id` then `someObject.key()` is functionally equivalent to `someObject.id`. This method is more useful when you do dynamic programming and don't know the name of the primary key or when you use composite keys (in which case it's convenient to use this method to get a list of both key values returned).
		]]></help>
        </function>
        <function creator="8" name="linkTo" returns="string">
            <help><![CDATA[
			Creates a link to another page in your application. Pass in the name of a `route` to use your configured routes or a `controller`/`action`/`key` combination.
		]]></help>
            <parameter name="text" type="string" required="false">
                <help><![CDATA[
			The text content of the link.
		]]></help>
            </parameter>
            <parameter name="confirm" type="string" required="false">
                <help><![CDATA[
			Pass a message here to cause a JavaScript confirmation dialog box to pop up containing the message.
		]]></help>
            </parameter>
            <parameter name="route" type="string" required="false">
                <help><![CDATA[
			Name of a route that you have configured in `config/routes.cfm`.
		]]></help>
            </parameter>
            <parameter name="controller" type="string" required="false">
                <help><![CDATA[
			Name of the controller to include in the URL.
		]]></help>
            </parameter>
            <parameter name="action" type="string" required="false">
                <help><![CDATA[
			Name of the action to include in the URL.
		]]></help>
            </parameter>
            <parameter name="key" type="any" required="false">
                <help><![CDATA[
			Key(s) to include in the URL.
		]]></help>
            </parameter>
            <parameter name="params" type="string" required="false">
                <help><![CDATA[
			Any additional params to be set in the query string.
		]]></help>
            </parameter>
            <parameter name="anchor" type="string" required="false">
                <help><![CDATA[
			Sets an anchor name to be appended to the path.
		]]></help>
            </parameter>
            <parameter name="onlyPath" type="boolean" required="false">
                <help><![CDATA[
			If `true`, returns only the relative URL (no protocol, host name or port).
		]]></help>
            </parameter>
            <parameter name="host" type="string" required="false">
                <help><![CDATA[
			Set this to override the current host.
		]]></help>
            </parameter>
            <parameter name="protocol" type="string" required="false">
                <help><![CDATA[
			Set this to override the current protocol.
		]]></help>
            </parameter>
            <parameter name="port" type="numeric" required="false">
                <help><![CDATA[
			Set this to override the current port number.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="mailTo" returns="string">
            <help><![CDATA[
			Creates a `mailto` link tag to the specified email address, which is also used as the name of the link unless name is specified.
		]]></help>
            <parameter name="emailAddress" type="string" required="true">
                <help><![CDATA[
			The email address to link to.
		]]></help>
            </parameter>
            <parameter name="name" type="string" required="false">
                <help><![CDATA[
			A string to use as the link text ("Joe" or "Support Department", for example).
		]]></help>
            </parameter>
            <parameter name="encode" type="boolean" required="false">
                <help><![CDATA[
			Pass `true` here to encode the email address, making it harder for bots to harvest it for example.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="maximum" returns="numeric">
            <help><![CDATA[
			Calculates the maximum value for a given property. Uses the SQL function `MAX`.
		]]></help>
            <parameter name="property" type="string" required="true">
                <help><![CDATA[
			Name of the property to get the highest value for (has to be a property of a numeric data type).
		]]></help>
            </parameter>
            <parameter name="where" type="string" required="false">
                <help><![CDATA[
			An SQL fragment such as `lastName LIKE 'A%'` for example.
		]]></help>
            </parameter>
            <parameter name="include" type="string" required="false">
                <help><![CDATA[
			Any associations that need to be included in the query.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="minimum" returns="numeric">
            <help><![CDATA[
			Calculates the minimum value for a given property. Uses the SQL function `MIN`.
		]]></help>
            <parameter name="property" type="string" required="true">
                <help><![CDATA[
			Name of the property to get the lowest value for (has to be a property of a numeric data type).
		]]></help>
            </parameter>
            <parameter name="where" type="string" required="false">
                <help><![CDATA[
			An SQL fragment such as `lastName LIKE 'A%'` for example.
		]]></help>
            </parameter>
            <parameter name="include" type="string" required="false">
                <help><![CDATA[
			Any associations that need to be included in the query.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="minuteSelectTag" returns="string">
            <help><![CDATA[
			Builds and returns a string containing one select form control for the minutes of an hour based on the supplied `name`.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Name to populate in tag's `name` attribute.
		]]></help>
            </parameter>
            <parameter name="selected" type="date" required="false">
                <help><![CDATA[
			The minute that should be selected initially.
		]]></help>
            </parameter>
            <parameter name="minuteStep" type="numeric" required="false">
                <help><![CDATA[
			Pass in `10` to only show minute 10, 20,30 etc.
		]]></help>
            </parameter>
            <parameter name="includeBlank" type="any" required="false">
                <help><![CDATA[
			Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="model" returns="any">
            <help><![CDATA[
			Returns a reference to the requested model so that class level methods can be called on it.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Name of the model (class name) to get a reference to.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="monthSelectTag" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a select form control for the months of the year based on the supplied `name`.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Name to populate in tag's `name` attribute.
		]]></help>
            </parameter>
            <parameter name="selected" type="date" required="false">
                <help><![CDATA[
			The month that should be selected initially.
		]]></help>
            </parameter>
            <parameter name="monthDisplay" type="string" required="false">
                <help><![CDATA[
			Pass in `names`, `numbers` or `abbreviations` to control display.
		]]></help>
            </parameter>
            <parameter name="includeBlank" type="any" required="false">
                <help><![CDATA[
			Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="new" returns="any">
            <help><![CDATA[
			Creates a new object based on supplied properties and returns it. The object is not saved to the database, it only exists in memory. Property names and values can be passed in either using named arguments or as a struct to the `properties` argument.
		]]></help>
            <parameter name="properties" type="struct" required="false">
                <help><![CDATA[
			The properties you want to set on the object (can also be passed in as named arguments).
		]]></help>
            </parameter>
            <parameter name="defaults" type="boolean" required="false">
                <help><![CDATA[
			Whether or not to set default values for properties.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="obfuscateParam" returns="string">
            <help><![CDATA[
			Obfuscates a value, typically used for hiding primary key values when passed along in the URL.
		]]></help>
            <parameter name="param" type="any" required="true">
                <help><![CDATA[
			Value to obfuscate.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="pagination" returns="struct">
            <help><![CDATA[
			Returns a struct with information about the specificed paginated query. The variables that will be returned are `currentPage`, `totalPages` and `totalRecords`.
		]]></help>
            <parameter name="handle" type="string" required="false">
                <help><![CDATA[
			The handle given to the query to return pagination information for.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="paginationLinks" returns="string">
            <help><![CDATA[
			Builds and returns a string containing links to pages based on a paginated query. Uses @linkTo internally to build the link, so you need to pass in a `route` name or a `controller`/`action`/`key` combination. All other @linkTo arguments can be supplied as well, in which case they are passed through directly to @linkTo. If you have paginated more than one query in the controller, you can use the `handle` argument to reference them. (Don't forget to pass in a `handle` to the @findAll function in your controller first).
		]]></help>
            <parameter name="windowSize" type="numeric" required="false">
                <help><![CDATA[
			The number of page links to show around the current page.
		]]></help>
            </parameter>
            <parameter name="alwaysShowAnchors" type="boolean" required="false">
                <help><![CDATA[
			Whether or not links to the first and last page should always be displayed.
		]]></help>
            </parameter>
            <parameter name="anchorDivider" type="string" required="false">
                <help><![CDATA[
			String to place next to the anchors on either side of the list.
		]]></help>
            </parameter>
            <parameter name="linkToCurrentPage" type="boolean" required="false">
                <help><![CDATA[
			Whether or not the current page should be linked to.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String or HTML to be prepended before result.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String or HTML to be appended after result.
		]]></help>
            </parameter>
            <parameter name="prependToPage" type="string" required="false">
                <help><![CDATA[
			String or HTML to be prepended before each page number.
		]]></help>
            </parameter>
            <parameter name="prependOnFirst" type="boolean" required="false">
                <help><![CDATA[
			Whether or not to prepend the `prependToPage` string on the first page in the list.
		]]></help>
            </parameter>
            <parameter name="appendToPage" type="string" required="false">
                <help><![CDATA[
			String or HTML to be appended after each page number.
		]]></help>
            </parameter>
            <parameter name="appendOnLast" type="boolean" required="false">
                <help><![CDATA[
			Whether or not to append the `appendToPage` string on the last page in the list.
		]]></help>
            </parameter>
            <parameter name="classForCurrent" type="string" required="false">
                <help><![CDATA[
			Class name for the current page number (if `linkToCurrentPage` is `true`, the class name will go on the `a` element. If not, a `span` element will be used).
		]]></help>
            </parameter>
            <parameter name="handle" type="string" required="false">
                <help><![CDATA[
			The handle given to the query that the pagination links should be displayed for.
		]]></help>
            </parameter>
            <parameter name="name" type="string" required="false">
                <help><![CDATA[
			The name of the param that holds the current page number.
		]]></help>
            </parameter>
            <parameter name="showSinglePage" type="boolean" required="false">
                <help><![CDATA[
			Will show a single page when set to `true`. (The default behavior is to return an empty string when there is only one page in the pagination).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="passwordField" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a password field form control based on the supplied `objectName` and `property`.
		]]></help>
            <parameter name="objectName" type="any" required="true">
                <help><![CDATA[
			The variable name of the object to build the form control for.
		]]></help>
            </parameter>
            <parameter name="property" type="string" required="true">
                <help><![CDATA[
			The name of the property to use in the form control.
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="errorElement" type="string" required="false">
                <help><![CDATA[
			HTML tag to wrap the form control with when the object contains errors.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="passwordFieldTag" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a password field form control based on the supplied `name`.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Name to populate in tag's `name` attribute.
		]]></help>
            </parameter>
            <parameter name="value" type="string" required="false">
                <help><![CDATA[
			Value to populate in tag's `value` attribute.
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="pluginNames" returns="string">
            <help><![CDATA[
			Returns a list of all installed plugins.
		]]></help>
        </function>
        <function creator="8" name="pluralize" returns="string">
            <help><![CDATA[
			Returns the plural form of the passed in word.
		]]></help>
            <parameter name="word" type="string" required="true">
                <help><![CDATA[
			The word to pluralize.
		]]></help>
            </parameter>
            <parameter name="count" type="numeric" required="false">
                <help><![CDATA[
			Pluralization will occur when this value is not `1`.
		]]></help>
            </parameter>
            <parameter name="returnCount" type="boolean" required="false">
                <help><![CDATA[
			Will return `count` prepended to the pluralization when `true` and `count` is not `-1`.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="primaryKey" returns="string">
            <help><![CDATA[
			Returns the name of the primary key for this model's table. This is determined through database introspection. If composite primary keys have been used they will both be returned in a list.
		]]></help>
        </function>
        <function creator="8" name="properties" returns="struct">
            <help><![CDATA[
			Returns a structure of all the properties with their names as keys and the values of the property as values.
		]]></help>
        </function>
        <function creator="8" name="property" returns="void">
            <help><![CDATA[
			Use this method to map an object property to either a table column with a different name than the property or to a specific SQL function. You only need to use this method when you want to override the default mapping that Wheels performs.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			The name that you want to use for the column or SQL function result in the CFML code.
		]]></help>
            </parameter>
            <parameter name="column" type="string" required="false">
                <help><![CDATA[
			The name of the column in the database table to map the property to.
		]]></help>
            </parameter>
            <parameter name="sql" type="string" required="false">
                <help><![CDATA[
			An SQL function to use to calculate the property value.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="propertyNames" returns="string">
            <help><![CDATA[
			Returns a list of property names ordered by their respective column's ordinal position in the database table and with eventual calculated properties at the end.
		]]></help>
        </function>
        <function creator="8" name="radioButton" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a radio button form control based on the supplied `objectName` and `property`.
		]]></help>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="errorElement" type="string" required="false">
                <help><![CDATA[
			HTML tag to wrap the form control with when the object contains errors.
		]]></help>
            </parameter>
            <parameter name="objectName" type="any" required="true">
                <help><![CDATA[
			The variable name of the object to build the form control for.
		]]></help>
            </parameter>
            <parameter name="property" type="string" required="true">
                <help><![CDATA[
			The name of the property to use in the form control.
		]]></help>
            </parameter>
            <parameter name="tagValue" type="string" required="true">
                <help><![CDATA[
			The value of the radio button when `selected`.
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="radioButtonTag" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a radio button form control based on the supplied `name`.
		]]></help>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="checked" type="boolean" required="false">
                <help><![CDATA[
			Whether or not to check the radio button by default.
		]]></help>
            </parameter>
            <parameter name="value" type="string" required="true">
                <help><![CDATA[
			Value to populate in tag's `value` attribute.
		]]></help>
            </parameter>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Name to populate in tag's `name` attribute.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="redirectTo" returns="void">
            <help><![CDATA[
			Redirects the browser to the supplied `controller`/`action`/`key`, `route` or back to the referring page. Internally It uses the @URLFor function to build the link and the `cflocation` tag to perform the redirect.
		]]></help>
            <parameter name="back" type="boolean" required="false">
                <help><![CDATA[
			Set to `true` to redirect back to the referring page.
		]]></help>
            </parameter>
            <parameter name="addToken" type="boolean" required="false">
                <help><![CDATA[
			See documentation for `cflocation`.
		]]></help>
            </parameter>
            <parameter name="port" type="numeric" required="false">
                <help><![CDATA[
			Set this to override the current port number.
		]]></help>
            </parameter>
            <parameter name="statusCode" type="numeric" required="false">
                <help><![CDATA[
			See documentation for `cflocation`.
		]]></help>
            </parameter>
            <parameter name="route" type="string" required="false">
                <help><![CDATA[
			Name of a route that you have configured in `config/routes.cfm`.
		]]></help>
            </parameter>
            <parameter name="controller" type="string" required="false">
                <help><![CDATA[
			Name of the controller to include in the URL.
		]]></help>
            </parameter>
            <parameter name="action" type="string" required="false">
                <help><![CDATA[
			Name of the action to include in the URL.
		]]></help>
            </parameter>
            <parameter name="key" type="any" required="false">
                <help><![CDATA[
			Key(s) to include in the URL.
		]]></help>
            </parameter>
            <parameter name="params" type="string" required="false">
                <help><![CDATA[
			Any additional params to be set in the query string.
		]]></help>
            </parameter>
            <parameter name="anchor" type="string" required="false">
                <help><![CDATA[
			Sets an anchor name to be appended to the path.
		]]></help>
            </parameter>
            <parameter name="onlyPath" type="boolean" required="false">
                <help><![CDATA[
			If `true`, returns only the relative URL (no protocol, host name or port).
		]]></help>
            </parameter>
            <parameter name="host" type="string" required="false">
                <help><![CDATA[
			Set this to override the current host.
		]]></help>
            </parameter>
            <parameter name="protocol" type="string" required="false">
                <help><![CDATA[
			Set this to override the current protocol.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="reload" returns="void">
            <help><![CDATA[
			Reloads the property values of this object from the database.
		]]></help>
        </function>
        <function creator="8" name="renderNothing" returns="void">
            <help><![CDATA[
			Renders a blank string to the browser. This is very similar to calling `cfabort` with the advantage that any after filters you have set on the action will still be run.
		]]></help>
        </function>
        <function creator="8" name="renderPage" returns="any">
            <help><![CDATA[
			Renders content to the browser by including the view page for the specified `controller` and `action`.
		]]></help>
            <parameter name="returnAs" type="string" required="false">
                <help><![CDATA[
			Set to `string` to return the result to the controller instead of sending it to the browser immediately.
		]]></help>
            </parameter>
            <parameter name="action" type="string" required="false">
                <help><![CDATA[
			Action to include the view page for.
		]]></help>
            </parameter>
            <parameter name="controller" type="string" required="false">
                <help><![CDATA[
			Controller to include the view page for.
		]]></help>
            </parameter>
            <parameter name="cache" type="any" required="false">
                <help><![CDATA[
			Minutes to cache the content for.
		]]></help>
            </parameter>
            <parameter name="layout" type="any" required="false">
                <help><![CDATA[
			The layout to wrap the content in.
		]]></help>
            </parameter>
            <parameter name="template" type="string" required="false">
                <help><![CDATA[
			A specific template to render.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="renderPartial" returns="any">
            <help><![CDATA[
			Renders content to the browser by including a partial.
		]]></help>
            <parameter name="partial" type="string" required="true">
                <help><![CDATA[
			The name of the file to be used (starting with an optional path and with the underscore and file extension excluded).
		]]></help>
            </parameter>
            <parameter name="cache" type="any" required="false">
                <help><![CDATA[
			Minutes to cache the content for.
		]]></help>
            </parameter>
            <parameter name="layout" type="string" required="false">
                <help><![CDATA[
			The layout to wrap the content in.
		]]></help>
            </parameter>
            <parameter name="returnAs" type="string" required="false">
                <help><![CDATA[
			Set to `string` to return the result to the controller instead of sending it to the browser immediately.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="renderText" returns="void">
            <help><![CDATA[
			Renders the specified text to the browser.
		]]></help>
            <parameter name="text" type="any" required="true">
                <help><![CDATA[
			The text to be rendered.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="resetCycle" returns="void">
            <help><![CDATA[
			Resets a cycle so that it starts from the first list value the next time it is called.
		]]></help>
            <parameter name="name" type="string" required="false">
                <help><![CDATA[
			The name of the cycle to reset.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="save" returns="boolean">
            <help><![CDATA[
			Saves the object if it passes validation and callbacks. Returns `true` if the object was saved successfully to the database, `false` if not.
		]]></help>
            <parameter name="parameterize" type="any" required="false">
                <help><![CDATA[
			Accepts a boolean value or a string. Set to `true` to use `cfqueryparam` on all columns or pass in a list of property names to use `cfqueryparam` on those only.
		]]></help>
            </parameter>
            <parameter name="defaults" type="boolean" required="false">
                <help><![CDATA[
			Whether or not to set default values for properties.
		]]></help>
            </parameter>
            <parameter name="validate" type="boolean" required="false">
                <help><![CDATA[
			Whether or not to run validations when saving
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="secondSelectTag" returns="string">
            <help><![CDATA[
			Builds and returns a string containing one select form control for the seconds of a minute based on the supplied `name`.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Name to populate in tag's `name` attribute.
		]]></help>
            </parameter>
            <parameter name="selected" type="date" required="false">
                <help><![CDATA[
			The second that should be selected initially.
		]]></help>
            </parameter>
            <parameter name="includeBlank" type="any" required="false">
                <help><![CDATA[
			Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="select" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a select form control based on the supplied `objectName` and `property`.
		]]></help>
            <parameter name="objectName" type="any" required="true">
                <help><![CDATA[
			The variable name of the object to build the form control for.
		]]></help>
            </parameter>
            <parameter name="property" type="string" required="true">
                <help><![CDATA[
			The name of the property to use in the form control.
		]]></help>
            </parameter>
            <parameter name="options" type="any" required="true">
                <help><![CDATA[
			A collection to populate the select form control with. Can be a query recordset or an array of objects.
		]]></help>
            </parameter>
            <parameter name="includeBlank" type="any" required="false">
                <help><![CDATA[
			Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
		]]></help>
            </parameter>
            <parameter name="valueField" type="string" required="false">
                <help><![CDATA[
			The column or property to use for the value of each list element. Used only when a query or array of objects has been supplied in the `options` argument.
		]]></help>
            </parameter>
            <parameter name="textField" type="string" required="false">
                <help><![CDATA[
			The column or property to use for the value of each list element that the end user will see. Used only when a query or array of objects has been supplied in the `options` argument.
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="errorElement" type="string" required="false">
                <help><![CDATA[
			HTML tag to wrap the form control with when the object contains errors.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="selectTag" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a select form control based on the supplied `name` and `options`.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Name to populate in tag's `name` attribute.
		]]></help>
            </parameter>
            <parameter name="options" type="any" required="true">
                <help><![CDATA[
			See documentation for @textFieldTag.
		]]></help>
            </parameter>
            <parameter name="selected" type="string" required="false">
                <help><![CDATA[
			Value of option that should be selected by default.
		]]></help>
            </parameter>
            <parameter name="includeBlank" type="any" required="false">
                <help><![CDATA[
			Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
		]]></help>
            </parameter>
            <parameter name="multiple" type="boolean" required="false">
                <help><![CDATA[
			Whether to allow multiple selection of options in the select form control.
		]]></help>
            </parameter>
            <parameter name="valueField" type="string" required="false">
                <help><![CDATA[
			The column or property to use for the value of each list element. Used only when a query or array of objects has been supplied in the `options` argument.
		]]></help>
            </parameter>
            <parameter name="textField" type="string" required="false">
                <help><![CDATA[
			The column or property to use for the value of each list element that the end user will see. Used only when a query or array of objects has been supplied in the `options` argument.
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="sendEmail" returns="void">
            <help><![CDATA[
			Sends an email using a template and an optional layout to wrap it in.
		]]></help>
            <parameter name="templates" type="string" required="false">
                <help><![CDATA[
			The path to the email template or two paths if you want to send a multipart email. if the `detectMultipart` argument is `false` the template for the text version should be the first one in the list (can also be called with the `template` argument).
		]]></help>
            </parameter>
            <parameter name="from" type="string" required="true">
                <help><![CDATA[
			Email address to send from.
		]]></help>
            </parameter>
            <parameter name="to" type="string" required="true">
                <help><![CDATA[
			Email address to send to.
		]]></help>
            </parameter>
            <parameter name="subject" type="string" required="true">
                <help><![CDATA[
			The subject line of the email.
		]]></help>
            </parameter>
            <parameter name="layouts" type="any" required="false">
                <help><![CDATA[
			Layout(s) to wrap body in.
		]]></help>
            </parameter>
            <parameter name="detectMultipart" type="boolean" required="false">
                <help><![CDATA[
			When set to `true` Wheels will detect which of the templates is text and which one is html (by counting the `<` characters).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="sendFile" returns="void">
            <help><![CDATA[
			Sends a file to the user (from the `files` folder by default).
		]]></help>
            <parameter name="file" type="string" required="true">
                <help><![CDATA[
			The file to send to the user
		]]></help>
            </parameter>
            <parameter name="name" type="string" required="false">
                <help><![CDATA[
			The file name to show in the browser download dialog box
		]]></help>
            </parameter>
            <parameter name="type" type="string" required="false">
                <help><![CDATA[
			The HTTP content type to deliver the file as
		]]></help>
            </parameter>
            <parameter name="disposition" type="string" required="false">
                <help><![CDATA[
			Set to 'inline' to have the browser handle the opening of the file or set to 'attachment' to force a download dialog box
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="set" returns="void">
            <help><![CDATA[
			Use to configure a global setting or set a default for a function.
		]]></help>
        </function>
        <function creator="8" name="setProperties" returns="void">
            <help><![CDATA[
			Allows you to set all the properties of an object at once by passing in a structure with keys matching the property names.
		]]></help>
            <parameter name="properties" type="struct" required="false">
                <help><![CDATA[
			The properties you want to set on the object (can also be passed in as named arguments).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="simpleFormat" returns="string">
            <help><![CDATA[
			Replaces single newline characters with HTML break tags and double newline characters with HTML paragraph tags (properly closed to comply with XHTML standards).
		]]></help>
            <parameter name="text" type="string" required="true">
                <help><![CDATA[
			The text to format.
		]]></help>
            </parameter>
            <parameter name="wrap" type="boolean" required="false">
                <help><![CDATA[
			Set to `true` to wrap the result in a paragraph.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="singularize" returns="string">
            <help><![CDATA[
			Returns the singular form of the passed in word.
		]]></help>
            <parameter name="word" type="string" required="true">
                <help><![CDATA[
			String to singularize.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="startFormTag" returns="string">
            <help><![CDATA[
			Builds and returns a string containing the opening form tag. The form's action will be built according to the same rules as `URLFor`.
		]]></help>
            <parameter name="method" type="string" required="false">
                <help><![CDATA[
			The type of method to use in the form tag, `get` and `post` are the options.
		]]></help>
            </parameter>
            <parameter name="multipart" type="boolean" required="false">
                <help><![CDATA[
			Set to `true` if the form should be able to upload files.
		]]></help>
            </parameter>
            <parameter name="spamProtection" type="boolean" required="false">
                <help><![CDATA[
			Set to `true` to protect the form against spammers (done with JavaScript).
		]]></help>
            </parameter>
            <parameter name="route" type="string" required="false">
                <help><![CDATA[
			Name of a route that you have configured in `config/routes.cfm`.
		]]></help>
            </parameter>
            <parameter name="controller" type="string" required="false">
                <help><![CDATA[
			Name of the controller to include in the URL.
		]]></help>
            </parameter>
            <parameter name="action" type="string" required="false">
                <help><![CDATA[
			Name of the action to include in the URL.
		]]></help>
            </parameter>
            <parameter name="key" type="any" required="false">
                <help><![CDATA[
			Key(s) to include in the URL.
		]]></help>
            </parameter>
            <parameter name="params" type="string" required="false">
                <help><![CDATA[
			Any additional params to be set in the query string.
		]]></help>
            </parameter>
            <parameter name="anchor" type="string" required="false">
                <help><![CDATA[
			Sets an anchor name to be appended to the path.
		]]></help>
            </parameter>
            <parameter name="onlyPath" type="boolean" required="false">
                <help><![CDATA[
			If `true`, returns only the relative URL (no protocol, host name or port).
		]]></help>
            </parameter>
            <parameter name="host" type="string" required="false">
                <help><![CDATA[
			Set this to override the current host.
		]]></help>
            </parameter>
            <parameter name="protocol" type="string" required="false">
                <help><![CDATA[
			Set this to override the current protocol.
		]]></help>
            </parameter>
            <parameter name="port" type="numeric" required="false">
                <help><![CDATA[
			Set this to override the current port number.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="stripLinks" returns="string">
            <help><![CDATA[
			Removes all links from an HTML string, leaving just the link text.
		]]></help>
            <parameter name="html" type="string" required="true">
                <help><![CDATA[
			The html to remove links from.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="stripTags" returns="string">
            <help><![CDATA[
			Removes all HTML tags from a string.
		]]></help>
            <parameter name="html" type="string" required="true">
                <help><![CDATA[
			The HTML to remove links from.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="styleSheetLinkTag" returns="string">
            <help><![CDATA[
			Returns a `link` tag for a stylesheet (or several) based on the supplied arguments.
		]]></help>
            <parameter name="sources" type="string" required="false">
                <help><![CDATA[
			The name of one or many CSS files in the `stylesheets` folder, minus the `.css` extension. (Can also be called with the `source` argument).
		]]></help>
            </parameter>
            <parameter name="type" type="string" required="false">
                <help><![CDATA[
			The `type` attribute for the `link` tag.
		]]></help>
            </parameter>
            <parameter name="media" type="string" required="false">
                <help><![CDATA[
			The `media` attribute for the `link` tag.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="submitTag" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a submit button `form` control.
		]]></help>
            <parameter name="value" type="string" required="false">
                <help><![CDATA[
			Message to display in the button form control.
		]]></help>
            </parameter>
            <parameter name="image" type="string" required="false">
                <help><![CDATA[
			File name of the image file to use in the button form control.
		]]></help>
            </parameter>
            <parameter name="disable" type="any" required="false">
                <help><![CDATA[
			Whether to disable the button upon clicking (prevents double-clicking).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="sum" returns="numeric">
            <help><![CDATA[
			Calculates the sum of values for a given property. Uses the SQL function `SUM`.
		]]></help>
            <parameter name="property" type="string" required="true">
                <help><![CDATA[
			Name of the property to get the sum for (has to be a property of a numeric data type).
		]]></help>
            </parameter>
            <parameter name="where" type="string" required="false">
                <help><![CDATA[
			An SQL fragment such as `lastName LIKE 'A%'` for example.
		]]></help>
            </parameter>
            <parameter name="include" type="string" required="false">
                <help><![CDATA[
			Any associations that need to be included in the query.
		]]></help>
            </parameter>
            <parameter name="distinct" type="boolean" required="false">
                <help><![CDATA[
			When `true`, `SUM` returns the sum of unique values only.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="table" returns="void">
            <help><![CDATA[
			Use this method to tell Wheels what database table to connect to for this model. You only need to use this method when your table naming does not follow the standard Wheels convention of a singular object name mapping to a plural table name.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Name of the table to map this model to.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="tableName" returns="string">
            <help><![CDATA[
			Returns the name of the database table that this model is mapped to.
		]]></help>
        </function>
        <function creator="8" name="textArea" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a password field form control based on the supplied `objectName` and `property`.
		]]></help>
            <parameter name="objectName" type="any" required="true">
                <help><![CDATA[
			The variable name of the object to build the form control for.
		]]></help>
            </parameter>
            <parameter name="property" type="string" required="true">
                <help><![CDATA[
			The name of the property to use in the form control.
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="errorElement" type="string" required="false">
                <help><![CDATA[
			HTML tag to wrap the form control with when the object contains errors.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="textAreaTag" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a text area form control based on the supplied `name`.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Name to populate in tag's `name` attribute.
		]]></help>
            </parameter>
            <parameter name="content" type="string" required="false">
                <help><![CDATA[
			Content to display in `textarea` by default.
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="textField" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a text field form control based on the supplied `objectName` and `property`.
		]]></help>
            <parameter name="objectName" type="any" required="true">
                <help><![CDATA[
			The variable name of the object to build the form control for.
		]]></help>
            </parameter>
            <parameter name="property" type="string" required="true">
                <help><![CDATA[
			The name of the property to use in the form control.
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="errorElement" type="string" required="false">
                <help><![CDATA[
			HTML tag to wrap the form control with when the object contains errors.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="textFieldTag" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a text field form control based on the supplied `name`.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Name to populate in tag's `name` attribute.
		]]></help>
            </parameter>
            <parameter name="value" type="string" required="false">
                <help><![CDATA[
			Value to populate in tag's `value` attribute.
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="timeAgoInWords" returns="string">
            <help><![CDATA[
			Pass in a date to this method, and it will return a string describing the approximate time difference between that date and the current date.
		]]></help>
            <parameter name="fromTime" type="date" required="true">
                <help><![CDATA[
			Date to compare from.
		]]></help>
            </parameter>
            <parameter name="includeSeconds" type="boolean" required="false">
                <help><![CDATA[
			Whether or not to include the number of seconds in the returned string.
		]]></help>
            </parameter>
            <parameter name="toTime" type="date" required="false">
                <help><![CDATA[
			Date to compare to.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="timeSelect" returns="string">
            <help><![CDATA[
			Builds and returns a string containing three select form controls for a time based on the supplied `objectName` and `property`.
		]]></help>
            <parameter name="objectName" type="any" required="false">
                <help><![CDATA[
			The variable name of the object to build the form control for.
		]]></help>
            </parameter>
            <parameter name="property" type="string" required="false">
                <help><![CDATA[
			The name of the property to use in the form control.
		]]></help>
            </parameter>
            <parameter name="order" type="string" required="false">
                <help><![CDATA[
			Use to change the order of or exclude time select tags.
		]]></help>
            </parameter>
            <parameter name="separator" type="string" required="false">
                <help><![CDATA[
			Use to change the character that is displayed between the time select tags.
		]]></help>
            </parameter>
            <parameter name="minuteStep" type="numeric" required="false">
                <help><![CDATA[
			Pass in `10` to only show minute 10, 20,30 etc.
		]]></help>
            </parameter>
            <parameter name="includeBlank" type="any" required="false">
                <help><![CDATA[
			Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="errorElement" type="string" required="false">
                <help><![CDATA[
			HTML tag to wrap the form control with when the object contains errors.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="timeSelectTags" returns="string">
            <help><![CDATA[
			Builds and returns a string containing three select form controls for a time based on the supplied `objectName` and `property`.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Name to populate in tag's `name` attribute.
		]]></help>
            </parameter>
            <parameter name="selected" type="date" required="false">
                <help><![CDATA[
			Value of option that should be selected by default.
		]]></help>
            </parameter>
            <parameter name="order" type="string" required="false">
                <help><![CDATA[
			Use to change the order of or exclude time select tags.
		]]></help>
            </parameter>
            <parameter name="separator" type="string" required="false">
                <help><![CDATA[
			Use to change the character that is displayed between the time select tags.
		]]></help>
            </parameter>
            <parameter name="minuteStep" type="numeric" required="false">
                <help><![CDATA[
			Pass in `10` to only show minute 10, 20,30 etc.
		]]></help>
            </parameter>
            <parameter name="includeBlank" type="any" required="false">
                <help><![CDATA[
			See documentation for @select.
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="timeUntilInWords" returns="string">
            <help><![CDATA[
			Pass in a date to this method, and it will return a string describing the approximate time difference between the current date and that date.
		]]></help>
            <parameter name="fromTime" type="date" required="false">
                <help><![CDATA[
			Date to compare from.
		]]></help>
            </parameter>
            <parameter name="includeSeconds" type="boolean" required="false">
                <help><![CDATA[
			Whether or not to include the number of seconds in the returned string.
		]]></help>
            </parameter>
            <parameter name="toTime" type="date" required="true">
                <help><![CDATA[
			Date to compare to.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="titleize" returns="string">
            <help><![CDATA[
			Capitalizes all words in the text to create a nicer looking title.
		]]></help>
            <parameter name="word" type="string" required="true">
                <help><![CDATA[
			The text to turn into a title.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="truncate" returns="string">
            <help><![CDATA[
			Truncates text to the specified length and replaces the last characters with the specified truncate string. (Defaults to "...").
		]]></help>
            <parameter name="text" type="string" required="true">
                <help><![CDATA[
			The text to truncate.
		]]></help>
            </parameter>
            <parameter name="length" type="numeric" required="false">
                <help><![CDATA[
			Length to truncate the text to.
		]]></help>
            </parameter>
            <parameter name="truncateString" type="string" required="false">
                <help><![CDATA[
			String to replace the last characters with.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="update" returns="boolean">
            <help><![CDATA[
			Updates the object with the supplied properties and saves it to the database. Returns `true` if the object was saved successfully to the database and `false` otherwise.
		]]></help>
            <parameter name="properties" type="struct" required="false">
                <help><![CDATA[
			The properties you want to set on the object (can also be passed in as named arguments).
		]]></help>
            </parameter>
            <parameter name="parameterize" type="any" required="false">
                <help><![CDATA[
			Accepts a boolean value or a string. Set to `true` to use `cfqueryparam` on all columns or pass in a list of property names to use `cfqueryparam` on those only.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="updateAll" returns="numeric">
            <help><![CDATA[
			Updates all properties for the records that match the where argument. Property names and values can be passed in either using named arguments or as a struct to the `properties` argument. By default objects will not be instantiated and therefore callbacks and validations are not invoked. You can change this behavior by passing in `instantiate=true`. This method returns the number of records that were updated.
		]]></help>
            <parameter name="where" type="string" required="false">
                <help><![CDATA[
			This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `AND`, and `OR` (note that the key words have to be written in upper case). You can also use parentheses to group statements. You do not have to specify the table name(s), Wheels will do that for you.
		]]></help>
            </parameter>
            <parameter name="include" type="string" required="false">
                <help><![CDATA[
			Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model you can specify them in a list, e.g. `department,addresses,emails`. You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))` for example.
		]]></help>
            </parameter>
            <parameter name="properties" type="struct" required="false">
                <help><![CDATA[
			The properties you want to set on the object (can also be passed in as named arguments).
		]]></help>
            </parameter>
            <parameter name="parameterize" type="any" required="false">
                <help><![CDATA[
			Accepts a boolean value or a string. Set to `true` to use `cfqueryparam` on all columns or pass in a list of property names to use `cfqueryparam` on those only.
		]]></help>
            </parameter>
            <parameter name="instantiate" type="boolean" required="false">
                <help><![CDATA[
			Whether or not to instantiate the object(s) first. When objects are not instantiated any callbacks and validations set on them will be skipped.
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="updateByKey" returns="boolean">
            <help><![CDATA[
			Finds the object with the supplied key and saves it (if validation permits it) with the supplied properties and/or named arguments. Property names and values can be passed in either using named arguments or as a struct to the `properties` argument. Returns `true` if the object was found and updated successfully, `false` otherwise.
		]]></help>
            <parameter name="key" type="any" required="true">
                <help><![CDATA[
			Primary key value(s) of the record to fetch. Separate with comma if passing in multiple primary key values. Accepts a string, list or a numeric value.
		]]></help>
            </parameter>
            <parameter name="properties" type="struct" required="false">
                <help><![CDATA[
			The properties you want to set on the object (can also be passed in as named arguments).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="updateOne" returns="boolean">
            <help><![CDATA[
			Gets an object based on the arguments used and updates it with the supplied properties. Returns `true` if an object was found and updated successfully, `false` otherwise.
		]]></help>
            <parameter name="where" type="string" required="false">
                <help><![CDATA[
			This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `AND`, and `OR` (note that the key words have to be written in upper case). You can also use parentheses to group statements. You do not have to specify the table name(s), Wheels will do that for you.
		]]></help>
            </parameter>
            <parameter name="order" type="string" required="false">
                <help><![CDATA[
			This argument maps to the `ORDER BY` clause of the query. You do not have to specify the table name(s), Wheels will do that for you.
		]]></help>
            </parameter>
            <parameter name="properties" type="struct" required="false">
                <help><![CDATA[
			The properties you want to set on the object (can also be passed in as named arguments).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="URLFor" returns="string">
            <help><![CDATA[
			Creates an internal URL based on supplied arguments.
		]]></help>
            <parameter name="port" type="numeric" required="false">
                <help><![CDATA[
			Set this to override the current port number.
		]]></help>
            </parameter>
            <parameter name="host" type="string" required="false">
                <help><![CDATA[
			Set this to override the current host.
		]]></help>
            </parameter>
            <parameter name="protocol" type="string" required="false">
                <help><![CDATA[
			Set this to override the current protocol.
		]]></help>
            </parameter>
            <parameter name="route" type="string" required="false">
                <help><![CDATA[
			Name of a route that you have configured in `config/routes.cfm`.
		]]></help>
            </parameter>
            <parameter name="controller" type="string" required="false">
                <help><![CDATA[
			Name of the controller to include in the URL.
		]]></help>
            </parameter>
            <parameter name="action" type="string" required="false">
                <help><![CDATA[
			Name of the action to include in the URL.
		]]></help>
            </parameter>
            <parameter name="key" type="any" required="false">
                <help><![CDATA[
			Key(s) to include in the URL.
		]]></help>
            </parameter>
            <parameter name="params" type="string" required="false">
                <help><![CDATA[
			Any additional params to be set in the query string.
		]]></help>
            </parameter>
            <parameter name="anchor" type="string" required="false">
                <help><![CDATA[
			Sets an anchor name to be appended to the path.
		]]></help>
            </parameter>
            <parameter name="onlyPath" type="boolean" required="false">
                <help><![CDATA[
			If `true`, returns only the relative URL (no protocol, host name or port).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="valid" returns="boolean">
            <help><![CDATA[
			Runs the validation on the object and returns `true` if it passes it. Wheels will run the validation process automatically whenever an object is saved to the database but sometimes it's useful to be able to run this method to see if the object is valid without saving it to the database.
		]]></help>
        </function>
        <function creator="8" name="validate" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called to validate objects before they are saved.
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names to call (can also be called with the `method` argument).
		]]></help>
            </parameter>
            <parameter name="if" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
		]]></help>
            </parameter>
            <parameter name="unless" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="validateOnCreate" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called to validate new objects before they are inserted.
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names to call (can also be called with the `method` argument).
		]]></help>
            </parameter>
            <parameter name="if" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
		]]></help>
            </parameter>
            <parameter name="unless" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="validateOnUpdate" returns="void">
            <help><![CDATA[
			Registers method(s) that should be called to validate existing objects before they are updated.
		]]></help>
            <parameter name="methods" type="string" required="false">
                <help><![CDATA[
			Method name or list of method names to call (can also be called with the `method` argument).
		]]></help>
            </parameter>
            <parameter name="if" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
		]]></help>
            </parameter>
            <parameter name="unless" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="validatesConfirmationOf" returns="void">
            <help><![CDATA[
			Validates that the value of the specified property also has an identical confirmation value (common when having a user type in their email address, choosing a password etc). The confirmation value only exists temporarily and never gets saved to the database. By convention the confirmation property has to be named the same as the property with "Confirmation" appended at the end. Using the password example, to confirm our `password` property we would create a property called `passwordConfirmation`.
		]]></help>
            <parameter name="properties" type="string" required="false">
                <help><![CDATA[
			Name of property or list of property names to validate against (can also be called with the `property` argument).
		]]></help>
            </parameter>
            <parameter name="message" type="string" required="false">
                <help><![CDATA[
			Supply a custom error message here to override the built-in one.
		]]></help>
            </parameter>
            <parameter name="when" type="string" required="false">
                <help><![CDATA[
			Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).
		]]></help>
            </parameter>
            <parameter name="if" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
		]]></help>
            </parameter>
            <parameter name="unless" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="validatesExclusionOf" returns="void">
            <help><![CDATA[
			Validates that the value of the specified property does not exist in the supplied list.
		]]></help>
            <parameter name="properties" type="string" required="false">
                <help><![CDATA[
			Name of property or list of property names to validate against (can also be called with the `property` argument).
		]]></help>
            </parameter>
            <parameter name="list" type="string" required="true">
                <help><![CDATA[
			Single value or list of values that should not be allowed.
		]]></help>
            </parameter>
            <parameter name="message" type="string" required="false">
                <help><![CDATA[
			Supply a custom error message here to override the built-in one.
		]]></help>
            </parameter>
            <parameter name="when" type="string" required="false">
                <help><![CDATA[
			Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).
		]]></help>
            </parameter>
            <parameter name="allowBlank" type="boolean" required="false">
                <help><![CDATA[
			If set to `true`, validation will be skipped if the property value is an empty string or doesn't exist at all.
		]]></help>
            </parameter>
            <parameter name="if" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
		]]></help>
            </parameter>
            <parameter name="unless" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="validatesFormatOf" returns="void">
            <help><![CDATA[
			Validates that the value of the specified property is formatted correctly by matching it against a regular expression using the `regEx` argument and/or against a built-in CFML validation type (`creditcard`, `date`, `email` etc) using the `type` argument.
		]]></help>
            <parameter name="properties" type="string" required="false">
                <help><![CDATA[
			Name of property or list of property names to validate against (can also be called with the `property` argument).
		]]></help>
            </parameter>
            <parameter name="regEx" type="string" required="false">
                <help><![CDATA[
			Regular expression to verify against.
		]]></help>
            </parameter>
            <parameter name="type" type="string" required="false">
                <help><![CDATA[
			One of the following types to verify against: `creditcard`, `date`, `email`, `eurodate`, `guid`, `social_security_number`, `ssn`, `telephone`, `time`, `URL`, `USdate`, `UUID`, `zipcode` (will be passed through to CFML's `isValid` function).
		]]></help>
            </parameter>
            <parameter name="message" type="string" required="false">
                <help><![CDATA[
			Supply a custom error message here to override the built-in one.
		]]></help>
            </parameter>
            <parameter name="when" type="string" required="false">
                <help><![CDATA[
			Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).
		]]></help>
            </parameter>
            <parameter name="allowBlank" type="boolean" required="false">
                <help><![CDATA[
			If set to `true`, validation will be skipped if the property value is an empty string or doesn't exist at all.
		]]></help>
            </parameter>
            <parameter name="if" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
		]]></help>
            </parameter>
            <parameter name="unless" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="validatesInclusionOf" returns="void">
            <help><![CDATA[
			Validates that the value of the specified property exists in the supplied list.
		]]></help>
            <parameter name="properties" type="string" required="false">
                <help><![CDATA[
			Name of property or list of property names to validate against (can also be called with the `property` argument).
		]]></help>
            </parameter>
            <parameter name="list" type="string" required="true">
                <help><![CDATA[
			List of allowed values.
		]]></help>
            </parameter>
            <parameter name="message" type="string" required="false">
                <help><![CDATA[
			Supply a custom error message here to override the built-in one.
		]]></help>
            </parameter>
            <parameter name="when" type="string" required="false">
                <help><![CDATA[
			Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).
		]]></help>
            </parameter>
            <parameter name="allowBlank" type="boolean" required="false">
                <help><![CDATA[
			If set to `true`, validation will be skipped if the property value is an empty string or doesn't exist at all.
		]]></help>
            </parameter>
            <parameter name="if" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
		]]></help>
            </parameter>
            <parameter name="unless" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="validatesLengthOf" returns="void">
            <help><![CDATA[
			Validates that the value of the specified property matches the length requirements supplied. Use the `exactly`, `maximum`, `minimum` and `within` arguments to specify the length requirements.
		]]></help>
            <parameter name="properties" type="string" required="false">
                <help><![CDATA[
			Name of property or list of property names to validate against (can also be called with the `property` argument).
		]]></help>
            </parameter>
            <parameter name="message" type="string" required="false">
                <help><![CDATA[
			Supply a custom error message here to override the built-in one.
		]]></help>
            </parameter>
            <parameter name="when" type="string" required="false">
                <help><![CDATA[
			Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).
		]]></help>
            </parameter>
            <parameter name="allowBlank" type="boolean" required="false">
                <help><![CDATA[
			If set to `true`, validation will be skipped if the property value is an empty string or doesn't exist at all.
		]]></help>
            </parameter>
            <parameter name="exactly" type="numeric" required="false">
                <help><![CDATA[
			The exact length that the property value has to be.
		]]></help>
            </parameter>
            <parameter name="maximum" type="numeric" required="false">
                <help><![CDATA[
			The maximum length that the property value has to be.
		]]></help>
            </parameter>
            <parameter name="minimum" type="numeric" required="false">
                <help><![CDATA[
			The minimum length that the property value has to be.
		]]></help>
            </parameter>
            <parameter name="within" type="string" required="false">
                <help><![CDATA[
			A list of two values (minimum and maximum) that the length of the property value has to fall within.
		]]></help>
            </parameter>
            <parameter name="if" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
		]]></help>
            </parameter>
            <parameter name="unless" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="validatesNumericalityOf" returns="void">
            <help><![CDATA[
			Validates that the value of the specified property is numeric.
		]]></help>
            <parameter name="properties" type="string" required="false">
                <help><![CDATA[
			Name of property or list of property names to validate against (can also be called with the `property` argument).
		]]></help>
            </parameter>
            <parameter name="message" type="string" required="false">
                <help><![CDATA[
			Supply a custom error message here to override the built-in one.
		]]></help>
            </parameter>
            <parameter name="when" type="string" required="false">
                <help><![CDATA[
			Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).
		]]></help>
            </parameter>
            <parameter name="allowBlank" type="boolean" required="false">
                <help><![CDATA[
			If set to `true`, validation will be skipped if the property value is an empty string or doesn't exist at all.
		]]></help>
            </parameter>
            <parameter name="onlyInteger" type="boolean" required="false">
                <help><![CDATA[
			Specifies whether the property value has to be an integer.
		]]></help>
            </parameter>
            <parameter name="if" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
		]]></help>
            </parameter>
            <parameter name="unless" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="validatesPresenceOf" returns="void">
            <help><![CDATA[
			Validates that the specified property exists and that its value is not blank.
		]]></help>
            <parameter name="properties" type="string" required="false">
                <help><![CDATA[
			Name of property or list of property names to validate against (can also be called with the `property` argument).
		]]></help>
            </parameter>
            <parameter name="message" type="string" required="false">
                <help><![CDATA[
			Supply a custom error message here to override the built-in one.
		]]></help>
            </parameter>
            <parameter name="when" type="string" required="false">
                <help><![CDATA[
			Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).
		]]></help>
            </parameter>
            <parameter name="if" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
		]]></help>
            </parameter>
            <parameter name="unless" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="validatesUniquenessOf" returns="void">
            <help><![CDATA[
			Validates that the value of the specified property is unique in the database table. Useful for ensuring that two users can't sign up to a website with identical screen names for example. When a new record is created a check is made to make sure that no record already exists in the database with the given value for the specified property. When the record is updated the same check is made but disregarding the record itself.
		]]></help>
            <parameter name="properties" type="string" required="false">
                <help><![CDATA[
			Name of property or list of property names to validate against (can also be called with the `property` argument).
		]]></help>
            </parameter>
            <parameter name="message" type="string" required="false">
                <help><![CDATA[
			Supply a custom error message here to override the built-in one.
		]]></help>
            </parameter>
            <parameter name="when" type="string" required="false">
                <help><![CDATA[
			Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).
		]]></help>
            </parameter>
            <parameter name="allowBlank" type="boolean" required="false">
                <help><![CDATA[
			If set to `true`, validation will be skipped if the property value is an empty string or doesn't exist at all.
		]]></help>
            </parameter>
            <parameter name="scope" type="string" required="false">
                <help><![CDATA[
			One or more properties by which to limit the scope of the uniqueness constraint.
		]]></help>
            </parameter>
            <parameter name="if" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
		]]></help>
            </parameter>
            <parameter name="unless" type="string" required="false">
                <help><![CDATA[
			String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="verifies" returns="void">
            <help><![CDATA[
			Tells Wheels to verify that some specific criterias are met before running an action.
		]]></help>
            <parameter name="only" type="string" required="false">
                <help><![CDATA[
			Pass in a list of action names (or one action name) to tell Wheels that the verifications should only be run on these actions.
		]]></help>
            </parameter>
            <parameter name="except" type="string" required="false">
                <help><![CDATA[
			Pass in a list of action names (or one action name) to tell Wheels that the filter function(s) should be run on all actions except the specified ones.
		]]></help>
            </parameter>
            <parameter name="post" type="any" required="false">
                <help><![CDATA[
			Set to true to verify that this is a post request.
		]]></help>
            </parameter>
            <parameter name="get" type="any" required="false">
                <help><![CDATA[
			Set to true to verify that this is a get request.
		]]></help>
            </parameter>
            <parameter name="ajax" type="any" required="false">
                <help><![CDATA[
			Set to true to verify that this is an AJAX request.
		]]></help>
            </parameter>
            <parameter name="cookie" type="string" required="false">
                <help><![CDATA[
			Verify that the passed in variable name exists in the cookie.
		]]></help>
            </parameter>
            <parameter name="session" type="string" required="false">
                <help><![CDATA[
			Verify that the passed in variable name exists in the session.
		]]></help>
            </parameter>
            <parameter name="params" type="string" required="false">
                <help><![CDATA[
			Verify that the passed in variable name exists in the params.
		]]></help>
            </parameter>
            <parameter name="handler" type="string" required="false">
                <help><![CDATA[
			Pass in the name of a function that should handle failed verifications (default is to just abort the request when a verification fails).
		]]></help>
            </parameter>
        </function>
        <function creator="8" name="yearSelectTag" returns="string">
            <help><![CDATA[
			Builds and returns a string containing a select form control for a range of years based on the supplied `name`.
		]]></help>
            <parameter name="name" type="string" required="true">
                <help><![CDATA[
			Name to populate in tag's `name` attribute.
		]]></help>
            </parameter>
            <parameter name="selected" type="date" required="false">
                <help><![CDATA[
			The year that should be selected initially.
		]]></help>
            </parameter>
            <parameter name="startYear" type="numeric" required="false">
                <help><![CDATA[
			First year in select list.
		]]></help>
            </parameter>
            <parameter name="endYear" type="numeric" required="false">
                <help><![CDATA[
			Last year in select list.
		]]></help>
            </parameter>
            <parameter name="includeBlank" type="any" required="false">
                <help><![CDATA[
			Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
		]]></help>
            </parameter>
            <parameter name="label" type="string" required="false">
                <help><![CDATA[
			The label text to use in the form control.
		]]></help>
            </parameter>
            <parameter name="labelPlacement" type="string" required="false">
                <help><![CDATA[
			Whether to place the label before, after, or wrapped around the form control.
		]]></help>
            </parameter>
            <parameter name="prepend" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="append" type="string" required="false">
                <help><![CDATA[
			String to append to the form control. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="prependToLabel" type="string" required="false">
                <help><![CDATA[
			String to prepend to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
            <parameter name="appendToLabel" type="string" required="false">
                <help><![CDATA[
			String to append to the form control's label. Useful to wrap the form control around HTML tags.
		]]></help>
            </parameter>
        </function>
    </functions>
</dictionary>
