<?xml version="1.0" encoding="UTF-8"?>
<!--
Author      :	Russ Johnson (russ@angry-fly.com) 
Date        :	1/12/2010
Description :
	This is the Eclipse Dictionary for CFWheels version 1.1.x
 -->
<dictionary>
    <functions>
		<function name="accessibleProperties" returns="void">
			<help><![CDATA[
			Use this method to specify which properties can be set through mass assignment.
			]]></help>
			<parameter name="properties" type="string" required="false">
			<help><![CDATA[
				Property name (or list of property names) that are allowed to be altered through mass assignment.
			]]></help>
			</parameter>
		</function>
		<function name="addDefaultRoutes" returns="void">
			<help><![CDATA[
			Adds the default Wheels routes (for example, `[controller]/[action]/[key]`, etc.) to your application. Only use this method if you have set `loadDefaultRoutes` to `false` and want to control exactly where in the route order you want to place the default routes.
			]]></help>
		</function>
		<function name="addError" returns="void">
			<help><![CDATA[
			Adds an error on a specific property.
			]]></help>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				The name of the property you want to add an error on.
			]]></help>
			</parameter>
			<parameter name="message" type="string" required="true">
			<help><![CDATA[
				The error message (such as "Please enter a correct name in the form field" for example).
			]]></help>
			</parameter>
			<parameter name="name" type="string" required="false">
			<help><![CDATA[
				A name to identify the error by (useful when you need to distinguish one error from another one set on the same object and you don't want to use the error message itself for that).
			]]></help>
			</parameter>
		</function>
		<function name="addErrorToBase" returns="void">
			<help><![CDATA[
			Adds an error on the object as a whole (not related to any specific property).
			]]></help>
			<parameter name="message" type="string" required="true">
			<help><![CDATA[
				The error message (such as "Please enter a correct name in the form field" for example).
			]]></help>
			</parameter>
			<parameter name="name" type="string" required="false">
			<help><![CDATA[
				A name to identify the error by (useful when you need to distinguish one error from another one set on the same object and you don't want to use the error message itself for that).
			]]></help>
			</parameter>
		</function>
		<function name="addFormat" returns="void">
			<help><![CDATA[
			Adds a new MIME format to your Wheels application for use with responding to multiple formats.
			]]></help>
			<parameter name="extension" type="string" required="true">
			<help><![CDATA[
				File extension to add.
			]]></help>
			</parameter>
			<parameter name="mimeType" type="string" required="true">
			<help><![CDATA[
				Matching MIME type to associate with the file extension.
			]]></help>
			</parameter>
		</function>
		<function name="addRoute" returns="void">
			<help><![CDATA[
			Adds a new route to your application.
			]]></help>
			<parameter name="name" type="string" required="false">
			<help><![CDATA[
				Name for the route. This is referenced as the `name` argument in functions based on @URLFor like @linkTo, @startFormTag, etc.
			]]></help>
			</parameter>
			<parameter name="pattern" type="string" required="true">
			<help><![CDATA[
				The URL pattern that the route will match.
			]]></help>
			</parameter>
			<parameter name="controller" type="string" required="false">
			<help><![CDATA[
				Controller to call when route matches (unless the controller name exists in the pattern).
			]]></help>
			</parameter>
			<parameter name="action" type="string" required="false">
			<help><![CDATA[
				Action to call when route matches (unless the action name exists in the pattern).
			]]></help>
			</parameter>
		</function>
		<function name="afterCreate" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called after a new object is created.
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
			]]></help>
			</parameter>
		</function>
		<function name="afterDelete" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called after an object is deleted.
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
			]]></help>
			</parameter>
		</function>
		<function name="afterFind" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called after an existing object has been initialized (which is usually done with the @findByKey or @findOne method).
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
			]]></help>
			</parameter>
		</function>
		<function name="afterInitialization" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called after an object has been initialized.
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
			]]></help>
			</parameter>
		</function>
		<function name="afterNew" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called after a new object has been initialized (which is usually done with the @new method).
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
			]]></help>
			</parameter>
		</function>
		<function name="afterSave" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called after an object is saved.
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
			]]></help>
			</parameter>
		</function>
		<function name="afterUpdate" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called after an existing object is updated.
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
			]]></help>
			</parameter>
		</function>
		<function name="afterValidation" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called after an object is validated.
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
			]]></help>
			</parameter>
		</function>
		<function name="afterValidationOnCreate" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called after a new object is validated.
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
			]]></help>
			</parameter>
		</function>
		<function name="afterValidationOnUpdate" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called after an existing object is validated.
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
			]]></help>
			</parameter>
		</function>
		<function name="allChanges" returns="struct">
			<help><![CDATA[
			Returns a struct detailing all changes that have been made on the object but not yet saved to the database.
			]]></help>
		</function>
		<function name="allErrors" returns="array">
			<help><![CDATA[
			Returns an array of all the errors on the object.
			]]></help>
		</function>
		<function name="autoLink" returns="string">
			<help><![CDATA[
			Turns all URLs and email addresses into hyperlinks.
			]]></help>
			<parameter name="text" type="string" required="true">
			<help><![CDATA[
				The text to create links in.
			]]></help>
			</parameter>
			<parameter name="link" type="string" required="false">
			<help><![CDATA[
				Whether to link URLs, email addresses or both. Possible values are: `all` (default), `URLs` and `emailAddresses`.
			]]></help>
			</parameter>
		</function>
		<function name="automaticValidations" returns="void">
			<help><![CDATA[
			Whether or not to enable default validations for this model.
			]]></help>
		</function>
		<function name="average" returns="any">
			<help><![CDATA[
			Calculates the average value for a given property. Uses the SQL function `AVG`. If no records can be found to perform the calculation on you can use the `ifNull` argument to decide what should be returned.
			]]></help>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				Name of the property to calculate the average for.
			]]></help>
			</parameter>
			<parameter name="where" type="string" required="false">
			<help><![CDATA[
				This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.
			]]></help>
			</parameter>
			<parameter name="include" type="string" required="false">
			<help><![CDATA[
				Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. `department,addresses,emails`). You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))`, for example. These complex `include` strings only work when `returnAs` is set to `query` though.
			]]></help>
			</parameter>
			<parameter name="distinct" type="boolean" required="false">
			<help><![CDATA[
				When `true`, `AVG` will be performed only on each unique instance of a value, regardless of how many times the value occurs.
			]]></help>
			</parameter>
			<parameter name="parameterize" type="any" required="false">
			<help><![CDATA[
				Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.
			]]></help>
			</parameter>
			<parameter name="ifNull" type="any" required="false">
			<help><![CDATA[
				The value returned if no records are found. Common usage is to set this to `0` to make sure a numeric value is always returned instead of a blank string.
			]]></help>
			</parameter>
			<parameter name="includeSoftDeletes" type="boolean" required="false">
			<help><![CDATA[
				You can set this argument to `true` to include soft-deleted records in the results.
			]]></help>
			</parameter>
		</function>
		<function name="beforeCreate" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called before a new object is created.
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
			]]></help>
			</parameter>
		</function>
		<function name="beforeDelete" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called before an object is deleted.
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
			]]></help>
			</parameter>
		</function>
		<function name="beforeSave" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called before an object is saved.
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
			]]></help>
			</parameter>
		</function>
		<function name="beforeUpdate" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called before an existing object is updated.
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
			]]></help>
			</parameter>
		</function>
		<function name="beforeValidation" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called before an object is validated.
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
			]]></help>
			</parameter>
		</function>
		<function name="beforeValidationOnCreate" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called before a new object is validated.
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
			]]></help>
			</parameter>
		</function>
		<function name="beforeValidationOnUpdate" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called before an existing object is validated.
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names that should be called when this callback event occurs in an object's life cycle (can also be called with the `method` argument).
			]]></help>
			</parameter>
		</function>
		<function name="belongsTo" returns="void">
			<help><![CDATA[
			Sets up a `belongsTo` association between this model and the specified one. Use this association when this model contains a foreign key referencing another model.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Gives the association a name that you refer to when working with the association (in the `include` argument to @findAll, to name one example).
			]]></help>
			</parameter>
			<parameter name="modelName" type="string" required="false">
			<help><![CDATA[
				Name of associated model (usually not needed if you follow Wheels conventions because the model name will be deduced from the `name` argument).
			]]></help>
			</parameter>
			<parameter name="foreignKey" type="string" required="false">
			<help><![CDATA[
				Foreign key property name (usually not needed if you follow Wheels conventions since the foreign key name will be deduced from the `name` argument).
			]]></help>
			</parameter>
			<parameter name="joinType" type="string" required="false">
			<help><![CDATA[
				Use to set the join type when joining associated tables. Possible values are `inner` (for `INNER JOIN`) and `outer` (for `LEFT OUTER JOIN`).
			]]></help>
			</parameter>
		</function>
		<function name="buttonTag" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a button `form` control.
			]]></help>
			<parameter name="content" type="string" required="false">
			<help><![CDATA[
				Content to display inside the button.
			]]></help>
			</parameter>
			<parameter name="type" type="string" required="false">
			<help><![CDATA[
				The type for the button: `button`, `reset`, or `submit`.
			]]></help>
			</parameter>
			<parameter name="image" type="string" required="false">
			<help><![CDATA[
				File name of the image file to use in the button form control.
			]]></help>
			</parameter>
			<parameter name="value" type="string" required="false">
			<help><![CDATA[
				The value of the button when submitted.
			]]></help>
			</parameter>
			<parameter name="disable" type="any" required="false">
			<help><![CDATA[
				Whether or not to disable the button upon clicking. (Prevents double-clicking.)
			]]></help>
			</parameter>
		</function>
		<function name="buttonTo" returns="string">
			<help><![CDATA[
			Creates a form containing a single button that submits to the URL. The URL is built the same way as the @linkTo function.
			]]></help>
			<parameter name="text" type="string" required="false">
			<help><![CDATA[
				The text content of the button.
			]]></help>
			</parameter>
			<parameter name="confirm" type="string" required="false">
			<help><![CDATA[
				Pass a message here to cause a JavaScript confirmation dialog box to pop up containing the message.
			]]></help>
			</parameter>
			<parameter name="image" type="string" required="false">
			<help><![CDATA[
				If you want to use an image for the button pass in the link to it here (relative from the `images` folder).
			]]></help>
			</parameter>
			<parameter name="disable" type="any" required="false">
			<help><![CDATA[
				Pass in `true` if you want the button to be disabled when clicked (can help prevent multiple clicks), or pass in a string if you want the button disabled and the text on the button updated (to "please wait...", for example).
			]]></help>
			</parameter>
			<parameter name="route" type="string" required="false">
			<help><![CDATA[
				Name of a route that you have configured in `config/routes.cfm`.
			]]></help>
			</parameter>
			<parameter name="controller" type="string" required="false">
			<help><![CDATA[
				Name of the controller to include in the URL.
			]]></help>
			</parameter>
			<parameter name="action" type="string" required="false">
			<help><![CDATA[
				Name of the action to include in the URL.
			]]></help>
			</parameter>
			<parameter name="key" type="any" required="false">
			<help><![CDATA[
				Key(s) to include in the URL.
			]]></help>
			</parameter>
			<parameter name="params" type="string" required="false">
			<help><![CDATA[
				Any additional params to be set in the query string.
			]]></help>
			</parameter>
			<parameter name="anchor" type="string" required="false">
			<help><![CDATA[
				Sets an anchor name to be appended to the path.
			]]></help>
			</parameter>
			<parameter name="onlyPath" type="boolean" required="false">
			<help><![CDATA[
				If `true`, returns only the relative URL (no protocol, host name or port).
			]]></help>
			</parameter>
			<parameter name="host" type="string" required="false">
			<help><![CDATA[
				Set this to override the current host.
			]]></help>
			</parameter>
			<parameter name="protocol" type="string" required="false">
			<help><![CDATA[
				Set this to override the current protocol.
			]]></help>
			</parameter>
			<parameter name="port" type="numeric" required="false">
			<help><![CDATA[
				Set this to override the current port number.
			]]></help>
			</parameter>
		</function>
		<function name="caches" returns="void">
			<help><![CDATA[
			Tells Wheels to cache one or more actions.
			]]></help>
			<parameter name="action" type="string" required="false">
			<help><![CDATA[
				Action(s) to cache. This argument is also aliased as `actions`.
			]]></help>
			</parameter>
			<parameter name="time" type="numeric" required="false">
			<help><![CDATA[
				Minutes to cache the action(s) for.
			]]></help>
			</parameter>
			<parameter name="static" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to tell Wheels that this is a static page and that it can skip running the controller filters (before and after filters set on actions) and application events (onSessionStart, onRequestStart etc).
			]]></help>
			</parameter>
		</function>
		<function name="capitalize" returns="string">
			<help><![CDATA[
			Returns the text with the first character converted to uppercase.
			]]></help>
			<parameter name="text" type="string" required="true">
			<help><![CDATA[
				Text to capitalize.
			]]></help>
			</parameter>
		</function>
		<function name="changedFrom" returns="string">
			<help><![CDATA[
			Returns the previous value of a property that has changed. Returns an empty string if no previous value exists. Wheels will keep a note of the previous property value until the object is saved to the database.
			]]></help>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				Name of property to get the previous value for.
			]]></help>
			</parameter>
		</function>
		<function name="changedProperties" returns="string">
			<help><![CDATA[
			Returns a list of the object properties that have been changed but not yet saved to the database.
			]]></help>
		</function>
		<function name="checkBox" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a check box form control based on the supplied `objectName` and `property`. In most cases, this function generates a form field that should represent a `boolean` style field in your data. Use @checkBoxTag or @hasManyCheckBox to generate check boxes for selecting multiple values. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="objectName" type="any" required="true">
			<help><![CDATA[
				The variable name of the object to build the form control for.
			]]></help>
			</parameter>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				The name of the property to use in the form control.
			]]></help>
			</parameter>
			<parameter name="association" type="string" required="false">
			<help><![CDATA[
				The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="position" type="string" required="false">
			<help><![CDATA[
				The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="checkedValue" type="string" required="false">
			<help><![CDATA[
				The value of the check box when it's in the `checked` state.
			]]></help>
			</parameter>
			<parameter name="uncheckedValue" type="string" required="false">
			<help><![CDATA[
				The value of the check box when it's in the `unchecked` state.
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="errorElement" type="string" required="false">
			<help><![CDATA[
				HTML tag to wrap the form control with when the object contains errors.
			]]></help>
			</parameter>
			<parameter name="errorClass" type="string" required="false">
			<help><![CDATA[
				The class name of the HTML tag that wraps the form control when there are errors.
			]]></help>
			</parameter>
		</function>
		<function name="checkBoxTag" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a check box form control based on the supplied `name`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name to populate in tag's `name` attribute.
			]]></help>
			</parameter>
			<parameter name="checked" type="boolean" required="false">
			<help><![CDATA[
				Whether or not the check box should be checked by default.
			]]></help>
			</parameter>
			<parameter name="value" type="string" required="false">
			<help><![CDATA[
				Value of check box in its `checked` state.
			]]></help>
			</parameter>
			<parameter name="uncheckedValue" type="string" required="false">
			<help><![CDATA[
				The value of the check box when it's on the `unchecked` state.
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
		</function>
		<function name="clearErrors" returns="void">
			<help><![CDATA[
			Clears out all errors set on the object or only the ones set for a specific property or name.
			]]></help>
			<parameter name="property" type="string" required="false">
			<help><![CDATA[
				Specify a property name here if you want to clear all errors set on that property.
			]]></help>
			</parameter>
			<parameter name="name" type="string" required="false">
			<help><![CDATA[
				Specify an error name here if you want to clear all errors set with that error name.
			]]></help>
			</parameter>
		</function>
		<function name="columnDataForProperty" returns="any">
			<help><![CDATA[
			Returns a struct with data for the named property.
			]]></help>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				Name of column to retrieve data for.
			]]></help>
			</parameter>
		</function>
		<function name="columnForProperty" returns="any">
			<help><![CDATA[
			Returns the column name mapped for the named model property.
			]]></help>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				Name of property to inspect.
			]]></help>
			</parameter>
		</function>
		<function name="columnNames" returns="string">
			<help><![CDATA[
			Returns a list of column names in the table mapped to this model. The list is ordered according to the columns' ordinal positions in the database table.
			]]></help>
		</function>
		<function name="columns" returns="array">
			<help><![CDATA[
			Returns an array of columns names for the table associated with this class. Does not include calculated properties that will be generated by the Wheels ORM.
			]]></help>
		</function>
		<function name="compareTo" returns="boolean">
			<help><![CDATA[
			Pass in another Wheels model object to see if the two objects are the same.
			]]></help>
		</function>
		<function name="contentFor" returns="void">
			<help><![CDATA[
			Used to store a section's output for rendering within a layout. This content store acts as a stack, so you can store multiple pieces of content for a given section.
			]]></help>
			<parameter name="position" type="any" required="false">
			<help><![CDATA[
				The position in the section's stack where you want the content placed. Valid values are `first`, `last`, or the numeric position.
			]]></help>
			</parameter>
			<parameter name="overwrite" type="any" required="false">
			<help><![CDATA[
				Whether or not to overwrite any of the content. Valid values are `false`, `true`, or `all`.
			]]></help>
			</parameter>
		</function>
		<function name="contentForLayout" returns="string">
			<help><![CDATA[
			Includes content for the `body` section, which equates to the output generated by the view template run by the request.
			]]></help>
		</function>
		<function name="controller" returns="any">
			<help><![CDATA[
			Creates and returns a controller object with your own custom `name` and `params`. Used primarily for testing purposes.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name of the controller to create.
			]]></help>
			</parameter>
			<parameter name="params" type="struct" required="false">
			<help><![CDATA[
				The params struct (combination of `form` and `URL` variables).
			]]></help>
			</parameter>
		</function>
		<function name="count" returns="numeric">
			<help><![CDATA[
			Returns the number of rows that match the arguments (or all rows if no arguments are passed in). Uses the SQL function `COUNT`. If no records can be found to perform the calculation on, `0` is returned.
			]]></help>
			<parameter name="where" type="string" required="false">
			<help><![CDATA[
				See documentation for @findAll.
			]]></help>
			</parameter>
			<parameter name="include" type="string" required="false">
			<help><![CDATA[
				See documentation for @findAll.
			]]></help>
			</parameter>
			<parameter name="parameterize" type="any" required="false">
			<help><![CDATA[
				Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.
			]]></help>
			</parameter>
			<parameter name="includeSoftDeletes" type="boolean" required="false">
			<help><![CDATA[
				You can set this argument to `true` to include soft-deleted records in the results.
			]]></help>
			</parameter>
		</function>
		<function name="create" returns="any">
			<help><![CDATA[
			Creates a new object, saves it to the database (if the validation permits it), and returns it. If the validation fails, the unsaved object (with errors added to it) is still returned. Property names and values can be passed in either using named arguments or as a struct to the `properties` argument.
			]]></help>
			<parameter name="properties" type="struct" required="false">
			<help><![CDATA[
				The properties you want to set on the object (can also be passed in as named arguments).
			]]></help>
			</parameter>
			<parameter name="parameterize" type="any" required="false">
			<help><![CDATA[
				See documentation for @findAll.
			]]></help>
			</parameter>
			<parameter name="reload" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to reload the object from the database once an insert/update has completed.
			]]></help>
			</parameter>
			<parameter name="transaction" type="string" required="false">
			<help><![CDATA[
				Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.
			]]></help>
			</parameter>
			<parameter name="callbacks" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to disable callbacks for this operation.
			]]></help>
			</parameter>
		</function>
		<function name="cycle" returns="string">
			<help><![CDATA[
			Cycles through list values every time it is called.
			]]></help>
			<parameter name="values" type="string" required="true">
			<help><![CDATA[
				List of values to cycle through.
			]]></help>
			</parameter>
			<parameter name="name" type="string" required="false">
			<help><![CDATA[
				Name to give the cycle. Useful when you use multiple cycles on a page.
			]]></help>
			</parameter>
		</function>
		<function name="dataSource" returns="void">
			<help><![CDATA[
			Use this method to override the data source connection information for this model.
			]]></help>
			<parameter name="datasource" type="string" required="true">
			<help><![CDATA[
				The data source name to connect to.
			]]></help>
			</parameter>
			<parameter name="username" type="string" required="false">
			<help><![CDATA[
				The username for the data source.
			]]></help>
			</parameter>
			<parameter name="password" type="string" required="false">
			<help><![CDATA[
				The password for the data source.
			]]></help>
			</parameter>
		</function>
		<function name="dateSelect" returns="string">
			<help><![CDATA[
			Builds and returns a string containing three select form controls for month, day, and year based on the supplied `objectName` and `property`.
			]]></help>
			<parameter name="objectName" type="any" required="false">
			<help><![CDATA[
				The variable name of the object to build the form control for.
			]]></help>
			</parameter>
			<parameter name="property" type="string" required="false">
			<help><![CDATA[
				The name of the property to use in the form control.
			]]></help>
			</parameter>
			<parameter name="association" type="string" required="false">
			<help><![CDATA[
				The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="position" type="string" required="false">
			<help><![CDATA[
				The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="order" type="string" required="false">
			<help><![CDATA[
				Use to change the order of or exclude date select tags.
			]]></help>
			</parameter>
			<parameter name="separator" type="string" required="false">
			<help><![CDATA[
				Use to change the character that is displayed between the date select tags.
			]]></help>
			</parameter>
			<parameter name="startYear" type="numeric" required="false">
			<help><![CDATA[
				First year in select list.
			]]></help>
			</parameter>
			<parameter name="endYear" type="numeric" required="false">
			<help><![CDATA[
				Last year in select list.
			]]></help>
			</parameter>
			<parameter name="monthDisplay" type="string" required="false">
			<help><![CDATA[
				Pass in `names`, `numbers`, or `abbreviations` to control display.
			]]></help>
			</parameter>
			<parameter name="includeBlank" type="any" required="false">
			<help><![CDATA[
				Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control. The label will be applied to all `select` tags, but you can pass in a list to cutomize each one individually.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="errorElement" type="string" required="false">
			<help><![CDATA[
				HTML tag to wrap the form control with when the object contains errors.
			]]></help>
			</parameter>
			<parameter name="errorClass" type="string" required="false">
			<help><![CDATA[
				The class name of the HTML tag that wraps the form control when there are errors.
			]]></help>
			</parameter>
			<parameter name="combine" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to not combine the select parts into a single `DateTime` object.
			]]></help>
			</parameter>
		</function>
		<function name="dateSelectTags" returns="string">
			<help><![CDATA[
			Builds and returns a string containing three select form controls (month, day, and year) based on a `name` and `value`.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name to populate in tag's `name` attribute.
			]]></help>
			</parameter>
			<parameter name="selected" type="string" required="false">
			<help><![CDATA[
				Value of option that should be selected by default.
			]]></help>
			</parameter>
			<parameter name="order" type="string" required="false">
			<help><![CDATA[
				Use to change the order of or exclude date select tags.
			]]></help>
			</parameter>
			<parameter name="separator" type="string" required="false">
			<help><![CDATA[
				Use to change the character that is displayed between the date select tags.
			]]></help>
			</parameter>
			<parameter name="startYear" type="numeric" required="false">
			<help><![CDATA[
				First year in select list.
			]]></help>
			</parameter>
			<parameter name="endYear" type="numeric" required="false">
			<help><![CDATA[
				Last year in select list.
			]]></help>
			</parameter>
			<parameter name="monthDisplay" type="string" required="false">
			<help><![CDATA[
				Pass in `names`, `numbers`, or `abbreviations` to control display.
			]]></help>
			</parameter>
			<parameter name="includeBlank" type="any" required="false">
			<help><![CDATA[
				See documentation for @select.
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control. The label will be applied to all `select` tags, but you can pass in a list to cutomize each one individually.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="combine" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to not combine the select parts into a single `DateTime` object.
			]]></help>
			</parameter>
		</function>
		<function name="dateTimeSelect" returns="string">
			<help><![CDATA[
			Builds and returns a string containing six select form controls (three for date selection and the remaining three for time selection) based on the supplied `objectName` and `property`.
			]]></help>
			<parameter name="objectName" type="string" required="true">
			<help><![CDATA[
				The variable name of the object to build the form control for.
			]]></help>
			</parameter>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				The name of the property to use in the form control.
			]]></help>
			</parameter>
			<parameter name="association" type="string" required="false">
			<help><![CDATA[
				The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="position" type="string" required="false">
			<help><![CDATA[
				The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="dateOrder" type="string" required="false">
			<help><![CDATA[
				Use to change the order of or exclude date select tags.
			]]></help>
			</parameter>
			<parameter name="dateSeparator" type="string" required="false">
			<help><![CDATA[
				Use to change the character that is displayed between the date select tags.
			]]></help>
			</parameter>
			<parameter name="startYear" type="numeric" required="false">
			<help><![CDATA[
				First year in select list.
			]]></help>
			</parameter>
			<parameter name="endYear" type="numeric" required="false">
			<help><![CDATA[
				Last year in select list.
			]]></help>
			</parameter>
			<parameter name="monthDisplay" type="string" required="false">
			<help><![CDATA[
				Pass in `names`, `numbers`, or `abbreviations` to control display.
			]]></help>
			</parameter>
			<parameter name="timeOrder" type="string" required="false">
			<help><![CDATA[
				Use to change the order of or exclude time select tags.
			]]></help>
			</parameter>
			<parameter name="timeSeparator" type="string" required="false">
			<help><![CDATA[
				Use to change the character that is displayed between the time select tags.
			]]></help>
			</parameter>
			<parameter name="minuteStep" type="numeric" required="false">
			<help><![CDATA[
				Pass in `10` to only show minute 10, 20, 30, etc.
			]]></help>
			</parameter>
			<parameter name="separator" type="string" required="false">
			<help><![CDATA[
				Use to change the character that is displayed between the first and second set of select tags.
			]]></help>
			</parameter>
			<parameter name="includeBlank" type="any" required="false">
			<help><![CDATA[
				Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control. The label will be applied to all `select` tags, but you can pass in a list to cutomize each one individually.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="errorElement" type="string" required="false">
			<help><![CDATA[
				HTML tag to wrap the form control with when the object contains errors.
			]]></help>
			</parameter>
			<parameter name="errorClass" type="string" required="false">
			<help><![CDATA[
				The class name of the HTML tag that wraps the form control when there are errors.
			]]></help>
			</parameter>
			<parameter name="combine" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to not combine the select parts into a single `DateTime` object.
			]]></help>
			</parameter>
			<parameter name="twelveHour" type="boolean" required="false">
			<help><![CDATA[
				whether to display the hours in 24 or 12 hour format. 12 hour format has AM/PM drop downs
			]]></help>
			</parameter>
		</function>
		<function name="dateTimeSelectTags" returns="string">
			<help><![CDATA[
			Builds and returns a string containing six select form controls (three for date selection and the remaining three for time selection) based on a `name`.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name to populate in tag's `name` attribute.
			]]></help>
			</parameter>
			<parameter name="selected" type="string" required="false">
			<help><![CDATA[
				Value of option that should be selected by default.
			]]></help>
			</parameter>
			<parameter name="dateOrder" type="string" required="false">
			<help><![CDATA[
				Use to change the order of or exclude date select tags.
			]]></help>
			</parameter>
			<parameter name="dateSeparator" type="string" required="false">
			<help><![CDATA[
				Use to change the character that is displayed between the date select tags.
			]]></help>
			</parameter>
			<parameter name="startYear" type="numeric" required="false">
			<help><![CDATA[
				See documentation for @dateSelect.
			]]></help>
			</parameter>
			<parameter name="endYear" type="numeric" required="false">
			<help><![CDATA[
				See documentation for @dateSelect.
			]]></help>
			</parameter>
			<parameter name="monthDisplay" type="string" required="false">
			<help><![CDATA[
				See documentation for @dateSelect.
			]]></help>
			</parameter>
			<parameter name="timeOrder" type="string" required="false">
			<help><![CDATA[
				Use to change the order of or exclude time select tags.
			]]></help>
			</parameter>
			<parameter name="timeSeparator" type="string" required="false">
			<help><![CDATA[
				Use to change the character that is displayed between the time select tags.
			]]></help>
			</parameter>
			<parameter name="minuteStep" type="numeric" required="false">
			<help><![CDATA[
				See documentation for @timeSelect.
			]]></help>
			</parameter>
			<parameter name="separator" type="string" required="false">
			<help><![CDATA[
				Use to change the character that is displayed between the first and second set of select tags.
			]]></help>
			</parameter>
			<parameter name="includeBlank" type="any" required="false">
			<help><![CDATA[
				Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control. The label will be applied to all `select` tags, but you can pass in a list to cutomize each one individually.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="combine" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to not combine the select parts into a single `DateTime` object.
			]]></help>
			</parameter>
			<parameter name="twelveHour" type="boolean" required="false">
			<help><![CDATA[
				whether to display the hours in 24 or 12 hour format. 12 hour format has AM/PM drop downs
			]]></help>
			</parameter>
		</function>
		<function name="daySelectTag" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a select form control for the days of the week based on the supplied `name`.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name to populate in tag's `name` attribute.
			]]></help>
			</parameter>
			<parameter name="selected" type="string" required="false">
			<help><![CDATA[
				The day that should be selected initially.
			]]></help>
			</parameter>
			<parameter name="includeBlank" type="any" required="false">
			<help><![CDATA[
				Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
		</function>
		<function name="delete" returns="boolean">
			<help><![CDATA[
			Deletes the object, which means the row is deleted from the database (unless prevented by a `beforeDelete` callback). Returns `true` on successful deletion of the row, `false` otherwise.
			]]></help>
			<parameter name="parameterize" type="any" required="false">
			<help><![CDATA[
				Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.
			]]></help>
			</parameter>
			<parameter name="transaction" type="string" required="false">
			<help><![CDATA[
				Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.
			]]></help>
			</parameter>
			<parameter name="callbacks" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to disable callbacks for this operation.
			]]></help>
			</parameter>
			<parameter name="includeSoftDeletes" type="boolean" required="false">
			<help><![CDATA[
				You can set this argument to `true` to include soft-deleted records in the results.
			]]></help>
			</parameter>
			<parameter name="softDelete" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to permanently delete a record, even if it has a soft delete column.
			]]></help>
			</parameter>
		</function>
		<function name="deleteAll" returns="numeric">
			<help><![CDATA[
			Deletes all records that match the `where` argument. By default, objects will not be instantiated and therefore callbacks and validations are not invoked. You can change this behavior by passing in `instantiate=true`. Returns the number of records that were deleted.
			]]></help>
			<parameter name="where" type="string" required="false">
			<help><![CDATA[
				This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.
			]]></help>
			</parameter>
			<parameter name="include" type="string" required="false">
			<help><![CDATA[
				Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. `department,addresses,emails`). You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))`, for example. These complex `include` strings only work when `returnAs` is set to `query` though.
			]]></help>
			</parameter>
			<parameter name="reload" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)
			]]></help>
			</parameter>
			<parameter name="parameterize" type="any" required="false">
			<help><![CDATA[
				Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.
			]]></help>
			</parameter>
			<parameter name="instantiate" type="boolean" required="false">
			<help><![CDATA[
				Whether or not to instantiate the object(s) first. When objects are not instantiated, any callbacks and validations set on them will be skipped.
			]]></help>
			</parameter>
			<parameter name="transaction" type="string" required="false">
			<help><![CDATA[
				Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.
			]]></help>
			</parameter>
			<parameter name="callbacks" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to disable callbacks for this operation.
			]]></help>
			</parameter>
			<parameter name="includeSoftDeletes" type="boolean" required="false">
			<help><![CDATA[
				You can set this argument to `true` to include soft-deleted records in the results.
			]]></help>
			</parameter>
			<parameter name="softDelete" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to permanently delete a record, even if it has a soft delete column.
			]]></help>
			</parameter>
		</function>
		<function name="deleteByKey" returns="boolean">
			<help><![CDATA[
			Finds the record with the supplied key and deletes it. Returns `true` on successful deletion of the row, `false` otherwise.
			]]></help>
			<parameter name="key" type="any" required="true">
			<help><![CDATA[
				Primary key value(s) of the record to fetch. Separate with comma if passing in multiple primary key values. Accepts a string, list, or a numeric value.
			]]></help>
			</parameter>
			<parameter name="reload" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)
			]]></help>
			</parameter>
			<parameter name="transaction" type="string" required="false">
			<help><![CDATA[
				Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.
			]]></help>
			</parameter>
			<parameter name="callbacks" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to disable callbacks for this operation.
			]]></help>
			</parameter>
			<parameter name="includeSoftDeletes" type="boolean" required="false">
			<help><![CDATA[
				You can set this argument to `true` to include soft-deleted records in the results.
			]]></help>
			</parameter>
			<parameter name="softDelete" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to permanently delete a record, even if it has a soft delete column.
			]]></help>
			</parameter>
		</function>
		<function name="deleteOne" returns="boolean">
			<help><![CDATA[
			Gets an object based on conditions and deletes it.
			]]></help>
			<parameter name="where" type="string" required="false">
			<help><![CDATA[
				This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.
			]]></help>
			</parameter>
			<parameter name="order" type="string" required="false">
			<help><![CDATA[
				Maps to the `ORDER BY` clause of the query. You do not need to specify the table name(s); Wheels will do that for you.
			]]></help>
			</parameter>
			<parameter name="reload" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)
			]]></help>
			</parameter>
			<parameter name="transaction" type="string" required="false">
			<help><![CDATA[
				Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.
			]]></help>
			</parameter>
			<parameter name="callbacks" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to disable callbacks for this operation.
			]]></help>
			</parameter>
			<parameter name="includeSoftDeletes" type="boolean" required="false">
			<help><![CDATA[
				You can set this argument to `true` to include soft-deleted records in the results.
			]]></help>
			</parameter>
			<parameter name="softDelete" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to permanently delete a record, even if it has a soft delete column.
			]]></help>
			</parameter>
		</function>
		<function name="deobfuscateParam" returns="string">
			<help><![CDATA[
			Deobfuscates a value.
			]]></help>
			<parameter name="param" type="string" required="true">
			<help><![CDATA[
				Value to deobfuscate.
			]]></help>
			</parameter>
		</function>
		<function name="distanceOfTimeInWords" returns="string">
			<help><![CDATA[
			Pass in two dates to this method, and it will return a string describing the difference between them.
			]]></help>
			<parameter name="fromTime" type="date" required="true">
			<help><![CDATA[
				Date to compare from.
			]]></help>
			</parameter>
			<parameter name="toTime" type="date" required="true">
			<help><![CDATA[
				Date to compare to.
			]]></help>
			</parameter>
			<parameter name="includeSeconds" type="boolean" required="false">
			<help><![CDATA[
				Whether or not to include the number of seconds in the returned string.
			]]></help>
			</parameter>
		</function>
		<function name="endFormTag" returns="string">
			<help><![CDATA[
			Builds and returns a string containing the closing `form` tag.
			]]></help>
		</function>
		<function name="errorCount" returns="numeric">
			<help><![CDATA[
			Returns the number of errors this object has associated with it. Specify `property` or `name` if you wish to count only specific errors.
			]]></help>
			<parameter name="property" type="string" required="false">
			<help><![CDATA[
				Specify a property name here if you want to count only errors set on a specific property.
			]]></help>
			</parameter>
			<parameter name="name" type="string" required="false">
			<help><![CDATA[
				Specify an error name here if you want to count only errors set with a specific error name.
			]]></help>
			</parameter>
		</function>
		<function name="errorMessageOn" returns="string">
			<help><![CDATA[
			Returns the error message, if one exists, on the object's property. If multiple error messages exist, the first one is returned.
			]]></help>
			<parameter name="objectName" type="string" required="true">
			<help><![CDATA[
				The variable name of the object to display the error message for.
			]]></help>
			</parameter>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				The name of the property to display the error message for.
			]]></help>
			</parameter>
			<parameter name="prependText" type="string" required="false">
			<help><![CDATA[
				String to prepend to the error message.
			]]></help>
			</parameter>
			<parameter name="appendText" type="string" required="false">
			<help><![CDATA[
				String to append to the error message.
			]]></help>
			</parameter>
			<parameter name="wrapperElement" type="string" required="false">
			<help><![CDATA[
				HTML element to wrap the error message in.
			]]></help>
			</parameter>
			<parameter name="class" type="string" required="false">
			<help><![CDATA[
				CSS class to set on the wrapper element.
			]]></help>
			</parameter>
		</function>
		<function name="errorMessagesFor" returns="string">
			<help><![CDATA[
			Builds and returns a list (`ul` tag with a class of `error-messages`) containing all the error messages for all the properties of the object (if any). Returns an empty string otherwise.
			]]></help>
			<parameter name="objectName" type="string" required="true">
			<help><![CDATA[
				The variable name of the object to display error messages for.
			]]></help>
			</parameter>
			<parameter name="class" type="string" required="false">
			<help><![CDATA[
				CSS class to set on the `ul` element.
			]]></help>
			</parameter>
			<parameter name="showDuplicates" type="boolean" required="false">
			<help><![CDATA[
				Whether or not to show duplicate error messages.
			]]></help>
			</parameter>
		</function>
		<function name="errorsOn" returns="array">
			<help><![CDATA[
			Returns an array of all errors associated with the supplied property (and error name if passed in).
			]]></help>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				Specify the property name to return errors for here.
			]]></help>
			</parameter>
			<parameter name="name" type="string" required="false">
			<help><![CDATA[
				If you want to return only errors on the above property set with a specific error name you can specify it here.
			]]></help>
			</parameter>
		</function>
		<function name="errorsOnBase" returns="array">
			<help><![CDATA[
			Returns an array of all errors associated with the object as a whole (not related to any specific property).
			]]></help>
			<parameter name="name" type="string" required="false">
			<help><![CDATA[
				Specify an error name here to only return errors for that error name.
			]]></help>
			</parameter>
		</function>
		<function name="excerpt" returns="string">
			<help><![CDATA[
			Extracts an excerpt from text that matches the first instance of a given phrase.
			]]></help>
			<parameter name="text" type="string" required="true">
			<help><![CDATA[
				The text to extract an excerpt from.
			]]></help>
			</parameter>
			<parameter name="phrase" type="string" required="true">
			<help><![CDATA[
				The phrase to extract.
			]]></help>
			</parameter>
			<parameter name="radius" type="numeric" required="false">
			<help><![CDATA[
				Number of characters to extract surrounding the phrase.
			]]></help>
			</parameter>
			<parameter name="excerptString" type="string" required="false">
			<help><![CDATA[
				String to replace first and/or last characters with.
			]]></help>
			</parameter>
		</function>
		<function name="exists" returns="boolean">
			<help><![CDATA[
			Checks if a record exists in the table. You can pass in either a primary key value to the `key` argument or a string to the `where` argument.
			]]></help>
			<parameter name="key" type="any" required="false">
			<help><![CDATA[
				Primary key value(s) of the record to fetch. Separate with comma if passing in multiple primary key values. Accepts a string, list, or a numeric value.
			]]></help>
			</parameter>
			<parameter name="where" type="string" required="false">
			<help><![CDATA[
				This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.
			]]></help>
			</parameter>
			<parameter name="reload" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)
			]]></help>
			</parameter>
			<parameter name="parameterize" type="any" required="false">
			<help><![CDATA[
				Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.
			]]></help>
			</parameter>
		</function>
		<function name="fileField" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a file field form control based on the supplied `objectName` and `property`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="objectName" type="any" required="true">
			<help><![CDATA[
				The variable name of the object to build the form control for.
			]]></help>
			</parameter>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				The name of the property to use in the form control.
			]]></help>
			</parameter>
			<parameter name="association" type="string" required="false">
			<help><![CDATA[
				The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="position" type="string" required="false">
			<help><![CDATA[
				The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="errorElement" type="string" required="false">
			<help><![CDATA[
				HTML tag to wrap the form control with when the object contains errors.
			]]></help>
			</parameter>
			<parameter name="errorClass" type="string" required="false">
			<help><![CDATA[
				The class name of the HTML tag that wraps the form control when there are errors.
			]]></help>
			</parameter>
		</function>
		<function name="fileFieldTag" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a file form control based on the supplied `name`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name to populate in tag's `name` attribute.
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
		</function>
		<function name="filterChain" returns="array">
			<help><![CDATA[
			Returns an array of all the filters set on this controller in the order in which they will be executed.
			]]></help>
			<parameter name="type" type="string" required="false">
			<help><![CDATA[
				Use this argument to return only `before` or `after` filters.
			]]></help>
			</parameter>
		</function>
		<function name="filters" returns="void">
			<help><![CDATA[
			Tells Wheels to run a function before an action is run or after an action has been run. You can also specify multiple functions and actions.
			]]></help>
			<parameter name="through" type="string" required="true">
			<help><![CDATA[
				Function(s) to execute before or after the action(s).
			]]></help>
			</parameter>
			<parameter name="type" type="string" required="false">
			<help><![CDATA[
				Whether to run the function(s) before or after the action(s).
			]]></help>
			</parameter>
			<parameter name="only" type="string" required="false">
			<help><![CDATA[
				Pass in a list of action names (or one action name) to tell Wheels that the filter function(s) should only be run on these actions.
			]]></help>
			</parameter>
			<parameter name="except" type="string" required="false">
			<help><![CDATA[
				Pass in a list of action names (or one action name) to tell Wheels that the filter function(s) should be run on all actions except the specified ones.
			]]></help>
			</parameter>
		</function>
		<function name="findAll" returns="any">
			<help><![CDATA[
			Returns records from the database table mapped to this model according to the arguments passed in. (Use the `where` argument to decide which records to get, use the `order` argument to set in what order those records should be returned, and so on). The records will be returned as either a `cfquery` result set or an array of objects (depending on what the `returnAs` argument is set to). Instead of using the `where` argument, you can create cleaner code by making use of a concept called dynamic finders.
			]]></help>
			<parameter name="where" type="string" required="false">
			<help><![CDATA[
				This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.
			]]></help>
			</parameter>
			<parameter name="order" type="string" required="false">
			<help><![CDATA[
				Maps to the `ORDER BY` clause of the query. You do not need to specify the table name(s); Wheels will do that for you.
			]]></help>
			</parameter>
			<parameter name="group" type="string" required="false">
			<help><![CDATA[
				Maps to the `GROUP BY` clause of the query. You do not need to specify the table name(s); Wheels will do that for you.
			]]></help>
			</parameter>
			<parameter name="select" type="string" required="false">
			<help><![CDATA[
				Determines how the `SELECT` clause for the query used to return data will look.	You can pass in a list of the properties (which map to columns) that you want returned from your table(s). If you don't set this argument at all, Wheels will select all properties from your table(s). If you specify a table name (e.g. `users.email`) or alias a column (e.g. `fn AS firstName`) in the list, then the entire list will be passed through unchanged and used in the `SELECT` clause of the query. By default, all column names in tables `JOIN`ed via the `include` argument will be prepended with the singular version of the included table name.
			]]></help>
			</parameter>
			<parameter name="distinct" type="boolean" required="false">
			<help><![CDATA[
				Whether to add the `DISTINCT` keyword to your `SELECT` clause. Wheels will, when necessary, add this automatically (when using pagination and a `hasMany` association is used in the `include` argument, to name one example).
			]]></help>
			</parameter>
			<parameter name="include" type="string" required="false">
			<help><![CDATA[
				Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. `department,addresses,emails`). You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))`, for example. These complex `include` strings only work when `returnAs` is set to `query` though.
			]]></help>
			</parameter>
			<parameter name="maxRows" type="numeric" required="false">
			<help><![CDATA[
				Maximum number of records to retrieve. Passed on to the `maxRows` `cfquery` attribute. The default, `-1`, means that all records will be retrieved.
			]]></help>
			</parameter>
			<parameter name="page" type="numeric" required="false">
			<help><![CDATA[
				If you want to paginate records, you can do so by specifying a page number here. For example, getting records 11-20 would be page number 2 when `perPage` is kept at the default setting (10 records per page). The default, `0`, means that records won't be paginated and that the `perPage`, `count`, and `handle` arguments will be ignored.
			]]></help>
			</parameter>
			<parameter name="perPage" type="numeric" required="false">
			<help><![CDATA[
				When using pagination, you can specify how many records you want to fetch per page here. This argument is only used when the `page` argument has been passed in.
			]]></help>
			</parameter>
			<parameter name="count" type="numeric" required="false">
			<help><![CDATA[
				When using pagination and you know in advance how many records you want to paginate through, you can pass in that value here. Doing so will prevent Wheels from running a `COUNT` query to get this value. This argument is only used when the `page` argument has been passed in.
			]]></help>
			</parameter>
			<parameter name="handle" type="string" required="false">
			<help><![CDATA[
				Handle to use for the query in pagination. This is useful when you're paginating multiple queries and need to reference them in the @paginationLinks function, for example. This argument is only used when the `page` argument has been passed in.
			]]></help>
			</parameter>
			<parameter name="cache" type="any" required="false">
			<help><![CDATA[
				If you want to cache the query, you can do so by specifying the number of minutes you want to cache the query for here. If you set it to `true`, the default cache time will be used (60 minutes).
			]]></help>
			</parameter>
			<parameter name="reload" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)
			]]></help>
			</parameter>
			<parameter name="parameterize" type="any" required="false">
			<help><![CDATA[
				Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.
			]]></help>
			</parameter>
			<parameter name="returnAs" type="string" required="false">
			<help><![CDATA[
				Set this to `objects` to return an array of objects. Set this to `query` to return a query result set.
			]]></help>
			</parameter>
			<parameter name="returnIncluded" type="boolean" required="false">
			<help><![CDATA[
				When `returnAs` is set to `objects`, you can set this argument to `false` to prevent returning objects fetched from associations specified in the `include` argument. This is useful when you only need to include associations for use in the `WHERE` clause only and want to avoid the performance hit that comes with object creation.
			]]></help>
			</parameter>
			<parameter name="callbacks" type="boolean" required="false">
			<help><![CDATA[
				You can set this argument to `false` to prevent running the execution of callbacks for a method call.
			]]></help>
			</parameter>
			<parameter name="includeSoftDeletes" type="boolean" required="false">
			<help><![CDATA[
				You can set this argument to `true` to include soft-deleted records in the results.
			]]></help>
			</parameter>
		</function>
		<function name="findByKey" returns="any">
			<help><![CDATA[
			Fetches the requested record by primary key and returns it as an object. Returns `false` if no record is found. You can override this behavior to return a `cfquery` result set instead, similar to what's described in the documentation for @findOne.
			]]></help>
			<parameter name="key" type="any" required="true">
			<help><![CDATA[
				Primary key value(s) of the record to fetch. Separate with comma if passing in multiple primary key values. Accepts a string, list, or a numeric value.
			]]></help>
			</parameter>
			<parameter name="select" type="string" required="false">
			<help><![CDATA[
				Determines how the `SELECT` clause for the query used to return data will look.	You can pass in a list of the properties (which map to columns) that you want returned from your table(s). If you don't set this argument at all, Wheels will select all properties from your table(s). If you specify a table name (e.g. `users.email`) or alias a column (e.g. `fn AS firstName`) in the list, then the entire list will be passed through unchanged and used in the `SELECT` clause of the query. By default, all column names in tables `JOIN`ed via the `include` argument will be prepended with the singular version of the included table name.
			]]></help>
			</parameter>
			<parameter name="include" type="string" required="false">
			<help><![CDATA[
				Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. `department,addresses,emails`). You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))`, for example. These complex `include` strings only work when `returnAs` is set to `query` though.
			]]></help>
			</parameter>
			<parameter name="cache" type="any" required="false">
			<help><![CDATA[
				If you want to cache the query, you can do so by specifying the number of minutes you want to cache the query for here. If you set it to `true`, the default cache time will be used (60 minutes).
			]]></help>
			</parameter>
			<parameter name="reload" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)
			]]></help>
			</parameter>
			<parameter name="parameterize" type="any" required="false">
			<help><![CDATA[
				Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.
			]]></help>
			</parameter>
			<parameter name="returnAs" type="string" required="false">
			<help><![CDATA[
				Set this to `query` to return as a single-row query result set. Set this to `object` to return as an object.
			]]></help>
			</parameter>
			<parameter name="callbacks" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to disable callbacks for this operation.
			]]></help>
			</parameter>
			<parameter name="includeSoftDeletes" type="boolean" required="false">
			<help><![CDATA[
				You can set this argument to `true` to include soft-deleted records in the results.
			]]></help>
			</parameter>
		</function>
		<function name="findOne" returns="any">
			<help><![CDATA[
			Fetches the first record found based on the `WHERE` and `ORDER BY` clauses. With the default settings (i.e. the `returnAs` argument set to `object`), a model object will be returned if the record is found and the boolean value `false` if not. Instead of using the `where` argument, you can create cleaner code by making use of a concept called dynamic finders.
			]]></help>
			<parameter name="where" type="string" required="false">
			<help><![CDATA[
				This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.
			]]></help>
			</parameter>
			<parameter name="order" type="string" required="false">
			<help><![CDATA[
				Maps to the `ORDER BY` clause of the query. You do not need to specify the table name(s); Wheels will do that for you.
			]]></help>
			</parameter>
			<parameter name="select" type="string" required="false">
			<help><![CDATA[
				Determines how the `SELECT` clause for the query used to return data will look.	You can pass in a list of the properties (which map to columns) that you want returned from your table(s). If you don't set this argument at all, Wheels will select all properties from your table(s). If you specify a table name (e.g. `users.email`) or alias a column (e.g. `fn AS firstName`) in the list, then the entire list will be passed through unchanged and used in the `SELECT` clause of the query. By default, all column names in tables `JOIN`ed via the `include` argument will be prepended with the singular version of the included table name.
			]]></help>
			</parameter>
			<parameter name="include" type="string" required="false">
			<help><![CDATA[
				Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. `department,addresses,emails`). You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))`, for example. These complex `include` strings only work when `returnAs` is set to `query` though.
			]]></help>
			</parameter>
			<parameter name="cache" type="any" required="false">
			<help><![CDATA[
				If you want to cache the query, you can do so by specifying the number of minutes you want to cache the query for here. If you set it to `true`, the default cache time will be used (60 minutes).
			]]></help>
			</parameter>
			<parameter name="reload" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)
			]]></help>
			</parameter>
			<parameter name="parameterize" type="any" required="false">
			<help><![CDATA[
				Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.
			]]></help>
			</parameter>
			<parameter name="returnAs" type="string" required="false">
			<help><![CDATA[
				Set this to `query` to return as a single-row query result set. Set this to `object` to return as an object.
			]]></help>
			</parameter>
			<parameter name="includeSoftDeletes" type="boolean" required="false">
			<help><![CDATA[
				You can set this argument to `true` to include soft-deleted records in the results.
			]]></help>
			</parameter>
		</function>
		<function name="flash" returns="any">
			<help><![CDATA[
			Returns the value of a specific key in the Flash (or the entire Flash as a struct if no key is passed in).
			]]></help>
			<parameter name="key" type="string" required="false">
			<help><![CDATA[
				The key to get the value for.
			]]></help>
			</parameter>
		</function>
		<function name="flashClear" returns="void">
			<help><![CDATA[
			Deletes everything from the Flash.
			]]></help>
		</function>
		<function name="flashCount" returns="numeric">
			<help><![CDATA[
			Returns how many keys exist in the Flash.
			]]></help>
		</function>
		<function name="flashDelete" returns="boolean">
			<help><![CDATA[
			Deletes a specific key from the Flash.
			]]></help>
			<parameter name="key" type="string" required="true">
			<help><![CDATA[
				The key to delete.
			]]></help>
			</parameter>
		</function>
		<function name="flashInsert" returns="void">
			<help><![CDATA[
			Inserts a new key/value into the Flash.
			]]></help>
		</function>
		<function name="flashIsEmpty" returns="boolean">
			<help><![CDATA[
			Returns whether or not the Flash is empty.
			]]></help>
		</function>
		<function name="flashKeep" returns="void">
			<help><![CDATA[
			Make the entire Flash or specific key in it stick around for one more request.
			]]></help>
			<parameter name="key" type="string" required="false">
			<help><![CDATA[
				A key or list of keys to flag for keeping. This argument is also aliased as `keys`.
			]]></help>
			</parameter>
		</function>
		<function name="flashKeyExists" returns="boolean">
			<help><![CDATA[
			Checks if a specific key exists in the Flash.
			]]></help>
			<parameter name="key" type="string" required="true">
			<help><![CDATA[
				The key to check if it exists.
			]]></help>
			</parameter>
		</function>
		<function name="flashMessages" returns="string">
			<help><![CDATA[
			Displays a marked-up listing of messages that exists in the Flash.
			]]></help>
			<parameter name="keys" type="string" required="false">
			<help><![CDATA[
				The key (or list of keys) to show the value for. You can also use the `key` argument instead for better readability when accessing a single key.
			]]></help>
			</parameter>
			<parameter name="class" type="string" required="false">
			<help><![CDATA[
				HTML `class` to set on the `div` element that contains the messages.
			]]></help>
			</parameter>
			<parameter name="includeEmptyContainer" type="boolean" required="false">
			<help><![CDATA[
				Includes the DIV container even if the flash is empty.
			]]></help>
			</parameter>
			<parameter name="lowerCaseDynamicClassValues" type="boolean" required="false">
			<help><![CDATA[
				Outputs all class attribute values in lower case (except the main one).
			]]></help>
			</parameter>
		</function>
		<function name="get" returns="any">
			<help><![CDATA[
			Returns the current setting for the supplied Wheels setting or the current default for the supplied Wheels function argument.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Variable name to get setting for.
			]]></help>
			</parameter>
			<parameter name="functionName" type="string" required="false">
			<help><![CDATA[
				Function name to get setting for.
			]]></help>
			</parameter>
		</function>
		<function name="getTableNamePrefix" returns="string">
			<help><![CDATA[
			Returns the table name prefix set for the table.
			]]></help>
		</function>
		<function name="hasChanged" returns="boolean">
			<help><![CDATA[
			Returns `true` if the specified property (or any if none was passed in) has been changed but not yet saved to the database. Will also return `true` if the object is new and no record for it exists in the database.
			]]></help>
			<parameter name="property" type="string" required="false">
			<help><![CDATA[
				Name of property to check for change.
			]]></help>
			</parameter>
		</function>
		<function name="hasErrors" returns="boolean">
			<help><![CDATA[
			Returns `true` if the object has any errors. You can also limit to only check a specific property or name for errors.
			]]></help>
			<parameter name="property" type="string" required="false">
			<help><![CDATA[
				Name of the property to check if there are any errors set on.
			]]></help>
			</parameter>
			<parameter name="name" type="string" required="false">
			<help><![CDATA[
				Error name to check if there are any errors set with.
			]]></help>
			</parameter>
		</function>
		<function name="hasMany" returns="void">
			<help><![CDATA[
			Sets up a `hasMany` association between this model and the specified one.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Gives the association a name that you refer to when working with the association (in the `include` argument to @findAll, to name one example).
			]]></help>
			</parameter>
			<parameter name="modelName" type="string" required="false">
			<help><![CDATA[
				Name of associated model (usually not needed if you follow Wheels conventions because the model name will be deduced from the `name` argument).
			]]></help>
			</parameter>
			<parameter name="foreignKey" type="string" required="false">
			<help><![CDATA[
				Foreign key property name (usually not needed if you follow Wheels conventions since the foreign key name will be deduced from the `name` argument).
			]]></help>
			</parameter>
			<parameter name="joinType" type="string" required="false">
			<help><![CDATA[
				Use to set the join type when joining associated tables. Possible values are `inner` (for `INNER JOIN`) and `outer` (for `LEFT OUTER JOIN`).
			]]></help>
			</parameter>
			<parameter name="dependent" type="string" required="false">
			<help><![CDATA[
				Defines how to handle dependent models when you delete a record from this model. Set to `delete` to instantiate associated models and call their @delete method, `deleteAll` to delete without instantiating, `nullify` to remove the foreign key, or `false` to do nothing.
			]]></help>
			</parameter>
			<parameter name="shortcut" type="string" required="false">
			<help><![CDATA[
				Set this argument to create an additional dynamic method that gets the object(s) from the other side of a many-to-many association.
			]]></help>
			</parameter>
			<parameter name="through" type="string" required="false">
			<help><![CDATA[
				Set this argument if you need to override Wheels conventions when using the `shortcut` argument. Accepts a list of two association names representing the chain from the opposite side of the many-to-many relationship to this model.
			]]></help>
			</parameter>
		</function>
		<function name="hasManyCheckBox" returns="string">
			<help><![CDATA[
			Used as a shortcut to output the proper form elements for an association. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="objectName" type="string" required="true">
			<help><![CDATA[
				Name of the variable containing the parent object to represent with this form field.
			]]></help>
			</parameter>
			<parameter name="association" type="string" required="true">
			<help><![CDATA[
				Name of the association set in the parent object to represent with this form field.
			]]></help>
			</parameter>
			<parameter name="keys" type="string" required="true">
			<help><![CDATA[
				Primary keys associated with this form field.
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="errorElement" type="string" required="false">
			<help><![CDATA[
				HTML tag to wrap the form control with when the object contains errors.
			]]></help>
			</parameter>
			<parameter name="errorClass" type="string" required="false">
			<help><![CDATA[
				The class name of the HTML tag that wraps the form control when there are errors.
			]]></help>
			</parameter>
		</function>
		<function name="hasManyRadioButton" returns="string">
			<help><![CDATA[
			Used as a shortcut to output the proper form elements for an association. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="objectName" type="string" required="true">
			<help><![CDATA[
				Name of the variable containing the parent object to represent with this form field.
			]]></help>
			</parameter>
			<parameter name="association" type="string" required="true">
			<help><![CDATA[
				Name of the association set in the parent object to represent with this form field.
			]]></help>
			</parameter>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				Name of the property in the child object to represent with this form field.
			]]></help>
			</parameter>
			<parameter name="keys" type="string" required="true">
			<help><![CDATA[
				Primary keys associated with this form field.
			]]></help>
			</parameter>
			<parameter name="tagValue" type="string" required="true">
			<help><![CDATA[
				The value of the radio button when `selected`.
			]]></help>
			</parameter>
			<parameter name="checkIfBlank" type="boolean" required="false">
			<help><![CDATA[
				Whether or not to check this form field as a default if there is a blank value set for the property.
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
		</function>
		<function name="hasOne" returns="void">
			<help><![CDATA[
			Sets up a `hasOne` association between this model and the specified one.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Gives the association a name that you refer to when working with the association (in the `include` argument to @findAll, to name one example).
			]]></help>
			</parameter>
			<parameter name="modelName" type="string" required="false">
			<help><![CDATA[
				Name of associated model (usually not needed if you follow Wheels conventions because the model name will be deduced from the `name` argument).
			]]></help>
			</parameter>
			<parameter name="foreignKey" type="string" required="false">
			<help><![CDATA[
				Foreign key property name (usually not needed if you follow Wheels conventions since the foreign key name will be deduced from the `name` argument).
			]]></help>
			</parameter>
			<parameter name="joinType" type="string" required="false">
			<help><![CDATA[
				Use to set the join type when joining associated tables. Possible values are `inner` (for `INNER JOIN`) and `outer` (for `LEFT OUTER JOIN`).
			]]></help>
			</parameter>
			<parameter name="dependent" type="string" required="false">
			<help><![CDATA[
				Defines how to handle dependent models when you delete a record from this model. Set to `delete` to instantiate associated models and call their @delete method, `deleteAll` to delete without instantiating, `nullify` to remove the foreign key, or `false` to do nothing.
			]]></help>
			</parameter>
		</function>
		<function name="hasProperty" returns="boolean">
			<help><![CDATA[
			Returns `true` if the specified property name exists on the model.
			]]></help>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				Name of property to inspect.
			]]></help>
			</parameter>
		</function>
		<function name="hiddenField" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a hidden field form control based on the supplied `objectName` and `property`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="objectName" type="any" required="true">
			<help><![CDATA[
				The variable name of the object to build the form control for.
			]]></help>
			</parameter>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				The name of the property to use in the form control.
			]]></help>
			</parameter>
			<parameter name="association" type="string" required="false">
			<help><![CDATA[
				The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="position" type="string" required="false">
			<help><![CDATA[
				The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.
			]]></help>
			</parameter>
		</function>
		<function name="hiddenFieldTag" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a hidden field form control based on the supplied `name`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name to populate in tag's `name` attribute.
			]]></help>
			</parameter>
			<parameter name="value" type="string" required="false">
			<help><![CDATA[
				Value to populate in tag's `value` attribute.
			]]></help>
			</parameter>
		</function>
		<function name="highlight" returns="string">
			<help><![CDATA[
			Highlights the phrase(s) everywhere in the text if found by wrapping it in a `span` tag.
			]]></help>
			<parameter name="text" type="string" required="true">
			<help><![CDATA[
				Text to search.
			]]></help>
			</parameter>
			<parameter name="phrases" type="string" required="true">
			<help><![CDATA[
				List of phrases to highlight.
			]]></help>
			</parameter>
			<parameter name="class" type="string" required="false">
			<help><![CDATA[
				Class to use in `span` tags surrounding highlighted phrase(s).
			]]></help>
			</parameter>
		</function>
		<function name="hourSelectTag" returns="string">
			<help><![CDATA[
			Builds and returns a string containing one select form control for the hours of the day based on the supplied `name`.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name to populate in tag's `name` attribute.
			]]></help>
			</parameter>
			<parameter name="selected" type="string" required="false">
			<help><![CDATA[
				The hour that should be selected initially.
			]]></help>
			</parameter>
			<parameter name="includeBlank" type="any" required="false">
			<help><![CDATA[
				Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="twelveHour" type="boolean" required="false">
			<help><![CDATA[
				whether to display the hours in 24 or 12 hour format. 12 hour format has AM/PM drop downs
			]]></help>
			</parameter>
		</function>
		<function name="humanize" returns="string">
			<help><![CDATA[
			Returns readable text by capitalizing and converting camel casing to multiple words.
			]]></help>
			<parameter name="text" type="string" required="true">
			<help><![CDATA[
				Text to humanize.
			]]></help>
			</parameter>
			<parameter name="except" type="string" required="false">
			<help><![CDATA[
				a list of strings (space separated) to replace within the output.
			]]></help>
			</parameter>
		</function>
		<function name="hyphenize" returns="string">
			<help><![CDATA[
			Converts camelCase strings to lowercase strings with hyphens as word delimiters instead. Example: `myVariable` becomes `my-variable`.
			]]></help>
			<parameter name="string" type="string" required="true">
			<help><![CDATA[
				The string to hyphenize.
			]]></help>
			</parameter>
		</function>
		<function name="imageTag" returns="string">
			<help><![CDATA[
			Returns an `img` tag. If the image is stored in the local `images` folder, the tag will also set the `width`, `height`, and `alt` attributes for you. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="source" type="string" required="true">
			<help><![CDATA[
				The file name of the image if it's availabe in the local file system (i.e. ColdFusion will be able to access it). Provide the full URL if the image is on a remote server.
			]]></help>
			</parameter>
		</function>
		<function name="includeContent" returns="string">
			<help><![CDATA[
			Used to output the content for a particular section in a layout.
			]]></help>
			<parameter name="name" type="string" required="false">
			<help><![CDATA[
				Name of layout section to return content for.
			]]></help>
			</parameter>
			<parameter name="default" type="string" required="false">
			<help><![CDATA[
				What to display as a default if the section is not defined.
			]]></help>
			</parameter>
		</function>
		<function name="includedInObject" returns="boolean">
			<help><![CDATA[
			Used as a shortcut to check if the specified IDs are a part of the main form object. This method should only be used for `hasMany` associations.
			]]></help>
			<parameter name="objectName" type="string" required="true">
			<help><![CDATA[
				Name of the variable containing the parent object to represent with this form field.
			]]></help>
			</parameter>
			<parameter name="association" type="string" required="true">
			<help><![CDATA[
				Name of the association set in the parent object to represent with this form field.
			]]></help>
			</parameter>
			<parameter name="keys" type="string" required="true">
			<help><![CDATA[
				Primary keys associated with this form field.
			]]></help>
			</parameter>
		</function>
		<function name="includeLayout" returns="string">
			<help><![CDATA[
			Includes the contents of another layout file. This is usually used to include a parent layout from within a child layout.
			]]></help>
			<parameter name="name" type="string" required="false">
			<help><![CDATA[
				Name of the layout file to include.
			]]></help>
			</parameter>
		</function>
		<function name="includePartial" returns="string">
			<help><![CDATA[
			Includes the specified partial file in the view. Similar to using `cfinclude` but with the ability to cache the result and use Wheels-specific file look-up. By default, Wheels will look for the file in the current controller's view folder. To include a file relative from the base `views` folder, you can start the path supplied to `name` with a forward slash.
			]]></help>
			<parameter name="partial" type="any" required="true">
			<help><![CDATA[
				The name of the partial file to be used. Prefix with a leading slash `/` if you need to build a path from the root `views` folder. Do not include the partial filename's underscore and file extension.
			]]></help>
			</parameter>
			<parameter name="group" type="string" required="false">
			<help><![CDATA[
				If passing a query result set for the `partial` argument, use this to specify the field to group the query by. A new query will be passed into the partial template for you to iterate over.
			]]></help>
			</parameter>
			<parameter name="cache" type="any" required="false">
			<help><![CDATA[
				See documentation for @renderPage.
			]]></help>
			</parameter>
			<parameter name="layout" type="string" required="false">
			<help><![CDATA[
				See documentation for @renderPage.
			]]></help>
			</parameter>
			<parameter name="spacer" type="string" required="false">
			<help><![CDATA[
				HTML or string to place between partials when called using a query.
			]]></help>
			</parameter>
			<parameter name="dataFunction" type="any" required="false">
			<help><![CDATA[
				Name of controller function to load data from.
			]]></help>
			</parameter>
		</function>
		<function name="invokeWithTransaction" returns="any">
			<help><![CDATA[
			Runs the specified method within a single database transaction.
			]]></help>
			<parameter name="method" type="string" required="true">
			<help><![CDATA[
				Model method to run.
			]]></help>
			</parameter>
			<parameter name="transaction" type="string" required="false">
			<help><![CDATA[
				Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.
			]]></help>
			</parameter>
			<parameter name="isolation" type="string" required="false">
			<help><![CDATA[
				See documentation for @save.
			]]></help>
			</parameter>
		</function>
		<function name="isAjax" returns="boolean">
			<help><![CDATA[
			Returns whether the page was called from JavaScript or not.
			]]></help>
		</function>
		<function name="isClass" returns="boolean">
			<help><![CDATA[
			Use this method within a model's method to check whether you are currently in a class-level object.
			]]></help>
		</function>
		<function name="isGet" returns="boolean">
			<help><![CDATA[
			Returns whether the request was a normal `GET` request or not.
			]]></help>
		</function>
		<function name="isInstance" returns="boolean">
			<help><![CDATA[
			Use this method to check whether you are currently in an instance object.
			]]></help>
		</function>
		<function name="isNew" returns="boolean">
			<help><![CDATA[
			Returns `true` if this object hasn't been saved yet. (In other words, no matching record exists in the database yet.) Returns `false` if a record exists.
			]]></help>
		</function>
		<function name="isPost" returns="boolean">
			<help><![CDATA[
			Returns whether the request came from a form `POST` submission or not.
			]]></help>
		</function>
		<function name="isSecure" returns="boolean">
			<help><![CDATA[
			Returns whether Wheels is communicating over a secure port.
			]]></help>
		</function>
		<function name="javaScriptIncludeTag" returns="string">
			<help><![CDATA[
			Returns a `script` tag for a JavaScript file (or several) based on the supplied arguments.
			]]></help>
			<parameter name="sources" type="string" required="false">
			<help><![CDATA[
				The name of one or many JavaScript files in the `javascripts` folder, minus the `.js` extension. (Can also be called with the `source` argument.)
			]]></help>
			</parameter>
			<parameter name="type" type="string" required="false">
			<help><![CDATA[
				The `type` attribute for the `script` tag.
			]]></help>
			</parameter>
			<parameter name="head" type="string" required="false">
			<help><![CDATA[
				Set to `true` to place the output in the `head` area of the HTML page instead of the default behavior, which is to place the output where the function is called from.
			]]></help>
			</parameter>
		</function>
		<function name="key" returns="string">
			<help><![CDATA[
			Returns the value of the primary key for the object. If you have a single primary key named `id`, then `someObject.key()` is functionally equivalent to `someObject.id`. This method is more useful when you do dynamic programming and don't know the name of the primary key or when you use composite keys (in which case it's convenient to use this method to get a list of both key values returned).
			]]></help>
		</function>
		<function name="linkTo" returns="string">
			<help><![CDATA[
			Creates a link to another page in your application. Pass in the name of a `route` to use your configured routes or a `controller`/`action`/`key` combination. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="text" type="string" required="false">
			<help><![CDATA[
				The text content of the link.
			]]></help>
			</parameter>
			<parameter name="confirm" type="string" required="false">
			<help><![CDATA[
				Pass a message here to cause a JavaScript confirmation dialog box to pop up containing the message.
			]]></help>
			</parameter>
			<parameter name="route" type="string" required="false">
			<help><![CDATA[
				Name of a route that you have configured in `config/routes.cfm`.
			]]></help>
			</parameter>
			<parameter name="controller" type="string" required="false">
			<help><![CDATA[
				Name of the controller to include in the URL.
			]]></help>
			</parameter>
			<parameter name="action" type="string" required="false">
			<help><![CDATA[
				Name of the action to include in the URL.
			]]></help>
			</parameter>
			<parameter name="key" type="any" required="false">
			<help><![CDATA[
				Key(s) to include in the URL.
			]]></help>
			</parameter>
			<parameter name="params" type="string" required="false">
			<help><![CDATA[
				Any additional params to be set in the query string.
			]]></help>
			</parameter>
			<parameter name="anchor" type="string" required="false">
			<help><![CDATA[
				Sets an anchor name to be appended to the path.
			]]></help>
			</parameter>
			<parameter name="onlyPath" type="boolean" required="false">
			<help><![CDATA[
				If `true`, returns only the relative URL (no protocol, host name or port).
			]]></help>
			</parameter>
			<parameter name="host" type="string" required="false">
			<help><![CDATA[
				Set this to override the current host.
			]]></help>
			</parameter>
			<parameter name="protocol" type="string" required="false">
			<help><![CDATA[
				Set this to override the current protocol.
			]]></help>
			</parameter>
			<parameter name="port" type="numeric" required="false">
			<help><![CDATA[
				Set this to override the current port number.
			]]></help>
			</parameter>
			<parameter name="href" type="string" required="false">
			<help><![CDATA[
				Pass a link to an external site here if you want to bypass the Wheels routing system altogether and link to an external URL.
			]]></help>
			</parameter>
		</function>
		<function name="mailTo" returns="string">
			<help><![CDATA[
			Creates a `mailto` link tag to the specified email address, which is also used as the name of the link unless name is specified.
			]]></help>
			<parameter name="emailAddress" type="string" required="true">
			<help><![CDATA[
				The email address to link to.
			]]></help>
			</parameter>
			<parameter name="name" type="string" required="false">
			<help><![CDATA[
				A string to use as the link text ("Joe" or "Support Department", for example).
			]]></help>
			</parameter>
			<parameter name="encode" type="boolean" required="false">
			<help><![CDATA[
				Pass `true` here to encode the email address, making it harder for bots to harvest it for example.
			]]></help>
			</parameter>
		</function>
		<function name="maximum" returns="any">
			<help><![CDATA[
			Calculates the maximum value for a given property. Uses the SQL function `MAX`. If no records can be found to perform the calculation on you can use the `ifNull` argument to decide what should be returned.
			]]></help>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				Name of the property to get the highest value for (must be a property of a numeric data type).
			]]></help>
			</parameter>
			<parameter name="where" type="string" required="false">
			<help><![CDATA[
				This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.
			]]></help>
			</parameter>
			<parameter name="include" type="string" required="false">
			<help><![CDATA[
				Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. `department,addresses,emails`). You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))`, for example. These complex `include` strings only work when `returnAs` is set to `query` though.
			]]></help>
			</parameter>
			<parameter name="parameterize" type="any" required="false">
			<help><![CDATA[
				Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.
			]]></help>
			</parameter>
			<parameter name="ifNull" type="any" required="false">
			<help><![CDATA[
				The value returned if no records are found. Common usage is to set this to `0` to make sure a numeric value is always returned instead of a blank string.
			]]></help>
			</parameter>
			<parameter name="includeSoftDeletes" type="boolean" required="false">
			<help><![CDATA[
				You can set this argument to `true` to include soft-deleted records in the results.
			]]></help>
			</parameter>
		</function>
		<function name="mimeTypes" returns="string">
			<help><![CDATA[
			Returns an associated MIME type based on a file extension.
			]]></help>
			<parameter name="extension" type="string" required="true">
			<help><![CDATA[
				The extension to get the MIME type for.
			]]></help>
			</parameter>
			<parameter name="fallback" type="string" required="false">
			<help><![CDATA[
				the fallback MIME type to return.
			]]></help>
			</parameter>
		</function>
		<function name="minimum" returns="any">
			<help><![CDATA[
			Calculates the minimum value for a given property. Uses the SQL function `MIN`. If no records can be found to perform the calculation on you can use the `ifNull` argument to decide what should be returned.
			]]></help>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				Name of the property to get the lowest value for (must be a property of a numeric data type).
			]]></help>
			</parameter>
			<parameter name="where" type="string" required="false">
			<help><![CDATA[
				This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.
			]]></help>
			</parameter>
			<parameter name="include" type="string" required="false">
			<help><![CDATA[
				Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. `department,addresses,emails`). You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))`, for example. These complex `include` strings only work when `returnAs` is set to `query` though.
			]]></help>
			</parameter>
			<parameter name="parameterize" type="any" required="false">
			<help><![CDATA[
				Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.
			]]></help>
			</parameter>
			<parameter name="ifNull" type="any" required="false">
			<help><![CDATA[
				The value returned if no records are found. Common usage is to set this to `0` to make sure a numeric value is always returned instead of a blank string.
			]]></help>
			</parameter>
			<parameter name="includeSoftDeletes" type="boolean" required="false">
			<help><![CDATA[
				You can set this argument to `true` to include soft-deleted records in the results.
			]]></help>
			</parameter>
		</function>
		<function name="minuteSelectTag" returns="string">
			<help><![CDATA[
			Builds and returns a string containing one select form control for the minutes of an hour based on the supplied `name`.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name to populate in tag's `name` attribute.
			]]></help>
			</parameter>
			<parameter name="selected" type="string" required="false">
			<help><![CDATA[
				The minute that should be selected initially.
			]]></help>
			</parameter>
			<parameter name="minuteStep" type="numeric" required="false">
			<help><![CDATA[
				Pass in `10` to only show minute 10, 20, 30, etc.
			]]></help>
			</parameter>
			<parameter name="includeBlank" type="any" required="false">
			<help><![CDATA[
				Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
		</function>
		<function name="model" returns="any">
			<help><![CDATA[
			Returns a reference to the requested model so that class level methods can be called on it.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name of the model to get a reference to.
			]]></help>
			</parameter>
		</function>
		<function name="monthSelectTag" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a select form control for the months of the year based on the supplied `name`.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name to populate in tag's `name` attribute.
			]]></help>
			</parameter>
			<parameter name="selected" type="string" required="false">
			<help><![CDATA[
				The month that should be selected initially.
			]]></help>
			</parameter>
			<parameter name="monthDisplay" type="string" required="false">
			<help><![CDATA[
				Pass in `names`, `numbers`, or `abbreviations` to control display.
			]]></help>
			</parameter>
			<parameter name="includeBlank" type="any" required="false">
			<help><![CDATA[
				Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
		</function>
		<function name="nestedProperties" returns="void">
			<help><![CDATA[
			Allows for nested objects, structs, and arrays to be set from params and other generated data.
			]]></help>
			<parameter name="association" type="string" required="false">
			<help><![CDATA[
				The association (or list of associations) you want to allow to be set through the params. This argument is also aliased as `associations`.
			]]></help>
			</parameter>
			<parameter name="autoSave" type="boolean" required="false">
			<help><![CDATA[
				Whether to save the association(s) when the parent object is saved.
			]]></help>
			</parameter>
			<parameter name="allowDelete" type="boolean" required="false">
			<help><![CDATA[
				Set `allowDelete` to `true` to tell Wheels to look for the property `_delete` in your model. If present and set to a value that evaluates to `true`, the model will be deleted when saving the parent.
			]]></help>
			</parameter>
			<parameter name="sortProperty" type="string" required="false">
			<help><![CDATA[
				Set `sortProperty` to a property on the object that you would like to sort by. The property should be numeric, should start with 1, and should be consecutive. Only valid with `hasMany` associations.
			]]></help>
			</parameter>
			<parameter name="rejectIfBlank" type="string" required="false">
			<help><![CDATA[
				A list of properties that should not be blank. If any of the properties are blank, any CRUD operations will be rejected.
			]]></help>
			</parameter>
		</function>
		<function name="new" returns="any">
			<help><![CDATA[
			Creates a new object based on supplied properties and returns it. The object is not saved to the database; it only exists in memory. Property names and values can be passed in either using named arguments or as a struct to the `properties` argument.
			]]></help>
			<parameter name="properties" type="struct" required="false">
			<help><![CDATA[
				The properties you want to set on the object (can also be passed in as named arguments).
			]]></help>
			</parameter>
			<parameter name="callbacks" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to disable callbacks for this operation.
			]]></help>
			</parameter>
		</function>
		<function name="obfuscateParam" returns="string">
			<help><![CDATA[
			Obfuscates a value. Typically used for hiding primary key values when passed along in the URL.
			]]></help>
			<parameter name="param" type="any" required="true">
			<help><![CDATA[
				Value to obfuscate.
			]]></help>
			</parameter>
		</function>
		<function name="onlyProvides" returns="void">
			<help><![CDATA[
			Use this in an individual controller action to define which formats the action will respond with. This can be used to define provides behavior in individual actions or to override a global setting set with @provides in the controller's `init()`.
			]]></help>
		</function>
		<function name="pagination" returns="struct">
			<help><![CDATA[
			Returns a struct with information about the specificed paginated query. The keys that will be included in the struct are `currentPage`, `totalPages` and `totalRecords`.
			]]></help>
			<parameter name="handle" type="string" required="false">
			<help><![CDATA[
				The handle given to the query to return pagination information for.
			]]></help>
			</parameter>
		</function>
		<function name="paginationLinks" returns="string">
			<help><![CDATA[
			Builds and returns a string containing links to pages based on a paginated query. Uses @linkTo internally to build the link, so you need to pass in a `route` name or a `controller`/`action`/`key` combination. All other @linkTo arguments can be supplied as well, in which case they are passed through directly to @linkTo. If you have paginated more than one query in the controller, you can use the `handle` argument to reference them. (Don't forget to pass in a `handle` to the @findAll function in your controller first.)
			]]></help>
			<parameter name="windowSize" type="numeric" required="false">
			<help><![CDATA[
				The number of page links to show around the current page.
			]]></help>
			</parameter>
			<parameter name="alwaysShowAnchors" type="boolean" required="false">
			<help><![CDATA[
				Whether or not links to the first and last page should always be displayed.
			]]></help>
			</parameter>
			<parameter name="anchorDivider" type="string" required="false">
			<help><![CDATA[
				String to place next to the anchors on either side of the list.
			]]></help>
			</parameter>
			<parameter name="linkToCurrentPage" type="boolean" required="false">
			<help><![CDATA[
				Whether or not the current page should be linked to.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String or HTML to be prepended before result.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String or HTML to be appended after result.
			]]></help>
			</parameter>
			<parameter name="prependToPage" type="string" required="false">
			<help><![CDATA[
				String or HTML to be prepended before each page number.
			]]></help>
			</parameter>
			<parameter name="prependOnFirst" type="boolean" required="false">
			<help><![CDATA[
				Whether or not to prepend the `prependToPage` string on the first page in the list.
			]]></help>
			</parameter>
			<parameter name="prependOnAnchor" type="boolean" required="false">
			<help><![CDATA[
				Whether or not to prepend the `prependToPage` string on the anchors.
			]]></help>
			</parameter>
			<parameter name="appendToPage" type="string" required="false">
			<help><![CDATA[
				String or HTML to be appended after each page number.
			]]></help>
			</parameter>
			<parameter name="appendOnLast" type="boolean" required="false">
			<help><![CDATA[
				Whether or not to append the `appendToPage` string on the last page in the list.
			]]></help>
			</parameter>
			<parameter name="appendOnAnchor" type="boolean" required="false">
			<help><![CDATA[
				Whether or not to append the `appendToPage` string on the anchors.
			]]></help>
			</parameter>
			<parameter name="classForCurrent" type="string" required="false">
			<help><![CDATA[
				Class name for the current page number (if `linkToCurrentPage` is `true`, the class name will go on the `a` element. If not, a `span` element will be used).
			]]></help>
			</parameter>
			<parameter name="handle" type="string" required="false">
			<help><![CDATA[
				The handle given to the query that the pagination links should be displayed for.
			]]></help>
			</parameter>
			<parameter name="name" type="string" required="false">
			<help><![CDATA[
				The name of the param that holds the current page number.
			]]></help>
			</parameter>
			<parameter name="showSinglePage" type="boolean" required="false">
			<help><![CDATA[
				Will show a single page when set to `true`. (The default behavior is to return an empty string when there is only one page in the pagination).
			]]></help>
			</parameter>
			<parameter name="pageNumberAsParam" type="boolean" required="false">
			<help><![CDATA[
				Decides whether to link the page number as a param or as part of a route. (The default behavior is `true`).
			]]></help>
			</parameter>
		</function>
		<function name="passwordField" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a password field form control based on the supplied `objectName` and `property`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="objectName" type="any" required="true">
			<help><![CDATA[
				The variable name of the object to build the form control for.
			]]></help>
			</parameter>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				The name of the property to use in the form control.
			]]></help>
			</parameter>
			<parameter name="association" type="string" required="false">
			<help><![CDATA[
				The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="position" type="string" required="false">
			<help><![CDATA[
				The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="errorElement" type="string" required="false">
			<help><![CDATA[
				HTML tag to wrap the form control with when the object contains errors.
			]]></help>
			</parameter>
			<parameter name="errorClass" type="string" required="false">
			<help><![CDATA[
				The class name of the HTML tag that wraps the form control when there are errors.
			]]></help>
			</parameter>
		</function>
		<function name="passwordFieldTag" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a password field form control based on the supplied `name`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name to populate in tag's `name` attribute.
			]]></help>
			</parameter>
			<parameter name="value" type="string" required="false">
			<help><![CDATA[
				Value to populate in tag's `value` attribute.
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
		</function>
		<function name="pluginNames" returns="string">
			<help><![CDATA[
			Returns a list of all installed plugins' names.
			]]></help>
		</function>
		<function name="pluralize" returns="string">
			<help><![CDATA[
			Returns the plural form of the passed in word. Can also pluralize a word based on a value passed to the `count` argument.
			]]></help>
			<parameter name="word" type="string" required="true">
			<help><![CDATA[
				The word to pluralize.
			]]></help>
			</parameter>
			<parameter name="count" type="numeric" required="false">
			<help><![CDATA[
				Pluralization will occur when this value is not `1`.
			]]></help>
			</parameter>
			<parameter name="returnCount" type="boolean" required="false">
			<help><![CDATA[
				Will return `count` prepended to the pluralization when `true` and `count` is not `-1`.
			]]></help>
			</parameter>
		</function>
		<function name="primaryKey" returns="string">
			<help><![CDATA[
			Returns the name of the primary key for this model's table. This is determined through database introspection. If composite primary keys have been used, they will both be returned in a list. This function is also aliased as `primaryKeys()`.
			]]></help>
			<parameter name="position" type="numeric" required="false">
			<help><![CDATA[
				If you are accessing a composite primary key, pass the position of a single key to fetch.
			]]></help>
			</parameter>
		</function>
		<function name="primaryKeys" returns="string">
			<help><![CDATA[
			Alias for @primaryKey. Use this for better readability when you're accessing multiple primary keys.
			]]></help>
			<parameter name="position" type="numeric" required="false">
			<help><![CDATA[
				If you are accessing a composite primary key, pass the position of a single key to fetch.
			]]></help>
			</parameter>
		</function>
		<function name="properties" returns="struct">
			<help><![CDATA[
			Returns a structure of all the properties with their names as keys and the values of the property as values.
			]]></help>
		</function>
		<function name="property" returns="void">
			<help><![CDATA[
			Use this method to map an object property to either a table column with a different name than the property or to a SQL expression. You only need to use this method when you want to override the default object relational mapping that Wheels performs.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				The name that you want to use for the column or SQL function result in the CFML code.
			]]></help>
			</parameter>
			<parameter name="column" type="string" required="false">
			<help><![CDATA[
				The name of the column in the database table to map the property to.
			]]></help>
			</parameter>
			<parameter name="sql" type="string" required="false">
			<help><![CDATA[
				A SQL expression to use to calculate the property value.
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				A custom label for this property to be referenced in the interface and error messages.
			]]></help>
			</parameter>
			<parameter name="defaultValue" type="string" required="false">
			<help><![CDATA[
				A default value for this property.
			]]></help>
			</parameter>
		</function>
		<function name="propertyIsPresent" returns="boolean">
			<help><![CDATA[
			Returns `true` if the specified property exists on the model and is not a blank string.
			]]></help>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				Name of property to inspect.
			]]></help>
			</parameter>
		</function>
		<function name="propertyNames" returns="string">
			<help><![CDATA[
			Returns a list of property names ordered by their respective column's ordinal position in the database table. Also includes calculated property names that will be generated by the Wheels ORM.
			]]></help>
		</function>
		<function name="protectedProperties" returns="void">
			<help><![CDATA[
			Use this method to specify which properties cannot be set through mass assignment.
			]]></help>
			<parameter name="properties" type="string" required="false">
			<help><![CDATA[
				Property name (or list of property names) that are not allowed to be altered through mass assignment.
			]]></help>
			</parameter>
		</function>
		<function name="provides" returns="void">
			<help><![CDATA[
			Defines formats that the controller will respond with upon request. The format can be requested through a URL variable called `format`, by appending the format name to the end of a URL as an extension (when URL rewriting is enabled), or in the request header.
			]]></help>
			<parameter name="formats" type="string" required="false">
			<help><![CDATA[
				Formats to instruct the controller to provide. Valid values are `html` (the default), `xml`, `json`, `csv`, `pdf`, and `xls`.
			]]></help>
			</parameter>
		</function>
		<function name="radioButton" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a radio button form control based on the supplied `objectName` and `property`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="objectName" type="any" required="true">
			<help><![CDATA[
				The variable name of the object to build the form control for.
			]]></help>
			</parameter>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				The name of the property to use in the form control.
			]]></help>
			</parameter>
			<parameter name="association" type="string" required="false">
			<help><![CDATA[
				The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="position" type="string" required="false">
			<help><![CDATA[
				The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="tagValue" type="string" required="true">
			<help><![CDATA[
				The value of the radio button when `selected`.
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="errorElement" type="string" required="false">
			<help><![CDATA[
				HTML tag to wrap the form control with when the object contains errors.
			]]></help>
			</parameter>
			<parameter name="errorClass" type="string" required="false">
			<help><![CDATA[
				The class name of the HTML tag that wraps the form control when there are errors.
			]]></help>
			</parameter>
		</function>
		<function name="radioButtonTag" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a radio button form control based on the supplied `name`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name to populate in tag's `name` attribute.
			]]></help>
			</parameter>
			<parameter name="value" type="string" required="true">
			<help><![CDATA[
				Value to populate in tag's `value` attribute.
			]]></help>
			</parameter>
			<parameter name="checked" type="boolean" required="false">
			<help><![CDATA[
				Whether or not to check the radio button by default.
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
		</function>
		<function name="redirectTo" returns="void">
			<help><![CDATA[
			Redirects the browser to the supplied `controller`/`action`/`key`, `route` or back to the referring page. Internally, this function uses the @URLFor function to build the link and the `cflocation` tag to perform the redirect.
			]]></help>
			<parameter name="back" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to redirect back to the referring page.
			]]></help>
			</parameter>
			<parameter name="addToken" type="boolean" required="false">
			<help><![CDATA[
				See documentation for your CFML engine's implementation of `cflocation`.
			]]></help>
			</parameter>
			<parameter name="statusCode" type="numeric" required="false">
			<help><![CDATA[
				See documentation for your CFML engine's implementation of `cflocation`.
			]]></help>
			</parameter>
			<parameter name="route" type="string" required="false">
			<help><![CDATA[
				Name of a route that you have configured in `config/routes.cfm`.
			]]></help>
			</parameter>
			<parameter name="controller" type="string" required="false">
			<help><![CDATA[
				Name of the controller to include in the URL.
			]]></help>
			</parameter>
			<parameter name="action" type="string" required="false">
			<help><![CDATA[
				Name of the action to include in the URL.
			]]></help>
			</parameter>
			<parameter name="key" type="any" required="false">
			<help><![CDATA[
				Key(s) to include in the URL.
			]]></help>
			</parameter>
			<parameter name="params" type="string" required="false">
			<help><![CDATA[
				Any additional params to be set in the query string.
			]]></help>
			</parameter>
			<parameter name="anchor" type="string" required="false">
			<help><![CDATA[
				Sets an anchor name to be appended to the path.
			]]></help>
			</parameter>
			<parameter name="onlyPath" type="boolean" required="false">
			<help><![CDATA[
				If `true`, returns only the relative URL (no protocol, host name or port).
			]]></help>
			</parameter>
			<parameter name="host" type="string" required="false">
			<help><![CDATA[
				Set this to override the current host.
			]]></help>
			</parameter>
			<parameter name="protocol" type="string" required="false">
			<help><![CDATA[
				Set this to override the current protocol.
			]]></help>
			</parameter>
			<parameter name="port" type="numeric" required="false">
			<help><![CDATA[
				Set this to override the current port number.
			]]></help>
			</parameter>
			<parameter name="delay" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to delay the redirection until after the rest of your action code has executed.
			]]></help>
			</parameter>
		</function>
		<function name="reload" returns="void">
			<help><![CDATA[
			Reloads the property values of this object from the database.
			]]></help>
		</function>
		<function name="renderNothing" returns="void">
			<help><![CDATA[
			Instructs the controller to render an empty string when it's finished processing the action. This is very similar to calling `cfabort` with the advantage that any after filters you have set on the action will still be run.
			]]></help>
		</function>
		<function name="renderPage" returns="any">
			<help><![CDATA[
			Instructs the controller which view template and layout to render when it's finished processing the action. Note that when passing values for `controller` and/or `action`, this function does not load the actual action but rather just loads the corresponding view template.
			]]></help>
			<parameter name="controller" type="string" required="false">
			<help><![CDATA[
				Controller to include the view page for.
			]]></help>
			</parameter>
			<parameter name="action" type="string" required="false">
			<help><![CDATA[
				Action to include the view page for.
			]]></help>
			</parameter>
			<parameter name="template" type="string" required="false">
			<help><![CDATA[
				A specific template to render. Prefix with a leading slash `/` if you need to build a path from the root `views` folder.
			]]></help>
			</parameter>
			<parameter name="layout" type="any" required="false">
			<help><![CDATA[
				The layout to wrap the content in. Prefix with a leading slash `/` if you need to build a path from the root `views` folder. Pass `false` to not load a layout at all.
			]]></help>
			</parameter>
			<parameter name="cache" type="any" required="false">
			<help><![CDATA[
				Number of minutes to cache the content for.
			]]></help>
			</parameter>
			<parameter name="returnAs" type="string" required="false">
			<help><![CDATA[
				Set to `string` to return the result instead of automatically sending it to the client.
			]]></help>
			</parameter>
			<parameter name="hideDebugInformation" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to hide the debug information at the end of the output. This is useful when you're testing XML output in an environment where the global setting for `showDebugInformation` is `true`.
			]]></help>
			</parameter>
		</function>
		<function name="renderPartial" returns="any">
			<help><![CDATA[
			Instructs the controller to render a partial when it's finished processing the action.
			]]></help>
			<parameter name="partial" type="string" required="true">
			<help><![CDATA[
				The name of the partial file to be used. Prefix with a leading slash `/` if you need to build a path from the root `views` folder. Do not include the partial filename's underscore and file extension.
			]]></help>
			</parameter>
			<parameter name="cache" type="any" required="false">
			<help><![CDATA[
				Number of minutes to cache the content for.
			]]></help>
			</parameter>
			<parameter name="layout" type="string" required="false">
			<help><![CDATA[
				The layout to wrap the content in. Prefix with a leading slash `/` if you need to build a path from the root `views` folder. Pass `false` to not load a layout at all.
			]]></help>
			</parameter>
			<parameter name="returnAs" type="string" required="false">
			<help><![CDATA[
				Set to `string` to return the result instead of automatically sending it to the client.
			]]></help>
			</parameter>
			<parameter name="dataFunction" type="any" required="false">
			<help><![CDATA[
				Name of a controller function to load data from.
			]]></help>
			</parameter>
		</function>
		<function name="renderText" returns="void">
			<help><![CDATA[
			Instructs the controller to render specified text when it's finished processing the action.
			]]></help>
			<parameter name="text" type="any" required="true">
			<help><![CDATA[
				The text to be rendered.
			]]></help>
			</parameter>
		</function>
		<function name="renderWith" returns="any">
			<help><![CDATA[
			Instructs the controller to render the data passed in to the format that is requested. If the format requested is `json` or `xml`, Wheels will transform the data into that format automatically. For other formats (or to override the automatic formatting), you can also create a view template in this format: `nameofaction.xml.cfm`, `nameofaction.json.cfm`, `nameofaction.pdf.cfm`, etc.
			]]></help>
			<parameter name="data" type="any" required="true">
			<help><![CDATA[
				Data to format and render.
			]]></help>
			</parameter>
			<parameter name="controller" type="string" required="false">
			<help><![CDATA[
				Controller to include the view page for.
			]]></help>
			</parameter>
			<parameter name="action" type="string" required="false">
			<help><![CDATA[
				Action to include the view page for.
			]]></help>
			</parameter>
			<parameter name="template" type="string" required="false">
			<help><![CDATA[
				A specific template to render. Prefix with a leading slash `/` if you need to build a path from the root `views` folder.
			]]></help>
			</parameter>
			<parameter name="layout" type="any" required="false">
			<help><![CDATA[
				The layout to wrap the content in. Prefix with a leading slash `/` if you need to build a path from the root `views` folder. Pass `false` to not load a layout at all.
			]]></help>
			</parameter>
			<parameter name="cache" type="any" required="false">
			<help><![CDATA[
				Number of minutes to cache the content for.
			]]></help>
			</parameter>
			<parameter name="returnAs" type="string" required="false">
			<help><![CDATA[
				Set to `string` to return the result instead of automatically sending it to the client.
			]]></help>
			</parameter>
			<parameter name="hideDebugInformation" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to hide the debug information at the end of the output. This is useful when you're testing XML output in an environment where the global setting for `showDebugInformation` is `true`.
			]]></help>
			</parameter>
		</function>
		<function name="resetCycle" returns="void">
			<help><![CDATA[
			Resets a cycle so that it starts from the first list value the next time it is called.
			]]></help>
			<parameter name="name" type="string" required="false">
			<help><![CDATA[
				The name of the cycle to reset.
			]]></help>
			</parameter>
		</function>
		<function name="response" returns="string">
			<help><![CDATA[
			Returns content that Wheels will send to the client in response to the request.
			]]></help>
		</function>
		<function name="save" returns="boolean">
			<help><![CDATA[
			Saves the object if it passes validation and callbacks. Returns `true` if the object was saved successfully to the database, `false` if not.
			]]></help>
			<parameter name="parameterize" type="any" required="false">
			<help><![CDATA[
				Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.
			]]></help>
			</parameter>
			<parameter name="reload" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to reload the object from the database once an insert/update has completed.
			]]></help>
			</parameter>
			<parameter name="validate" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to skip validations for this operation.
			]]></help>
			</parameter>
			<parameter name="transaction" type="string" required="false">
			<help><![CDATA[
				Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.
			]]></help>
			</parameter>
			<parameter name="callbacks" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to disable callbacks for this operation.
			]]></help>
			</parameter>
		</function>
		<function name="secondSelectTag" returns="string">
			<help><![CDATA[
			Builds and returns a string containing one select form control for the seconds of a minute based on the supplied `name`.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name to populate in tag's `name` attribute.
			]]></help>
			</parameter>
			<parameter name="selected" type="string" required="false">
			<help><![CDATA[
				The second that should be selected initially.
			]]></help>
			</parameter>
			<parameter name="includeBlank" type="any" required="false">
			<help><![CDATA[
				Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
		</function>
		<function name="select" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a `select` form control based on the supplied `objectName` and `property`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="objectName" type="any" required="true">
			<help><![CDATA[
				The variable name of the object to build the form control for.
			]]></help>
			</parameter>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				The name of the property to use in the form control.
			]]></help>
			</parameter>
			<parameter name="association" type="string" required="false">
			<help><![CDATA[
				The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="position" type="string" required="false">
			<help><![CDATA[
				The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="options" type="any" required="true">
			<help><![CDATA[
				A collection to populate the select form control with. Can be a query recordset or an array of objects.
			]]></help>
			</parameter>
			<parameter name="includeBlank" type="any" required="false">
			<help><![CDATA[
				Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
			]]></help>
			</parameter>
			<parameter name="valueField" type="string" required="false">
			<help><![CDATA[
				The column or property to use for the value of each list element. Used only when a query or array of objects has been supplied in the `options` argument.
			]]></help>
			</parameter>
			<parameter name="textField" type="string" required="false">
			<help><![CDATA[
				The column or property to use for the value of each list element that the end user will see. Used only when a query or array of objects has been supplied in the `options` argument.
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="errorElement" type="string" required="false">
			<help><![CDATA[
				HTML tag to wrap the form control with when the object contains errors.
			]]></help>
			</parameter>
			<parameter name="errorClass" type="string" required="false">
			<help><![CDATA[
				The class name of the HTML tag that wraps the form control when there are errors.
			]]></help>
			</parameter>
		</function>
		<function name="selectTag" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a select form control based on the supplied `name` and `options`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name to populate in tag's `name` attribute.
			]]></help>
			</parameter>
			<parameter name="options" type="any" required="true">
			<help><![CDATA[
				A collection to populate the select form control with. Can be a query recordset or an array of objects.
			]]></help>
			</parameter>
			<parameter name="selected" type="string" required="false">
			<help><![CDATA[
				Value of option that should be selected by default.
			]]></help>
			</parameter>
			<parameter name="includeBlank" type="any" required="false">
			<help><![CDATA[
				Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
			]]></help>
			</parameter>
			<parameter name="multiple" type="boolean" required="false">
			<help><![CDATA[
				Whether to allow multiple selection of options in the select form control.
			]]></help>
			</parameter>
			<parameter name="valueField" type="string" required="false">
			<help><![CDATA[
				The column or property to use for the value of each list element. Used only when a query or array of objects has been supplied in the `options` argument.
			]]></help>
			</parameter>
			<parameter name="textField" type="string" required="false">
			<help><![CDATA[
				The column or property to use for the value of each list element that the end user will see. Used only when a query or array of objects has been supplied in the `options` argument.
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
		</function>
		<function name="sendEmail" returns="any">
			<help><![CDATA[
			Sends an email using a template and an optional layout to wrap it in. Besides the Wheels-specific arguments documented here, you can also pass in any argument that is accepted by the `cfmail` tag as well as your own arguments to be used by the view.
			]]></help>
			<parameter name="template" type="string" required="false">
			<help><![CDATA[
				The path to the email template or two paths if you want to send a multipart email. if the `detectMultipart` argument is `false`, the template for the text version should be the first one in the list. This argument is also aliased as `templates`.
			]]></help>
			</parameter>
			<parameter name="from" type="string" required="true">
			<help><![CDATA[
				Email address to send from.
			]]></help>
			</parameter>
			<parameter name="to" type="string" required="true">
			<help><![CDATA[
				List of email addresses to send the email to.
			]]></help>
			</parameter>
			<parameter name="subject" type="string" required="true">
			<help><![CDATA[
				The subject line of the email.
			]]></help>
			</parameter>
			<parameter name="layout" type="any" required="false">
			<help><![CDATA[
				Layout(s) to wrap the email template in. This argument is also aliased as `layouts`.
			]]></help>
			</parameter>
			<parameter name="file" type="string" required="false">
			<help><![CDATA[
				A list of the names of the files to attach to the email. This will reference files stored in the `files` folder (or a path relative to it). This argument is also aliased as `files`.
			]]></help>
			</parameter>
			<parameter name="detectMultipart" type="boolean" required="false">
			<help><![CDATA[
				When set to `true` and multiple values are provided for the `template` argument, Wheels will detect which of the templates is text and which one is HTML (by counting the `<` characters).
			]]></help>
			</parameter>
		</function>
		<function name="sendFile" returns="any">
			<help><![CDATA[
			Sends a file to the user (from the `files` folder or a path relative to it by default).
			]]></help>
			<parameter name="file" type="string" required="true">
			<help><![CDATA[
				The file to send to the user.
			]]></help>
			</parameter>
			<parameter name="name" type="string" required="false">
			<help><![CDATA[
				The file name to show in the browser download dialog box.
			]]></help>
			</parameter>
			<parameter name="type" type="string" required="false">
			<help><![CDATA[
				The HTTP content type to deliver the file as.
			]]></help>
			</parameter>
			<parameter name="disposition" type="string" required="false">
			<help><![CDATA[
				Set to `inline` to have the browser handle the opening of the file (possibly inline in the browser) or set to `attachment` to force a download dialog box.
			]]></help>
			</parameter>
			<parameter name="directory" type="string" required="false">
			<help><![CDATA[
				Directory outside of the webroot where the file exists. Must be a full path.
			]]></help>
			</parameter>
			<parameter name="deleteFile" type="boolean" required="false">
			<help><![CDATA[
				Pass in `true` to delete the file on the server after sending it.
			]]></help>
			</parameter>
		</function>
		<function name="set" returns="void">
			<help><![CDATA[
			Use to configure a global setting or set a default for a function.
			]]></help>
		</function>
		<function name="setFilterChain" returns="void">
			<help><![CDATA[
			Use this function if you need a more low level way of setting the entire filter chain for a controller.
			]]></help>
			<parameter name="chain" type="array" required="true">
			<help><![CDATA[
				An array of structs, each of which represent an `argumentCollection` that get passed to the `filters` function. This should represent the entire filter chain that you want to use for this controller.
			]]></help>
			</parameter>
		</function>
		<function name="setPagination" returns="void">
			<help><![CDATA[
			Allows you to set a pagination handle for a custom query so you can perform pagination on it in your view with `paginationLinks()`.
			]]></help>
			<parameter name="totalRecords" type="numeric" required="true">
			<help><![CDATA[
				Total count of records that should be represented by the paginated links.
			]]></help>
			</parameter>
			<parameter name="currentPage" type="numeric" required="false">
			<help><![CDATA[
				Page number that should be represented by the data being fetched and the paginated links.
			]]></help>
			</parameter>
			<parameter name="perPage" type="numeric" required="false">
			<help><![CDATA[
				Number of records that should be represented on each page of data.
			]]></help>
			</parameter>
			<parameter name="handle" type="string" required="false">
			<help><![CDATA[
				Name of handle to reference in @paginationLinks.
			]]></help>
			</parameter>
		</function>
		<function name="setPrimaryKey" returns="void">
			<help><![CDATA[
			Allows you to pass in the name(s) of the property(s) that should be used as the primary key(s). Pass as a list if defining a composite primary key. Also aliased as `setPrimaryKeys()`.
			]]></help>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				Property (or list of properties) to set as the primary key.
			]]></help>
			</parameter>
		</function>
		<function name="setPrimaryKeys" returns="void">
			<help><![CDATA[
			Alias for @setPrimaryKey. Use this for better readability when you're setting multiple properties as the primary key.
			]]></help>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				Property (or list of properties) to set as the primary key.
			]]></help>
			</parameter>
		</function>
		<function name="setProperties" returns="void">
			<help><![CDATA[
			Allows you to set all the properties of an object at once by passing in a structure with keys matching the property names.
			]]></help>
			<parameter name="properties" type="struct" required="false">
			<help><![CDATA[
				The properties you want to set on the object (can also be passed in as named arguments).
			]]></help>
			</parameter>
		</function>
		<function name="setResponse" returns="void">
			<help><![CDATA[
			Sets content that Wheels will send to the client in response to the request.
			]]></help>
			<parameter name="content" type="string" required="true">
			<help><![CDATA[
				The content to set as the response.
			]]></help>
			</parameter>
		</function>
		<function name="setTableNamePrefix" returns="void">
			<help><![CDATA[
			Sets a prefix to prepend to the table name when this model runs SQL queries.
			]]></help>
			<parameter name="prefix" type="string" required="true">
			<help><![CDATA[
				A prefix to prepend to the table name.
			]]></help>
			</parameter>
		</function>
		<function name="setVerificationChain" returns="void">
			<help><![CDATA[
			Use this function if you need a more low level way of setting the entire verification chain for a controller.
			]]></help>
			<parameter name="chain" type="array" required="true">
			<help><![CDATA[
				An array of structs, each of which represent an `argumentCollection` that get passed to the `verifies` function. This should represent the entire verification chain that you want to use for this controller.
			]]></help>
			</parameter>
		</function>
		<function name="simpleFormat" returns="string">
			<help><![CDATA[
			Replaces single newline characters with HTML break tags and double newline characters with HTML paragraph tags (properly closed to comply with XHTML standards).
			]]></help>
			<parameter name="text" type="string" required="true">
			<help><![CDATA[
				The text to format.
			]]></help>
			</parameter>
			<parameter name="wrap" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to wrap the result in a paragraph.
			]]></help>
			</parameter>
		</function>
		<function name="singularize" returns="string">
			<help><![CDATA[
			Returns the singular form of the passed in word.
			]]></help>
			<parameter name="word" type="string" required="true">
			<help><![CDATA[
				String to singularize.
			]]></help>
			</parameter>
		</function>
		<function name="startFormTag" returns="string">
			<help><![CDATA[
			Builds and returns a string containing the opening form tag. The form's action will be built according to the same rules as `URLFor`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="method" type="string" required="false">
			<help><![CDATA[
				The type of method to use in the form tag. `get` and `post` are the options.
			]]></help>
			</parameter>
			<parameter name="multipart" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` if the form should be able to upload files.
			]]></help>
			</parameter>
			<parameter name="spamProtection" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to protect the form against spammers (done with JavaScript).
			]]></help>
			</parameter>
			<parameter name="route" type="string" required="false">
			<help><![CDATA[
				Name of a route that you have configured in `config/routes.cfm`.
			]]></help>
			</parameter>
			<parameter name="controller" type="string" required="false">
			<help><![CDATA[
				Name of the controller to include in the URL.
			]]></help>
			</parameter>
			<parameter name="action" type="string" required="false">
			<help><![CDATA[
				Name of the action to include in the URL.
			]]></help>
			</parameter>
			<parameter name="key" type="any" required="false">
			<help><![CDATA[
				Key(s) to include in the URL.
			]]></help>
			</parameter>
			<parameter name="params" type="string" required="false">
			<help><![CDATA[
				Any additional params to be set in the query string.
			]]></help>
			</parameter>
			<parameter name="anchor" type="string" required="false">
			<help><![CDATA[
				Sets an anchor name to be appended to the path.
			]]></help>
			</parameter>
			<parameter name="onlyPath" type="boolean" required="false">
			<help><![CDATA[
				If `true`, returns only the relative URL (no protocol, host name or port).
			]]></help>
			</parameter>
			<parameter name="host" type="string" required="false">
			<help><![CDATA[
				Set this to override the current host.
			]]></help>
			</parameter>
			<parameter name="protocol" type="string" required="false">
			<help><![CDATA[
				Set this to override the current protocol.
			]]></help>
			</parameter>
			<parameter name="port" type="numeric" required="false">
			<help><![CDATA[
				Set this to override the current port number.
			]]></help>
			</parameter>
		</function>
		<function name="stripLinks" returns="string">
			<help><![CDATA[
			Removes all links from an HTML string, leaving just the link text.
			]]></help>
			<parameter name="html" type="string" required="true">
			<help><![CDATA[
				The HTML to remove links from.
			]]></help>
			</parameter>
		</function>
		<function name="stripTags" returns="string">
			<help><![CDATA[
			Removes all HTML tags from a string.
			]]></help>
			<parameter name="html" type="string" required="true">
			<help><![CDATA[
				The HTML to remove tag markup from.
			]]></help>
			</parameter>
		</function>
		<function name="styleSheetLinkTag" returns="string">
			<help><![CDATA[
			Returns a `link` tag for a stylesheet (or several) based on the supplied arguments.
			]]></help>
			<parameter name="sources" type="string" required="false">
			<help><![CDATA[
				The name of one or many CSS files in the `stylesheets` folder, minus the `.css` extension. (Can also be called with the `source` argument.)
			]]></help>
			</parameter>
			<parameter name="type" type="string" required="false">
			<help><![CDATA[
				The `type` attribute for the `link` tag.
			]]></help>
			</parameter>
			<parameter name="media" type="string" required="false">
			<help><![CDATA[
				The `media` attribute for the `link` tag.
			]]></help>
			</parameter>
			<parameter name="head" type="string" required="false">
			<help><![CDATA[
				Set to `true` to place the output in the `head` area of the HTML page instead of the default behavior, which is to place the output where the function is called from.
			]]></help>
			</parameter>
		</function>
		<function name="submitTag" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a submit button `form` control. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="value" type="string" required="false">
			<help><![CDATA[
				Message to display in the button form control.
			]]></help>
			</parameter>
			<parameter name="image" type="string" required="false">
			<help><![CDATA[
				File name of the image file to use in the button form control.
			]]></help>
			</parameter>
			<parameter name="disable" type="any" required="false">
			<help><![CDATA[
				Whether or not to disable the button upon clicking. (prevents double-clicking.)
			]]></help>
			</parameter>
		</function>
		<function name="sum" returns="any">
			<help><![CDATA[
			Calculates the sum of values for a given property. Uses the SQL function `SUM`. If no records can be found to perform the calculation on you can use the `ifNull` argument to decide what should be returned.
			]]></help>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				Name of the property to get the sum for (must be a property of a numeric data type).
			]]></help>
			</parameter>
			<parameter name="where" type="string" required="false">
			<help><![CDATA[
				This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.
			]]></help>
			</parameter>
			<parameter name="include" type="string" required="false">
			<help><![CDATA[
				Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. `department,addresses,emails`). You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))`, for example. These complex `include` strings only work when `returnAs` is set to `query` though.
			]]></help>
			</parameter>
			<parameter name="distinct" type="boolean" required="false">
			<help><![CDATA[
				When `true`, `SUM` returns the sum of unique values only.
			]]></help>
			</parameter>
			<parameter name="parameterize" type="any" required="false">
			<help><![CDATA[
				Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.
			]]></help>
			</parameter>
			<parameter name="ifNull" type="any" required="false">
			<help><![CDATA[
				The value returned if no records are found. Common usage is to set this to `0` to make sure a numeric value is always returned instead of a blank string.
			]]></help>
			</parameter>
			<parameter name="includeSoftDeletes" type="boolean" required="false">
			<help><![CDATA[
				You can set this argument to `true` to include soft-deleted records in the results.
			]]></help>
			</parameter>
		</function>
		<function name="table" returns="void">
			<help><![CDATA[
			Use this method to tell Wheels what database table to connect to for this model. You only need to use this method when your table naming does not follow the standard Wheels convention of a singular object name mapping to a plural table name.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name of the table to map this model to.
			]]></help>
			</parameter>
		</function>
		<function name="tableName" returns="string">
			<help><![CDATA[
			Returns the name of the database table that this model is mapped to.
			]]></help>
		</function>
		<function name="textArea" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a text area field form control based on the supplied `objectName` and `property`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="objectName" type="any" required="true">
			<help><![CDATA[
				The variable name of the object to build the form control for.
			]]></help>
			</parameter>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				The name of the property to use in the form control.
			]]></help>
			</parameter>
			<parameter name="association" type="string" required="false">
			<help><![CDATA[
				The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="position" type="string" required="false">
			<help><![CDATA[
				The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="errorElement" type="string" required="false">
			<help><![CDATA[
				HTML tag to wrap the form control with when the object contains errors.
			]]></help>
			</parameter>
			<parameter name="errorClass" type="string" required="false">
			<help><![CDATA[
				The class name of the HTML tag that wraps the form control when there are errors.
			]]></help>
			</parameter>
		</function>
		<function name="textAreaTag" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a text area form control based on the supplied `name`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name to populate in tag's `name` attribute.
			]]></help>
			</parameter>
			<parameter name="content" type="string" required="false">
			<help><![CDATA[
				Content to display in `textarea` on page load.
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
		</function>
		<function name="textField" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a text field form control based on the supplied `objectName` and `property`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="objectName" type="any" required="true">
			<help><![CDATA[
				The variable name of the object to build the form control for.
			]]></help>
			</parameter>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				The name of the property to use in the form control.
			]]></help>
			</parameter>
			<parameter name="association" type="string" required="false">
			<help><![CDATA[
				The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="position" type="string" required="false">
			<help><![CDATA[
				The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="errorElement" type="string" required="false">
			<help><![CDATA[
				HTML tag to wrap the form control with when the object contains errors.
			]]></help>
			</parameter>
			<parameter name="errorClass" type="string" required="false">
			<help><![CDATA[
				The class name of the HTML tag that wraps the form control when there are errors.
			]]></help>
			</parameter>
		</function>
		<function name="textFieldTag" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a text field form control based on the supplied `name`. Note: Pass any additional arguments like `class`, `rel`, and `id`, and the generated tag will also include those values as HTML attributes.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name to populate in tag's `name` attribute.
			]]></help>
			</parameter>
			<parameter name="value" type="string" required="false">
			<help><![CDATA[
				Value to populate in tag's `value` attribute.
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
		</function>
		<function name="timeAgoInWords" returns="string">
			<help><![CDATA[
			Pass in a date to this method, and it will return a string describing the approximate time difference between that date and the current date.
			]]></help>
			<parameter name="fromTime" type="date" required="true">
			<help><![CDATA[
				Date to compare from.
			]]></help>
			</parameter>
			<parameter name="includeSeconds" type="boolean" required="false">
			<help><![CDATA[
				Whether or not to include the number of seconds in the returned string.
			]]></help>
			</parameter>
			<parameter name="toTime" type="date" required="false">
			<help><![CDATA[
				Date to compare to.
			]]></help>
			</parameter>
		</function>
		<function name="timeSelect" returns="string">
			<help><![CDATA[
			Builds and returns a string containing three select form controls for hour, minute, and second based on the supplied `objectName` and `property`.
			]]></help>
			<parameter name="objectName" type="any" required="false">
			<help><![CDATA[
				The variable name of the object to build the form control for.
			]]></help>
			</parameter>
			<parameter name="property" type="string" required="false">
			<help><![CDATA[
				The name of the property to use in the form control.
			]]></help>
			</parameter>
			<parameter name="association" type="string" required="false">
			<help><![CDATA[
				The name of the association that the property is located on. Used for building nested forms that work with nested properties. If you are building a form with deep nesting, simply pass in a list to the nested object, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="position" type="string" required="false">
			<help><![CDATA[
				The position used when referencing a `hasMany` relationship in the `association` argument. Used for building nested forms that work with nested properties. If you are building a form with deep nestings, simply pass in a list of positions, and Wheels will figure it out.
			]]></help>
			</parameter>
			<parameter name="order" type="string" required="false">
			<help><![CDATA[
				Use to change the order of or exclude time select tags.
			]]></help>
			</parameter>
			<parameter name="separator" type="string" required="false">
			<help><![CDATA[
				Use to change the character that is displayed between the time select tags.
			]]></help>
			</parameter>
			<parameter name="minuteStep" type="numeric" required="false">
			<help><![CDATA[
				Pass in `10` to only show minute 10, 20, 30, etc.
			]]></help>
			</parameter>
			<parameter name="includeBlank" type="any" required="false">
			<help><![CDATA[
				Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control. The label will be applied to all `select` tags, but you can pass in a list to cutomize each one individually.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="errorElement" type="string" required="false">
			<help><![CDATA[
				HTML tag to wrap the form control with when the object contains errors.
			]]></help>
			</parameter>
			<parameter name="errorClass" type="string" required="false">
			<help><![CDATA[
				The class name of the HTML tag that wraps the form control when there are errors.
			]]></help>
			</parameter>
			<parameter name="combine" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to not combine the select parts into a single `DateTime` object.
			]]></help>
			</parameter>
			<parameter name="twelveHour" type="boolean" required="false">
			<help><![CDATA[
				whether to display the hours in 24 or 12 hour format. 12 hour format has AM/PM drop downs
			]]></help>
			</parameter>
		</function>
		<function name="timeSelectTags" returns="string">
			<help><![CDATA[
			Builds and returns a string containing three select form controls for hour, minute, and second based on `name`.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name to populate in tag's `name` attribute.
			]]></help>
			</parameter>
			<parameter name="selected" type="string" required="false">
			<help><![CDATA[
				Value of option that should be selected by default.
			]]></help>
			</parameter>
			<parameter name="order" type="string" required="false">
			<help><![CDATA[
				Use to change the order of or exclude time select tags.
			]]></help>
			</parameter>
			<parameter name="separator" type="string" required="false">
			<help><![CDATA[
				Use to change the character that is displayed between the time select tags.
			]]></help>
			</parameter>
			<parameter name="minuteStep" type="numeric" required="false">
			<help><![CDATA[
				Pass in `10` to only show minute 10, 20, 30, etc.
			]]></help>
			</parameter>
			<parameter name="includeBlank" type="any" required="false">
			<help><![CDATA[
				See documentation for @select.
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control. The label will be applied to all `select` tags, but you can pass in a list to cutomize each one individually.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="combine" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to not combine the select parts into a single `DateTime` object.
			]]></help>
			</parameter>
			<parameter name="twelveHour" type="boolean" required="false">
			<help><![CDATA[
				whether to display the hours in 24 or 12 hour format. 12 hour format has AM/PM drop downs
			]]></help>
			</parameter>
		</function>
		<function name="timeUntilInWords" returns="string">
			<help><![CDATA[
			Pass in a date to this method, and it will return a string describing the approximate time difference between the current date and that date.
			]]></help>
			<parameter name="toTime" type="date" required="true">
			<help><![CDATA[
				Date to compare to.
			]]></help>
			</parameter>
			<parameter name="includeSeconds" type="boolean" required="false">
			<help><![CDATA[
				Whether or not to include the number of seconds in the returned string.
			]]></help>
			</parameter>
			<parameter name="fromTime" type="date" required="false">
			<help><![CDATA[
				Date to compare from.
			]]></help>
			</parameter>
		</function>
		<function name="titleize" returns="string">
			<help><![CDATA[
			Capitalizes all words in the text to create a nicer looking title.
			]]></help>
			<parameter name="word" type="string" required="true">
			<help><![CDATA[
				The text to turn into a title.
			]]></help>
			</parameter>
		</function>
		<function name="toggle" returns="any">
			<help><![CDATA[
			Assigns to the property specified the opposite of the property's current boolean value. Throws an error if the property cannot be converted to a boolean value. Returns this object if save called internally is `false`.
			]]></help>
			<parameter name="save" type="boolean" required="false">
			<help><![CDATA[
				Argument to decide whether save the property after it has been toggled. Defaults to true.
			]]></help>
			</parameter>
		</function>
		<function name="toXHTML" returns="string">
			<help><![CDATA[
			Returns an XHTML-compliant string.
			]]></help>
			<parameter name="text" type="string" required="true">
			<help><![CDATA[
				String to make XHTML-compliant.
			]]></help>
			</parameter>
		</function>
		<function name="truncate" returns="string">
			<help><![CDATA[
			Truncates text to the specified length and replaces the last characters with the specified truncate string (which defaults to "...").
			]]></help>
			<parameter name="text" type="string" required="true">
			<help><![CDATA[
				The text to truncate.
			]]></help>
			</parameter>
			<parameter name="length" type="numeric" required="false">
			<help><![CDATA[
				Length to truncate the text to.
			]]></help>
			</parameter>
			<parameter name="truncateString" type="string" required="false">
			<help><![CDATA[
				String to replace the last characters with.
			]]></help>
			</parameter>
		</function>
		<function name="update" returns="boolean">
			<help><![CDATA[
			Updates the object with the supplied properties and saves it to the database. Returns `true` if the object was saved successfully to the database and `false` otherwise.
			]]></help>
			<parameter name="properties" type="struct" required="false">
			<help><![CDATA[
				The properties you want to set on the object (can also be passed in as named arguments).
			]]></help>
			</parameter>
			<parameter name="parameterize" type="any" required="false">
			<help><![CDATA[
				Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.
			]]></help>
			</parameter>
			<parameter name="reload" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)
			]]></help>
			</parameter>
			<parameter name="validate" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to skip validations for this operation.
			]]></help>
			</parameter>
			<parameter name="transaction" type="string" required="false">
			<help><![CDATA[
				Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.
			]]></help>
			</parameter>
			<parameter name="callbacks" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to disable callbacks for this operation.
			]]></help>
			</parameter>
		</function>
		<function name="updateAll" returns="numeric">
			<help><![CDATA[
			Updates all properties for the records that match the `where` argument. Property names and values can be passed in either using named arguments or as a struct to the `properties` argument. By default, objects will not be instantiated and therefore callbacks and validations are not invoked. You can change this behavior by passing in `instantiate=true`. This method returns the number of records that were updated.
			]]></help>
			<parameter name="where" type="string" required="false">
			<help><![CDATA[
				This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.
			]]></help>
			</parameter>
			<parameter name="include" type="string" required="false">
			<help><![CDATA[
				Associations that should be included in the query using `INNER` or `LEFT OUTER` joins (which join type that is used depends on how the association has been set up in your model). If all included associations are set on the current model, you can specify them in a list (e.g. `department,addresses,emails`). You can build more complex `include` strings by using parentheses when the association is set on an included model, like `album(artist(genre))`, for example. These complex `include` strings only work when `returnAs` is set to `query` though.
			]]></help>
			</parameter>
			<parameter name="properties" type="struct" required="false">
			<help><![CDATA[
				The properties you want to set on the object (can also be passed in as named arguments).
			]]></help>
			</parameter>
			<parameter name="reload" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)
			]]></help>
			</parameter>
			<parameter name="parameterize" type="any" required="false">
			<help><![CDATA[
				Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.
			]]></help>
			</parameter>
			<parameter name="instantiate" type="boolean" required="false">
			<help><![CDATA[
				Whether or not to instantiate the object(s) first. When objects are not instantiated, any callbacks and validations set on them will be skipped.
			]]></help>
			</parameter>
			<parameter name="validate" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to skip validations for this operation.
			]]></help>
			</parameter>
			<parameter name="transaction" type="string" required="false">
			<help><![CDATA[
				Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.
			]]></help>
			</parameter>
			<parameter name="callbacks" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to disable callbacks for this operation.
			]]></help>
			</parameter>
			<parameter name="includeSoftDeletes" type="boolean" required="false">
			<help><![CDATA[
				You can set this argument to `true` to include soft-deleted records in the results.
			]]></help>
			</parameter>
		</function>
		<function name="updateByKey" returns="boolean">
			<help><![CDATA[
			Finds the object with the supplied key and saves it (if validation permits it) with the supplied properties and/or named arguments. Property names and values can be passed in either using named arguments or as a struct to the `properties` argument. Returns `true` if the object was found and updated successfully, `false` otherwise.
			]]></help>
			<parameter name="key" type="any" required="true">
			<help><![CDATA[
				Primary key value(s) of the record to fetch. Separate with comma if passing in multiple primary key values. Accepts a string, list, or a numeric value.
			]]></help>
			</parameter>
			<parameter name="properties" type="struct" required="false">
			<help><![CDATA[
				The properties you want to set on the object (can also be passed in as named arguments).
			]]></help>
			</parameter>
			<parameter name="reload" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)
			]]></help>
			</parameter>
			<parameter name="validate" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to skip validations for this operation.
			]]></help>
			</parameter>
			<parameter name="transaction" type="string" required="false">
			<help><![CDATA[
				Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.
			]]></help>
			</parameter>
			<parameter name="callbacks" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to disable callbacks for this operation.
			]]></help>
			</parameter>
			<parameter name="includeSoftDeletes" type="boolean" required="false">
			<help><![CDATA[
				You can set this argument to `true` to include soft-deleted records in the results.
			]]></help>
			</parameter>
		</function>
		<function name="updateOne" returns="boolean">
			<help><![CDATA[
			Gets an object based on the arguments used and updates it with the supplied properties. Returns `true` if an object was found and updated successfully, `false` otherwise.
			]]></help>
			<parameter name="where" type="string" required="false">
			<help><![CDATA[
				This argument maps to the `WHERE` clause of the query. The following operators are supported: `=`, `!=`, `<>`, `<`, `<=`, `>`, `>=`, `LIKE`, `NOT LIKE`, `IN`, `NOT IN`, `IS NULL`, `IS NOT NULL`, `AND`, and `OR`. (Note that the key words need to be written in upper case.) You can also use parentheses to group statements. You do not need to specify the table name(s); Wheels will do that for you.
			]]></help>
			</parameter>
			<parameter name="order" type="string" required="false">
			<help><![CDATA[
				Maps to the `ORDER BY` clause of the query. You do not need to specify the table name(s); Wheels will do that for you.
			]]></help>
			</parameter>
			<parameter name="properties" type="struct" required="false">
			<help><![CDATA[
				The properties you want to set on the object (can also be passed in as named arguments).
			]]></help>
			</parameter>
			<parameter name="reload" type="boolean" required="false">
			<help><![CDATA[
				Set to `true` to force Wheels to query the database even though an identical query may have been run in the same request. (The default in Wheels is to get the second query from the request-level cache.)
			]]></help>
			</parameter>
			<parameter name="validate" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to skip validations for this operation.
			]]></help>
			</parameter>
			<parameter name="transaction" type="string" required="false">
			<help><![CDATA[
				Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.
			]]></help>
			</parameter>
			<parameter name="callbacks" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to disable callbacks for this operation.
			]]></help>
			</parameter>
			<parameter name="includeSoftDeletes" type="boolean" required="false">
			<help><![CDATA[
				You can set this argument to `true` to include soft-deleted records in the results.
			]]></help>
			</parameter>
		</function>
		<function name="updateProperties" returns="boolean">
			<help><![CDATA[
			Updates all the properties from the `properties` argument or other named arguments. If the object is invalid, the save will fail and `false` will be returned.
			]]></help>
			<parameter name="properties" type="struct" required="false">
			<help><![CDATA[
				Struct containing key/value pairs with properties and associated values that need to be updated globally.
			]]></help>
			</parameter>
			<parameter name="parameterize" type="any" required="false">
			<help><![CDATA[
				Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.
			]]></help>
			</parameter>
			<parameter name="validate" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to skip validations for this operation.
			]]></help>
			</parameter>
			<parameter name="transaction" type="string" required="false">
			<help><![CDATA[
				Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.
			]]></help>
			</parameter>
			<parameter name="callbacks" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to disable callbacks for this operation.
			]]></help>
			</parameter>
		</function>
		<function name="updateProperty" returns="boolean">
			<help><![CDATA[
			Updates a single property and saves the record without going through the normal validation procedure. This is especially useful for boolean flags on existing records.
			]]></help>
			<parameter name="property" type="string" required="true">
			<help><![CDATA[
				Name of the property to update the value for globally.
			]]></help>
			</parameter>
			<parameter name="value" type="any" required="true">
			<help><![CDATA[
				Value to set on the given property globally.
			]]></help>
			</parameter>
			<parameter name="parameterize" type="any" required="false">
			<help><![CDATA[
				Set to `true` to use `cfqueryparam` on all columns, or pass in a list of property names to use `cfqueryparam` on those only.
			]]></help>
			</parameter>
			<parameter name="transaction" type="string" required="false">
			<help><![CDATA[
				Set this to `commit` to update the database when the save has completed, `rollback` to run all the database queries but not commit them, or `none` to skip transaction handling altogether.
			]]></help>
			</parameter>
			<parameter name="callbacks" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to disable callbacks for this operation.
			]]></help>
			</parameter>
		</function>
		<function name="URLFor" returns="string">
			<help><![CDATA[
			Creates an internal URL based on supplied arguments.
			]]></help>
			<parameter name="route" type="string" required="false">
			<help><![CDATA[
				Name of a route that you have configured in `config/routes.cfm`.
			]]></help>
			</parameter>
			<parameter name="controller" type="string" required="false">
			<help><![CDATA[
				Name of the controller to include in the URL.
			]]></help>
			</parameter>
			<parameter name="action" type="string" required="false">
			<help><![CDATA[
				Name of the action to include in the URL.
			]]></help>
			</parameter>
			<parameter name="key" type="any" required="false">
			<help><![CDATA[
				Key(s) to include in the URL.
			]]></help>
			</parameter>
			<parameter name="params" type="string" required="false">
			<help><![CDATA[
				Any additional params to be set in the query string.
			]]></help>
			</parameter>
			<parameter name="anchor" type="string" required="false">
			<help><![CDATA[
				Sets an anchor name to be appended to the path.
			]]></help>
			</parameter>
			<parameter name="onlyPath" type="boolean" required="false">
			<help><![CDATA[
				If `true`, returns only the relative URL (no protocol, host name or port).
			]]></help>
			</parameter>
			<parameter name="host" type="string" required="false">
			<help><![CDATA[
				Set this to override the current host.
			]]></help>
			</parameter>
			<parameter name="protocol" type="string" required="false">
			<help><![CDATA[
				Set this to override the current protocol.
			]]></help>
			</parameter>
			<parameter name="port" type="numeric" required="false">
			<help><![CDATA[
				Set this to override the current port number.
			]]></help>
			</parameter>
		</function>
		<function name="usesLayout" returns="void">
			<help><![CDATA[
			Used within a controller's `init()` method to specify controller- or action-specific layouts.
			]]></help>
			<parameter name="template" type="string" required="true">
			<help><![CDATA[
				Name of the layout template or method name you want to use
			]]></help>
			</parameter>
			<parameter name="ajax" type="string" required="false">
			<help><![CDATA[
				Name of the layout template you want to use for AJAX requests
			]]></help>
			</parameter>
			<parameter name="except" type="string" required="false">
			<help><![CDATA[
				List of actions that SHOULD NOT get the layout
			]]></help>
			</parameter>
			<parameter name="only" type="string" required="false">
			<help><![CDATA[
				List of action that SHOULD ONLY get the layout
			]]></help>
			</parameter>
			<parameter name="useDefault" type="boolean" required="false">
			<help><![CDATA[
				When specifying conditions or a method, pass `true` to use the default `layout.cfm` if none of the conditions are met
			]]></help>
			</parameter>
		</function>
		<function name="valid" returns="boolean">
			<help><![CDATA[
			Runs the validation on the object and returns `true` if it passes it. Wheels will run the validation process automatically whenever an object is saved to the database, but sometimes it's useful to be able to run this method to see if the object is valid without saving it to the database.
			]]></help>
			<parameter name="callbacks" type="boolean" required="false">
			<help><![CDATA[
				Set to `false` to disable callbacks for this operation.
			]]></help>
			</parameter>
		</function>
		<function name="validate" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called to validate objects before they are saved.
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names to call. (Can also be called with the `method` argument.)
			]]></help>
			</parameter>
			<parameter name="if" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
			]]></help>
			</parameter>
			<parameter name="unless" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
			]]></help>
			</parameter>
		</function>
		<function name="validateOnCreate" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called to validate new objects before they are inserted.
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names to call. (Can also be called with the `method` argument.)
			]]></help>
			</parameter>
			<parameter name="if" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
			]]></help>
			</parameter>
			<parameter name="unless" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
			]]></help>
			</parameter>
		</function>
		<function name="validateOnUpdate" returns="void">
			<help><![CDATA[
			Registers method(s) that should be called to validate existing objects before they are updated.
			]]></help>
			<parameter name="methods" type="string" required="false">
			<help><![CDATA[
				Method name or list of method names to call. (Can also be called with the `method` argument.)
			]]></help>
			</parameter>
			<parameter name="if" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
			]]></help>
			</parameter>
			<parameter name="unless" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
			]]></help>
			</parameter>
		</function>
		<function name="validatesConfirmationOf" returns="void">
			<help><![CDATA[
			Validates that the value of the specified property also has an identical confirmation value. (This is common when having a user type in their email address a second time to confirm, confirming a password by typing it a second time, etc.) The confirmation value only exists temporarily and never gets saved to the database. By convention, the confirmation property has to be named the same as the property with "Confirmation" appended at the end. Using the password example, to confirm our `password` property, we would create a property called `passwordConfirmation`.
			]]></help>
			<parameter name="properties" type="string" required="false">
			<help><![CDATA[
				Name of property or list of property names to validate against (can also be called with the `property` argument).
			]]></help>
			</parameter>
			<parameter name="message" type="string" required="false">
			<help><![CDATA[
				Supply a custom error message here to override the built-in one.
			]]></help>
			</parameter>
			<parameter name="when" type="string" required="false">
			<help><![CDATA[
				Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).
			]]></help>
			</parameter>
			<parameter name="if" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
			]]></help>
			</parameter>
			<parameter name="unless" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
			]]></help>
			</parameter>
		</function>
		<function name="validatesExclusionOf" returns="void">
			<help><![CDATA[
			Validates that the value of the specified property does not exist in the supplied list.
			]]></help>
			<parameter name="properties" type="string" required="false">
			<help><![CDATA[
				Name of property or list of property names to validate against (can also be called with the `property` argument).
			]]></help>
			</parameter>
			<parameter name="list" type="string" required="true">
			<help><![CDATA[
				Single value or list of values that should not be allowed.
			]]></help>
			</parameter>
			<parameter name="message" type="string" required="false">
			<help><![CDATA[
				Supply a custom error message here to override the built-in one.
			]]></help>
			</parameter>
			<parameter name="when" type="string" required="false">
			<help><![CDATA[
				Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).
			]]></help>
			</parameter>
			<parameter name="allowBlank" type="boolean" required="false">
			<help><![CDATA[
				If set to `true`, validation will be skipped if the property value is an empty string or doesn't exist at all. This is useful if you only want to run this validation after it passes the @validatesPresenceOf test, thus avoiding duplicate error messages if it doesn't.
			]]></help>
			</parameter>
			<parameter name="if" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
			]]></help>
			</parameter>
			<parameter name="unless" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
			]]></help>
			</parameter>
		</function>
		<function name="validatesFormatOf" returns="void">
			<help><![CDATA[
			Validates that the value of the specified property is formatted correctly by matching it against a regular expression using the `regEx` argument and/or against a built-in CFML validation type using the `type` argument (`creditcard`, `date`, `email`, etc.).
			]]></help>
			<parameter name="properties" type="string" required="false">
			<help><![CDATA[
				Name of property or list of property names to validate against (can also be called with the `property` argument).
			]]></help>
			</parameter>
			<parameter name="regEx" type="string" required="false">
			<help><![CDATA[
				Regular expression to verify against.
			]]></help>
			</parameter>
			<parameter name="type" type="string" required="false">
			<help><![CDATA[
				One of the following types to verify against: `creditcard`, `date`, `email`, `eurodate`, `guid`, `social_security_number`, `ssn`, `telephone`, `time`, `URL`, `USdate`, `UUID`, `variableName`, `zipcode` (will be passed through to your CFML engine's `IsValid()` function).
			]]></help>
			</parameter>
			<parameter name="message" type="string" required="false">
			<help><![CDATA[
				Supply a custom error message here to override the built-in one.
			]]></help>
			</parameter>
			<parameter name="when" type="string" required="false">
			<help><![CDATA[
				Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).
			]]></help>
			</parameter>
			<parameter name="allowBlank" type="boolean" required="false">
			<help><![CDATA[
				If set to `true`, validation will be skipped if the property value is an empty string or doesn't exist at all. This is useful if you only want to run this validation after it passes the @validatesPresenceOf test, thus avoiding duplicate error messages if it doesn't.
			]]></help>
			</parameter>
			<parameter name="if" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
			]]></help>
			</parameter>
			<parameter name="unless" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
			]]></help>
			</parameter>
		</function>
		<function name="validatesInclusionOf" returns="void">
			<help><![CDATA[
			Validates that the value of the specified property exists in the supplied list.
			]]></help>
			<parameter name="properties" type="string" required="false">
			<help><![CDATA[
				Name of property or list of property names to validate against (can also be called with the `property` argument).
			]]></help>
			</parameter>
			<parameter name="list" type="string" required="true">
			<help><![CDATA[
				List of allowed values.
			]]></help>
			</parameter>
			<parameter name="message" type="string" required="false">
			<help><![CDATA[
				Supply a custom error message here to override the built-in one.
			]]></help>
			</parameter>
			<parameter name="when" type="string" required="false">
			<help><![CDATA[
				Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).
			]]></help>
			</parameter>
			<parameter name="allowBlank" type="boolean" required="false">
			<help><![CDATA[
				If set to `true`, validation will be skipped if the property value is an empty string or doesn't exist at all. This is useful if you only want to run this validation after it passes the @validatesPresenceOf test, thus avoiding duplicate error messages if it doesn't.
			]]></help>
			</parameter>
			<parameter name="if" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
			]]></help>
			</parameter>
			<parameter name="unless" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
			]]></help>
			</parameter>
		</function>
		<function name="validatesLengthOf" returns="void">
			<help><![CDATA[
			Validates that the value of the specified property matches the length requirements supplied. Use the `exactly`, `maximum`, `minimum` and `within` arguments to specify the length requirements.
			]]></help>
			<parameter name="properties" type="string" required="false">
			<help><![CDATA[
				Name of property or list of property names to validate against (can also be called with the `property` argument).
			]]></help>
			</parameter>
			<parameter name="message" type="string" required="false">
			<help><![CDATA[
				Supply a custom error message here to override the built-in one.
			]]></help>
			</parameter>
			<parameter name="when" type="string" required="false">
			<help><![CDATA[
				Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).
			]]></help>
			</parameter>
			<parameter name="allowBlank" type="boolean" required="false">
			<help><![CDATA[
				If set to `true`, validation will be skipped if the property value is an empty string or doesn't exist at all. This is useful if you only want to run this validation after it passes the @validatesPresenceOf test, thus avoiding duplicate error messages if it doesn't.
			]]></help>
			</parameter>
			<parameter name="exactly" type="numeric" required="false">
			<help><![CDATA[
				The exact length that the property value must be.
			]]></help>
			</parameter>
			<parameter name="maximum" type="numeric" required="false">
			<help><![CDATA[
				The maximum length that the property value can be.
			]]></help>
			</parameter>
			<parameter name="minimum" type="numeric" required="false">
			<help><![CDATA[
				The minimum length that the property value can be.
			]]></help>
			</parameter>
			<parameter name="within" type="string" required="false">
			<help><![CDATA[
				A list of two values (minimum and maximum) that the length of the property value must fall within.
			]]></help>
			</parameter>
			<parameter name="if" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
			]]></help>
			</parameter>
			<parameter name="unless" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
			]]></help>
			</parameter>
		</function>
		<function name="validatesNumericalityOf" returns="void">
			<help><![CDATA[
			Validates that the value of the specified property is numeric.
			]]></help>
			<parameter name="properties" type="string" required="false">
			<help><![CDATA[
				Name of property or list of property names to validate against (can also be called with the `property` argument).
			]]></help>
			</parameter>
			<parameter name="message" type="string" required="false">
			<help><![CDATA[
				Supply a custom error message here to override the built-in one.
			]]></help>
			</parameter>
			<parameter name="when" type="string" required="false">
			<help><![CDATA[
				Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).
			]]></help>
			</parameter>
			<parameter name="allowBlank" type="boolean" required="false">
			<help><![CDATA[
				If set to `true`, validation will be skipped if the property value is an empty string or doesn't exist at all. This is useful if you only want to run this validation after it passes the @validatesPresenceOf test, thus avoiding duplicate error messages if it doesn't.
			]]></help>
			</parameter>
			<parameter name="onlyInteger" type="boolean" required="false">
			<help><![CDATA[
				Specifies whether the property value must be an integer.
			]]></help>
			</parameter>
			<parameter name="if" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
			]]></help>
			</parameter>
			<parameter name="unless" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
			]]></help>
			</parameter>
			<parameter name="odd" type="boolean" required="false">
			<help><![CDATA[
				Specifies whether or not the value must be an odd number.
			]]></help>
			</parameter>
			<parameter name="even" type="boolean" required="false">
			<help><![CDATA[
				Specifies whether or not the value must be an even number.
			]]></help>
			</parameter>
			<parameter name="greaterThan" type="numeric" required="false">
			<help><![CDATA[
				Specifies whether or not the value must be greater than the supplied value.
			]]></help>
			</parameter>
			<parameter name="greaterThanOrEqualTo" type="numeric" required="false">
			<help><![CDATA[
				Specifies whether or not the value must be greater than or equal the supplied value.
			]]></help>
			</parameter>
			<parameter name="equalTo" type="numeric" required="false">
			<help><![CDATA[
				Specifies whether or not the value must be equal to the supplied value.
			]]></help>
			</parameter>
			<parameter name="lessThan" type="numeric" required="false">
			<help><![CDATA[
				Specifies whether or not the value must be less than the supplied value.
			]]></help>
			</parameter>
			<parameter name="lessThanOrEqualTo" type="numeric" required="false">
			<help><![CDATA[
				Specifies whether or not the value must be less than or equal the supplied value.
			]]></help>
			</parameter>
		</function>
		<function name="validatesPresenceOf" returns="void">
			<help><![CDATA[
			Validates that the specified property exists and that its value is not blank.
			]]></help>
			<parameter name="properties" type="string" required="false">
			<help><![CDATA[
				Name of property or list of property names to validate against (can also be called with the `property` argument).
			]]></help>
			</parameter>
			<parameter name="message" type="string" required="false">
			<help><![CDATA[
				Supply a custom error message here to override the built-in one.
			]]></help>
			</parameter>
			<parameter name="when" type="string" required="false">
			<help><![CDATA[
				Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).
			]]></help>
			</parameter>
			<parameter name="if" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
			]]></help>
			</parameter>
			<parameter name="unless" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
			]]></help>
			</parameter>
		</function>
		<function name="validatesUniquenessOf" returns="void">
			<help><![CDATA[
			Validates that the value of the specified property is unique in the database table. Useful for ensuring that two users can't sign up to a website with identical screen names for example. When a new record is created, a check is made to make sure that no record already exists in the database with the given value for the specified property. When the record is updated, the same check is made but disregarding the record itself.
			]]></help>
			<parameter name="properties" type="string" required="false">
			<help><![CDATA[
				Name of property or list of property names to validate against (can also be called with the `property` argument).
			]]></help>
			</parameter>
			<parameter name="message" type="string" required="false">
			<help><![CDATA[
				Supply a custom error message here to override the built-in one.
			]]></help>
			</parameter>
			<parameter name="when" type="string" required="false">
			<help><![CDATA[
				Pass in `onCreate` or `onUpdate` to limit when this validation occurs (by default validation will occur on both create and update, i.e. `onSave`).
			]]></help>
			</parameter>
			<parameter name="allowBlank" type="boolean" required="false">
			<help><![CDATA[
				If set to `true`, validation will be skipped if the property value is an empty string or doesn't exist at all. This is useful if you only want to run this validation after it passes the @validatesPresenceOf test, thus avoiding duplicate error messages if it doesn't.
			]]></help>
			</parameter>
			<parameter name="scope" type="string" required="false">
			<help><![CDATA[
				One or more properties by which to limit the scope of the uniqueness constraint.
			]]></help>
			</parameter>
			<parameter name="if" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `true` validation will run).
			]]></help>
			</parameter>
			<parameter name="unless" type="string" required="false">
			<help><![CDATA[
				String expression to be evaluated that decides if validation will be run (if the expression returns `false` validation will run).
			]]></help>
			</parameter>
		</function>
		<function name="verificationChain" returns="array">
			<help><![CDATA[
			Returns an array of all the verifications set on this controller in the order in which they will be executed.
			]]></help>
		</function>
		<function name="verifies" returns="void">
			<help><![CDATA[
			Instructs Wheels to verify that some specific criterias are met before running an action.
			]]></help>
			<parameter name="only" type="string" required="false">
			<help><![CDATA[
				List of action names to limit this verification to.
			]]></help>
			</parameter>
			<parameter name="except" type="string" required="false">
			<help><![CDATA[
				List of action names to exclude this verification from.
			]]></help>
			</parameter>
			<parameter name="post" type="any" required="false">
			<help><![CDATA[
				Set to `true` to verify that this is a `POST` request.
			]]></help>
			</parameter>
			<parameter name="get" type="any" required="false">
			<help><![CDATA[
				Set to `true` to verify that this is a `GET` request.
			]]></help>
			</parameter>
			<parameter name="ajax" type="any" required="false">
			<help><![CDATA[
				Set to `true` to verify that this is an AJAX request.
			]]></help>
			</parameter>
			<parameter name="cookie" type="string" required="false">
			<help><![CDATA[
				Verify that the passed in variable name exists in the `cookie` scope.
			]]></help>
			</parameter>
			<parameter name="session" type="string" required="false">
			<help><![CDATA[
				Verify that the passed in variable name exists in the `session` scope.
			]]></help>
			</parameter>
			<parameter name="params" type="string" required="false">
			<help><![CDATA[
				Verify that the passed in variable name exists in the `params` struct.
			]]></help>
			</parameter>
			<parameter name="handler" type="string" required="false">
			<help><![CDATA[
				Pass in the name of a function that should handle failed verifications. The default is to just abort the request when a verification fails.
			]]></help>
			</parameter>
			<parameter name="cookieTypes" type="string" required="false">
			<help><![CDATA[
				List of types to check each listed `cookie` value against (will be passed through to your CFML engine's `IsValid` function).
			]]></help>
			</parameter>
			<parameter name="sessionTypes" type="string" required="false">
			<help><![CDATA[
				List of types to check each list `session` value against (will be passed through to your CFML engine's `IsValid` function).
			]]></help>
			</parameter>
			<parameter name="paramsTypes" type="string" required="false">
			<help><![CDATA[
				List of types to check each `params` value against (will be passed through to your CFML engine's `IsValid` function).
			]]></help>
			</parameter>
		</function>
		<function name="wordTruncate" returns="string">
			<help><![CDATA[
			Truncates text to the specified length of words and replaces the remaining characters with the specified truncate string (which defaults to "...").
			]]></help>
			<parameter name="text" type="string" required="true">
			<help><![CDATA[
				The text to truncate.
			]]></help>
			</parameter>
			<parameter name="length" type="numeric" required="false">
			<help><![CDATA[
				Number of words to truncate the text to.
			]]></help>
			</parameter>
			<parameter name="truncateString" type="string" required="false">
			<help><![CDATA[
				String to replace the last characters with.
			]]></help>
			</parameter>
		</function>
		<function name="yearSelectTag" returns="string">
			<help><![CDATA[
			Builds and returns a string containing a select form control for a range of years based on the supplied `name`.
			]]></help>
			<parameter name="name" type="string" required="true">
			<help><![CDATA[
				Name to populate in tag's `name` attribute.
			]]></help>
			</parameter>
			<parameter name="selected" type="string" required="false">
			<help><![CDATA[
				The year that should be selected initially.
			]]></help>
			</parameter>
			<parameter name="startYear" type="numeric" required="false">
			<help><![CDATA[
				First year in select list.
			]]></help>
			</parameter>
			<parameter name="endYear" type="numeric" required="false">
			<help><![CDATA[
				Last year in select list.
			]]></help>
			</parameter>
			<parameter name="includeBlank" type="any" required="false">
			<help><![CDATA[
				Whether to include a blank option in the select form control. Pass `true` to include a blank line or a string that should represent what display text should appear for the empty value (for example, "- Select One -").
			]]></help>
			</parameter>
			<parameter name="label" type="string" required="false">
			<help><![CDATA[
				The label text to use in the form control.
			]]></help>
			</parameter>
			<parameter name="labelPlacement" type="string" required="false">
			<help><![CDATA[
				Whether to place the label `before`, `after`, or wrapped `around` the form control.
			]]></help>
			</parameter>
			<parameter name="prepend" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="append" type="string" required="false">
			<help><![CDATA[
				String to append to the form control. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="prependToLabel" type="string" required="false">
			<help><![CDATA[
				String to prepend to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
			<parameter name="appendToLabel" type="string" required="false">
			<help><![CDATA[
				String to append to the form control's `label`. Useful to wrap the form control with HTML tags.
			]]></help>
			</parameter>
		</function>
	</functions>
</dictionary>